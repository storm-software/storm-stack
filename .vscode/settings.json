{
  "files.eol": "\n",
  "files.insertFinalNewline": true,
  "search.exclude": {
    "**/bower_components": true,
    "**/*.code-search": true,
    "**/.tamagui": true,
    "**/.next/**": true,
    "**/.next-dev/**": true,
    "**/dist/**": true,
    "**/dist-dev/**": true,
    "**/.docusaurus/**": true,
    "**/CHANGELOG.json": true,
    "docs/spec.html": true,
    "**/node_modules/**": true,
    "**/.tsbuildinfo": true,
    "packages/compiler/templates/__snapshots__/**": true,
    "packages/website/versioned_docs/**": true,
    "packages/http-client-csharp/**/Generated/**": true,
    "packages/samples/scratch/**": false // Those files are in gitignore but we still want to search for them
  },
  "files.exclude": {
    "**/common/temp/**": true,
    "**/obj/**": true,
    "**/bin/**": true,
    "**/.git": true,
    "**/.DS_Store": true
  },
  "relay.autoStartCompiler": true,
  "relay.rootDirectory": "../",
  "relay.pathToConfig": "../packages/graphql-tools/config/relay.config.js",
  "rust-analyzer.procMacro.ignored": {
    "napi-derive": ["napi"]
  },
  "nix.enableLanguageServer": true,
  "nix.serverPath": "nixd", // or "nil"
  "nix.serverSettings": {
    // check https://github.com/nix-community/nixd/blob/main/nixd/docs/configuration.md for all nixd config
    "nixd": {
      "formatting": {
        "command": ["nixfmt"]
      },
      "options": {
        // By default, this entry will be read from `import <nixpkgs> { }`.
        // You can write arbitrary Nix expressions here, to produce valid "options" declaration result.
        // Tip: for flake-based configuration, utilize `builtins.getFlake`
        "nixos": {
          "expr": "(builtins.getFlake \"${workspaceFolder}/flake.nix\").nixosConfigurations.<name>.options"
        },
        "home-manager": {
          "expr": "(builtins.getFlake \"${workspaceFolder}/flake.nix\").homeConfigurations.<name>.options"
        },
        // Tip: use ${workspaceFolder} variable to define path
        "nix-darwin": {
          "expr": "(builtins.getFlake \"${workspaceFolder}/flake.nix\").darwinConfigurations.<name>.options"
        }
      }
    }
  },
  "json.schemas": [
    {
      "url": "https://cdn.jsdelivr.net/npm/tsup/schema.json",
      "fileMatch": ["tsup.config.json"]
    },
    {
      "url": "https://cdn.jsdelivr.net/npm/nx/schemas/nx-schema.json",
      "fileMatch": ["nx.json"]
    },
    {
      "url": "https://cdn.jsdelivr.net/npm/@storm-software/config/schemas/storm-workspace.schema.json",
      "fileMatch": ["storm-workspace.json"]
    }
  ],
  "yaml.schemas": {
    "url": "https://json.schemastore.org/github-action.json",
    "fileMatch": [".github/actions/setup/action.yml"]
  },
  "workbench.colorCustomizations": {
    "statusBar.background": "#1d232a",
    "statusBarItem.hoverBackground": "#313C47",
    "statusBar.foreground": "#1fb2a6"
  },
  "peacock.color": "#1fb2a6",
  "typescript.tsdk": "node_modules/typescript/lib",
  "typescript.enablePromptUseWorkspaceTsdk": true,
  "tailwindCSS.experimental.classRegex": [
    [
      "cva(?:<[^>]*>)?(([^)]*))",
      "[\"'`]([^\"'`]*).*?[\"'`]",
      "(?:twMerge|twJoin)\\(([^\\);]*)[\\);]"
    ]
  ],
  "prettier.requireConfig": true,
  "prettier.bracketSameLine": true,
  "prettier.configPath": "./node_modules/@storm-software/prettier/config.json",
  "prettier.ignorePath": "./node_modules/@storm-software/prettier/.prettierignore",
  "prettier.enableDebugLogs": false,
  "prettier.enable": true,
  "markdownlint.configFile": "./node_modules/@storm-software/markdownlint/config/base.markdownlint-cli2.jsonc",
  "eslint.debug": false,
  "eslint.codeAction.disableRuleComment": {
    "enable": true,
    "location": "separateLine"
  },
  "eslint.codeAction.showDocumentation": {
    "enable": true
  },
  "eslint.useFlatConfig": true,
  "editor.bracketPairColorization.enabled": true,
  "editor.guides.bracketPairs": "active",
  "editor.tabCompletion": "on",
  "editor.formatOnSave": false,
  "editor.codeActionsOnSave": {
    "source.fixAll.eslint": "explicit",
    "source.organizeImports": "never"
  },
  "editor.defaultFormatter": "esbenp.prettier-vscode",
  "files.associations": {
    "*.hbs": "handlebars",
    "*.acid": "acidic",
    "*.acidic": "acidic"
  },
  "[javascript]": {
    "editor.formatOnSave": true,
    "editor.defaultFormatter": "dbaeumer.vscode-eslint",
    "editor.codeActionsOnSave": {
      "source.fixAll.eslint": "explicit",
      "quickfix.biome": "explicit",
      "source.sortMembers": "explicit"
    }
  },
  "[javascriptreact]": {
    "editor.formatOnSave": true,
    "editor.defaultFormatter": "dbaeumer.vscode-eslint",
    "editor.codeActionsOnSave": {
      "source.fixAll.eslint": "explicit",
      "quickfix.biome": "explicit",
      "source.sortMembers": "explicit"
    }
  },
  "[typescript]": {
    "editor.formatOnSave": true,
    "editor.defaultFormatter": "esbenp.prettier-vscode",
    "editor.codeActionsOnSave": {
      "source.fixAll.eslint": "explicit",
      "quickfix.biome": "explicit",
      "source.sortMembers": "explicit"
    }
  },
  "[typescriptreact]": {
    "editor.formatOnSave": true,
    "editor.defaultFormatter": "dbaeumer.vscode-eslint",
    "editor.codeActionsOnSave": {
      "source.fixAll.eslint": "explicit",
      "quickfix.biome": "explicit",
      "source.sortMembers": "explicit"
    }
  },
  "[json]": {
    "editor.formatOnSave": true,
    "editor.defaultFormatter": "dbaeumer.vscode-eslint"
  },
  "[jsonc]": {
    "editor.formatOnSave": true,
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[markdown]": {
    "editor.formatOnSave": true,
    "editor.defaultFormatter": "dbaeumer.vscode-eslint",
    "editor.formatOnPaste": true
  },
  "[mdx]": {
    "editor.formatOnSave": true,
    "editor.defaultFormatter": "dbaeumer.vscode-eslint",
    "editor.wordWrap": "on"
  },
  "[prisma]": {
    "editor.formatOnSave": true,
    "editor.defaultFormatter": "Prisma.prisma"
  },
  "[acidic]": {
    "editor.formatOnSave": true,
    "editor.defaultFormatter": "Prisma.prisma"
  },
  "[handlebars]": {
    "editor.formatOnSave": false,
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[csharp]": {
    "editor.formatOnSave": true,
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[rust]": {
    "editor.formatOnSave": true,
    "editor.defaultFormatter": "rust-lang.rust-analyzer"
  },
  "[toml]": {
    "editor.formatOnSave": true,
    "editor.defaultFormatter": "tamasfe.even-better-toml"
  },
  "[yaml]": {
    "editor.formatOnSave": true,
    "editor.defaultFormatter": "redhat.vscode-yaml"
  },
  "[css]": {
    "editor.formatOnSave": true,
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "commitizen.capitalizeWindowsDriveLetter": true,
  "commitizen.autoSync": false,
  "commitizen.showOutputChannel": "always",
  "nxConsole.generateAiAgentRules": true
}
