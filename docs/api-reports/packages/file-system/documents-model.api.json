{
  "metadata": {
    "toolPackage": "@microsoft/api-extractor",
    "toolVersion": "7.46.2",
    "schemaVersion": 1011,
    "oldestForwardsCompatibleVersion": 1001,
    "tsdocConfig": {
      "$schema": "https://developer.microsoft.com/json-schemas/tsdoc/v0/tsdoc.schema.json",
      "noStandardTags": true,
      "tagDefinitions": [
        {
          "tagName": "@alpha",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@beta",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@defaultValue",
          "syntaxKind": "block"
        },
        {
          "tagName": "@decorator",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@deprecated",
          "syntaxKind": "block"
        },
        {
          "tagName": "@eventProperty",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@example",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@experimental",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@inheritDoc",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@internal",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@label",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@link",
          "syntaxKind": "inline",
          "allowMultiple": true
        },
        {
          "tagName": "@override",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@packageDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@param",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@privateRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@public",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@readonly",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@remarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@returns",
          "syntaxKind": "block"
        },
        {
          "tagName": "@sealed",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@see",
          "syntaxKind": "block"
        },
        {
          "tagName": "@throws",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@typeParam",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@virtual",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@betaDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@internalRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@preapproved",
          "syntaxKind": "modifier"
        }
      ],
      "supportForTags": {
        "@alpha": true,
        "@beta": true,
        "@defaultValue": true,
        "@decorator": true,
        "@deprecated": true,
        "@eventProperty": true,
        "@example": true,
        "@experimental": true,
        "@inheritDoc": true,
        "@internal": true,
        "@label": true,
        "@link": true,
        "@override": true,
        "@packageDocumentation": true,
        "@param": true,
        "@privateRemarks": true,
        "@public": true,
        "@readonly": true,
        "@remarks": true,
        "@returns": true,
        "@sealed": true,
        "@see": true,
        "@throws": true,
        "@typeParam": true,
        "@virtual": true,
        "@betaDocumentation": true,
        "@internalRemarks": true,
        "@preapproved": true
      },
      "reportUnsupportedHtmlElements": false
    }
  },
  "kind": "Package",
  "canonicalReference": "@storm-stack/file-system!",
  "docComment": "",
  "name": "@storm-stack/file-system",
  "preserveMemberOrder": false,
  "members": [
    {
      "kind": "EntryPoint",
      "canonicalReference": "@storm-stack/file-system!",
      "name": "",
      "preserveMemberOrder": false,
      "members": [
        {
          "kind": "Function",
          "canonicalReference": "@storm-stack/file-system!chmodPlusX:function(1)",
          "docComment": "/**\n * Adds execute permissions to a file\n *\n * @param file - The file to add execute permissions to\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function chmodPlusX(file: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/file-system/src/package-management/chmod.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "file",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "chmodPlusX"
        },
        {
          "kind": "Function",
          "canonicalReference": "@storm-stack/file-system!copyFile:function(1)",
          "docComment": "/**\n * Copy a file from one location to another\n *\n * @param file - The file to copy\n *\n * @param dest - The destination location\n *\n * @returns An indicator specifying if the copy was successful\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "copyFile: (file: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", dest: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Content",
              "text": "string | "
            },
            {
              "kind": "Reference",
              "text": "Buffer",
              "canonicalReference": "!\"\\\"buffer\\\"\".__global.Buffer:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            }
          ],
          "fileUrlPath": "packages/file-system/src/files/copy-files.ts",
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "file",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "dest",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "copyFile"
        },
        {
          "kind": "Function",
          "canonicalReference": "@storm-stack/file-system!copyFiles:function(1)",
          "docComment": "/**\n * Copy files from one location to another\n *\n * @param from - The source location\n *\n * @param to - The destination location\n *\n * @param options - The copy options\n *\n * @returns An indicator specifying if the copy was successful\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "copyFiles: (from: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", to: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", options?: "
            },
            {
              "kind": "Reference",
              "text": "CopySyncOptions",
              "canonicalReference": "!\"\\\"fs\\\"\".CopySyncOptions:interface"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Content",
              "text": "string | "
            },
            {
              "kind": "Reference",
              "text": "Buffer",
              "canonicalReference": "!\"\\\"buffer\\\"\".__global.Buffer:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            }
          ],
          "fileUrlPath": "packages/file-system/src/files/copy-files.ts",
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 10
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "from",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "to",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": true
            }
          ],
          "name": "copyFiles"
        },
        {
          "kind": "Function",
          "canonicalReference": "@storm-stack/file-system!deriveNewSemverVersion:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "deriveNewSemverVersion: (currentSemverVersion: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", semverSpecifier: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", preid?: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Content",
              "text": "string"
            }
          ],
          "fileUrlPath": "packages/file-system/src/package-management/semver-fns.ts",
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "currentSemverVersion",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "semverSpecifier",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "preid",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": true
            }
          ],
          "name": "deriveNewSemverVersion"
        },
        {
          "kind": "Function",
          "canonicalReference": "@storm-stack/file-system!ensurePackage:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function ensurePackage(pkg: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", dev: "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ", pkgManager?: "
            },
            {
              "kind": "Reference",
              "text": "PackageManagers",
              "canonicalReference": "@storm-stack/file-system!PackageManagers:type"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": ", tag?: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", projectPath?: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", exactVersion?: "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/file-system/src/package-management/package-fns.ts",
          "returnTypeTokenRange": {
            "startIndex": 14,
            "endIndex": 15
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "pkg",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "dev",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "pkgManager",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "isOptional": true
            },
            {
              "parameterName": "tag",
              "parameterTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 9
              },
              "isOptional": true
            },
            {
              "parameterName": "projectPath",
              "parameterTypeTokenRange": {
                "startIndex": 10,
                "endIndex": 11
              },
              "isOptional": true
            },
            {
              "parameterName": "exactVersion",
              "parameterTypeTokenRange": {
                "startIndex": 12,
                "endIndex": 13
              },
              "isOptional": true
            }
          ],
          "name": "ensurePackage"
        },
        {
          "kind": "Function",
          "canonicalReference": "@storm-stack/file-system!exists:function(1)",
          "docComment": "/**\n * Check if a file exists\n *\n * @param filePath - The file path to check\n *\n * @returns An indicator specifying if the file exists\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "exists: (filePath: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Content",
              "text": "boolean"
            }
          ],
          "fileUrlPath": "packages/file-system/src/files/exists.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "filePath",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "exists"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/file-system!FileSystemErrorCode:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type FileSystemErrorCode = "
            },
            {
              "kind": "Reference",
              "text": "ErrorCode",
              "canonicalReference": "@storm-stack/file-system!~ErrorCode:type"
            },
            {
              "kind": "Content",
              "text": " | \"invalid_file_path\" | \"invalid_file_content\" | \"file_does_not_exist\" | \"file_write_failure\""
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/file-system/src/errors.ts",
          "releaseTag": "Public",
          "name": "FileSystemErrorCode",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@storm-stack/file-system!FileSystemErrorCode:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "FileSystemErrorCode: "
            },
            {
              "kind": "Content",
              "text": "{\n    invalid_file_path: "
            },
            {
              "kind": "Reference",
              "text": "FileSystemErrorCode",
              "canonicalReference": "@storm-stack/file-system!FileSystemErrorCode:type"
            },
            {
              "kind": "Content",
              "text": ";\n    invalid_file_content: "
            },
            {
              "kind": "Reference",
              "text": "FileSystemErrorCode",
              "canonicalReference": "@storm-stack/file-system!FileSystemErrorCode:type"
            },
            {
              "kind": "Content",
              "text": ";\n    file_does_not_exist: "
            },
            {
              "kind": "Reference",
              "text": "FileSystemErrorCode",
              "canonicalReference": "@storm-stack/file-system!FileSystemErrorCode:type"
            },
            {
              "kind": "Content",
              "text": ";\n    file_write_failure: "
            },
            {
              "kind": "Reference",
              "text": "FileSystemErrorCode",
              "canonicalReference": "@storm-stack/file-system!FileSystemErrorCode:type"
            },
            {
              "kind": "Content",
              "text": ";\n    file_read_failure: "
            },
            {
              "kind": "Reference",
              "text": "FileSystemErrorCode",
              "canonicalReference": "@storm-stack/file-system!FileSystemErrorCode:type"
            },
            {
              "kind": "Content",
              "text": ";\n    success: "
            },
            {
              "kind": "Reference",
              "text": "ErrorCode",
              "canonicalReference": "@storm-stack/file-system!~ErrorCode:type"
            },
            {
              "kind": "Content",
              "text": ";\n    missing_issue_code: "
            },
            {
              "kind": "Reference",
              "text": "ErrorCode",
              "canonicalReference": "@storm-stack/file-system!~ErrorCode:type"
            },
            {
              "kind": "Content",
              "text": ";\n    invalid_config: "
            },
            {
              "kind": "Reference",
              "text": "ErrorCode",
              "canonicalReference": "@storm-stack/file-system!~ErrorCode:type"
            },
            {
              "kind": "Content",
              "text": ";\n    failed_to_load_file: "
            },
            {
              "kind": "Reference",
              "text": "ErrorCode",
              "canonicalReference": "@storm-stack/file-system!~ErrorCode:type"
            },
            {
              "kind": "Content",
              "text": ";\n    missing_context: "
            },
            {
              "kind": "Reference",
              "text": "ErrorCode",
              "canonicalReference": "@storm-stack/file-system!~ErrorCode:type"
            },
            {
              "kind": "Content",
              "text": ";\n    record_not_found: "
            },
            {
              "kind": "Reference",
              "text": "ErrorCode",
              "canonicalReference": "@storm-stack/file-system!~ErrorCode:type"
            },
            {
              "kind": "Content",
              "text": ";\n    required_field_missing: "
            },
            {
              "kind": "Reference",
              "text": "ErrorCode",
              "canonicalReference": "@storm-stack/file-system!~ErrorCode:type"
            },
            {
              "kind": "Content",
              "text": ";\n    database_query_error: "
            },
            {
              "kind": "Reference",
              "text": "ErrorCode",
              "canonicalReference": "@storm-stack/file-system!~ErrorCode:type"
            },
            {
              "kind": "Content",
              "text": ";\n    model_validation_error: "
            },
            {
              "kind": "Reference",
              "text": "ErrorCode",
              "canonicalReference": "@storm-stack/file-system!~ErrorCode:type"
            },
            {
              "kind": "Content",
              "text": ";\n    field_validation_error: "
            },
            {
              "kind": "Reference",
              "text": "ErrorCode",
              "canonicalReference": "@storm-stack/file-system!~ErrorCode:type"
            },
            {
              "kind": "Content",
              "text": ";\n    invalid_parameter: "
            },
            {
              "kind": "Reference",
              "text": "ErrorCode",
              "canonicalReference": "@storm-stack/file-system!~ErrorCode:type"
            },
            {
              "kind": "Content",
              "text": ";\n    invalid_request: "
            },
            {
              "kind": "Reference",
              "text": "ErrorCode",
              "canonicalReference": "@storm-stack/file-system!~ErrorCode:type"
            },
            {
              "kind": "Content",
              "text": ";\n    type_error: "
            },
            {
              "kind": "Reference",
              "text": "ErrorCode",
              "canonicalReference": "@storm-stack/file-system!~ErrorCode:type"
            },
            {
              "kind": "Content",
              "text": ";\n    processing_error: "
            },
            {
              "kind": "Reference",
              "text": "ErrorCode",
              "canonicalReference": "@storm-stack/file-system!~ErrorCode:type"
            },
            {
              "kind": "Content",
              "text": ";\n    internal_server_error: "
            },
            {
              "kind": "Reference",
              "text": "ErrorCode",
              "canonicalReference": "@storm-stack/file-system!~ErrorCode:type"
            },
            {
              "kind": "Content",
              "text": ";\n    user_not_logged_in: "
            },
            {
              "kind": "Reference",
              "text": "ErrorCode",
              "canonicalReference": "@storm-stack/file-system!~ErrorCode:type"
            },
            {
              "kind": "Content",
              "text": ";\n    unknown_cause: "
            },
            {
              "kind": "Reference",
              "text": "ErrorCode",
              "canonicalReference": "@storm-stack/file-system!~ErrorCode:type"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            }
          ],
          "fileUrlPath": "packages/file-system/src/errors.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "FileSystemErrorCode",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 46
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@storm-stack/file-system!findContainingFolder:function(1)",
          "docComment": "/**\n * Find the folder containing the file.\n *\n * @remarks\n *\n * Example: `C:\\Users\\user\\Documents\\file.txt` would return `Documents`\n *\n * @param filePath - The file path to process\n *\n * @returns The file path\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function findContainingFolder(filePath: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/file-system/src/files/file-path-fns.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "filePath",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "findContainingFolder"
        },
        {
          "kind": "Function",
          "canonicalReference": "@storm-stack/file-system!findFileExtension:function(1)",
          "docComment": "/**\n * Find the file extension from a file path.\n *\n * @param filePath - The file path to process\n *\n * @returns The file extension\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function findFileExtension(filePath: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/file-system/src/files/file-path-fns.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "filePath",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "findFileExtension"
        },
        {
          "kind": "Function",
          "canonicalReference": "@storm-stack/file-system!findFileName:function(1)",
          "docComment": "/**\n * Find the file name from a file path.\n *\n * @param filePath - The file path to process\n *\n * @returns The file name\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function findFileName(filePath: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/file-system/src/files/file-path-fns.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "filePath",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "findFileName"
        },
        {
          "kind": "Function",
          "canonicalReference": "@storm-stack/file-system!findFilePath:function(1)",
          "docComment": "/**\n * Find the file path from a file path.\n *\n * @param filePath - The file path to process\n *\n * @returns The file path\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function findFilePath(filePath: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/file-system/src/files/file-path-fns.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "filePath",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "findFilePath"
        },
        {
          "kind": "Function",
          "canonicalReference": "@storm-stack/file-system!getWorkspaceRoot:function(1)",
          "docComment": "/**\n * Get the workspace root path\n *\n * @returns The workspace root path\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "getWorkspaceRoot: () => "
            },
            {
              "kind": "Content",
              "text": "any"
            }
          ],
          "fileUrlPath": "packages/file-system/src/files/get-workspace-root.ts",
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "getWorkspaceRoot"
        },
        {
          "kind": "Function",
          "canonicalReference": "@storm-stack/file-system!hasFileName:function(1)",
          "docComment": "/**\n * Check if a file path has a file name.\n *\n * @param filePath - The file path to process\n *\n * @returns An indicator specifying if the file path has a file name\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function hasFileName(filePath: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/file-system/src/files/file-path-fns.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "filePath",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "hasFileName"
        },
        {
          "kind": "Function",
          "canonicalReference": "@storm-stack/file-system!hasFilePath:function(1)",
          "docComment": "/**\n * Check if a file path has a file path.\n *\n * @param filePath - The file path to process\n *\n * @returns An indicator specifying if the file path has a file path\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function hasFilePath(filePath: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/file-system/src/files/file-path-fns.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "filePath",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "hasFilePath"
        },
        {
          "kind": "Function",
          "canonicalReference": "@storm-stack/file-system!installPackage:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function installPackage(pkg: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", dev: "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ", pkgManager?: "
            },
            {
              "kind": "Reference",
              "text": "PackageManagers",
              "canonicalReference": "@storm-stack/file-system!PackageManagers:type"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": ", tag?: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", projectPath?: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", exactVersion?: "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/file-system/src/package-management/package-fns.ts",
          "returnTypeTokenRange": {
            "startIndex": 14,
            "endIndex": 15
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "pkg",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "dev",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "pkgManager",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "isOptional": true
            },
            {
              "parameterName": "tag",
              "parameterTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 9
              },
              "isOptional": true
            },
            {
              "parameterName": "projectPath",
              "parameterTypeTokenRange": {
                "startIndex": 10,
                "endIndex": 11
              },
              "isOptional": true
            },
            {
              "parameterName": "exactVersion",
              "parameterTypeTokenRange": {
                "startIndex": 12,
                "endIndex": 13
              },
              "isOptional": true
            }
          ],
          "name": "installPackage"
        },
        {
          "kind": "Function",
          "canonicalReference": "@storm-stack/file-system!isDirectory:function(1)",
          "docComment": "/**\n * Check if the given path is a directory\n *\n * @param path - The location to check\n *\n * @param additionalPath - An optional additional path to add to the start of the path\n *\n * @returns An indicator specifying if the file is a directory\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "isDirectory: (path: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", additionalPath?: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Content",
              "text": "boolean"
            }
          ],
          "fileUrlPath": "packages/file-system/src/files/is-file.ts",
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "path",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "additionalPath",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": true
            }
          ],
          "name": "isDirectory"
        },
        {
          "kind": "Function",
          "canonicalReference": "@storm-stack/file-system!isFile:function(1)",
          "docComment": "/**\n * Check if the given path is a file\n *\n * @param path - The location to check\n *\n * @param additionalPath - An optional additional path to add to the start of the path\n *\n * @returns An indicator specifying if the file is a file\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "isFile: (path: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", additionalPath?: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Content",
              "text": "boolean"
            }
          ],
          "fileUrlPath": "packages/file-system/src/files/is-file.ts",
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "path",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "additionalPath",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": true
            }
          ],
          "name": "isFile"
        },
        {
          "kind": "Function",
          "canonicalReference": "@storm-stack/file-system!isRelativeVersionKeyword:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "isRelativeVersionKeyword: (val: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "val",
              "canonicalReference": "@storm-stack/file-system!~val"
            },
            {
              "kind": "Content",
              "text": " is "
            },
            {
              "kind": "Reference",
              "text": "ReleaseType",
              "canonicalReference": "!unknown"
            }
          ],
          "fileUrlPath": "packages/file-system/src/package-management/semver-fns.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "val",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isRelativeVersionKeyword"
        },
        {
          "kind": "Function",
          "canonicalReference": "@storm-stack/file-system!joinPaths:function(1)",
          "docComment": "/**\n * Join the given paths\n *\n * @param paths - The paths to join\n *\n * @returns The joined paths\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "joinPaths: (...paths: "
            },
            {
              "kind": "Content",
              "text": "string[]"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Content",
              "text": "string"
            }
          ],
          "fileUrlPath": "packages/file-system/src/files/join-paths.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "paths",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "joinPaths"
        },
        {
          "kind": "Function",
          "canonicalReference": "@storm-stack/file-system!loadTsConfig:function(1)",
          "docComment": "/**\n * Loads a tsconfig.json file and returns the parsed JSON object.\n *\n * @param dir - The directory to start searching for the tsconfig.json file.\n *\n * @param name - The name of the tsconfig.json file.\n *\n * @returns The parsed JSON object.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "loadTsConfig: (dir: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", name?: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Content",
              "text": "{\n    path: string;\n    data: any;\n    files: any[];\n} | null"
            }
          ],
          "fileUrlPath": "packages/file-system/src/package-management/get-tsconfig.ts",
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "dir",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "name",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": true
            }
          ],
          "name": "loadTsConfig"
        },
        {
          "kind": "Function",
          "canonicalReference": "@storm-stack/file-system!loadTsConfigFile:function(1)",
          "docComment": "/**\n * Loads a tsconfig.json file and returns the parsed JSON object.\n *\n * @param name - The name/path of the tsconfig.json file.\n *\n * @returns The parsed JSON object.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "loadTsConfigFile: (file: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Content",
              "text": "{\n    path: string;\n    data: any;\n    files: any[];\n} | null"
            }
          ],
          "fileUrlPath": "packages/file-system/src/package-management/get-tsconfig.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "file",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "loadTsConfigFile"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/file-system!PackageManagers:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type PackageManagers = "
            },
            {
              "kind": "Content",
              "text": "\"npm\" | \"yarn\" | \"pnpm\" | \"bun\""
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/file-system/src/package-management/package-fns.ts",
          "releaseTag": "Public",
          "name": "PackageManagers",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@storm-stack/file-system!PackageManagers:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "PackageManagers: "
            },
            {
              "kind": "Content",
              "text": "{\n    NPM: "
            },
            {
              "kind": "Reference",
              "text": "PackageManagers",
              "canonicalReference": "@storm-stack/file-system!PackageManagers:type"
            },
            {
              "kind": "Content",
              "text": ";\n    YARN: "
            },
            {
              "kind": "Reference",
              "text": "PackageManagers",
              "canonicalReference": "@storm-stack/file-system!PackageManagers:type"
            },
            {
              "kind": "Content",
              "text": ";\n    PNPM: "
            },
            {
              "kind": "Reference",
              "text": "PackageManagers",
              "canonicalReference": "@storm-stack/file-system!PackageManagers:type"
            },
            {
              "kind": "Content",
              "text": ";\n    BUN: "
            },
            {
              "kind": "Reference",
              "text": "PackageManagers",
              "canonicalReference": "@storm-stack/file-system!PackageManagers:type"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            }
          ],
          "fileUrlPath": "packages/file-system/src/package-management/package-fns.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "PackageManagers",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 10
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@storm-stack/file-system!parseVersion:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "parseVersion: (semver: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Content",
              "text": "import(\"semver\").SemVer | null"
            }
          ],
          "fileUrlPath": "packages/file-system/src/package-management/semver-fns.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "semver",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "parseVersion"
        },
        {
          "kind": "Function",
          "canonicalReference": "@storm-stack/file-system!readFile:function(1)",
          "docComment": "/**\n * Read the given content to the given file path\n *\n * @param filePath - The file path to write to\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "readFile: (filePath: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Content",
              "text": "string"
            }
          ],
          "fileUrlPath": "packages/file-system/src/files/read-file.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "filePath",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "readFile"
        },
        {
          "kind": "Function",
          "canonicalReference": "@storm-stack/file-system!readFileAsync:function(1)",
          "docComment": "/**\n * Read the given content to the given file path\n *\n * @param filePath - The file path to read to\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "readFileAsync: (filePath: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<string>"
            }
          ],
          "fileUrlPath": "packages/file-system/src/files/read-file.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "filePath",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "readFileAsync"
        },
        {
          "kind": "Function",
          "canonicalReference": "@storm-stack/file-system!relativeToWorkspaceRoot:function(1)",
          "docComment": "/**\n * Find the file path relative to the workspace root path.\n *\n * @param filePath - The file path to process\n *\n * @param basePath - The base path to use when resolving the file path\n *\n * @returns The resolved file path\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function relativeToWorkspaceRoot(filePath: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/file-system/src/files/file-path-fns.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "filePath",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "relativeToWorkspaceRoot"
        },
        {
          "kind": "Function",
          "canonicalReference": "@storm-stack/file-system!renameFile:function(1)",
          "docComment": "/**\n * Rename the file name with a new name.\n *\n * @param filePath - The current file path being processed\n *\n * @param newFileName - The updated file name being processed\n *\n * @returns The modified or unmodified file path.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function renameFile(filePath: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", newFileName: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/file-system/src/files/file-path-fns.ts",
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "filePath",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "newFileName",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "renameFile"
        },
        {
          "kind": "Function",
          "canonicalReference": "@storm-stack/file-system!resolvePath:function(1)",
          "docComment": "/**\n * Resolve the file path to an absolute path.\n *\n * @param filePath - The file path to process\n *\n * @param basePath - The base path to use when resolving the file path\n *\n * @returns The resolved file path\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function resolvePath(filePath: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", basePath?: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/file-system/src/files/file-path-fns.ts",
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "filePath",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "basePath",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": true
            }
          ],
          "name": "resolvePath"
        },
        {
          "kind": "Function",
          "canonicalReference": "@storm-stack/file-system!writeFile:function(1)",
          "docComment": "/**\n * Write the given content to the given file path\n *\n * @param filePath - The file path to write to\n *\n * @param content - The content to write to the file\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "writeFile: (filePath: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", content: "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Content",
              "text": "void"
            }
          ],
          "fileUrlPath": "packages/file-system/src/files/write-file.ts",
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "filePath",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "content",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "writeFile"
        },
        {
          "kind": "Function",
          "canonicalReference": "@storm-stack/file-system!writeFileAsync:function(1)",
          "docComment": "/**\n * Read the given content to the given file path\n *\n * @param filePath - The file path to read to\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "writeFileAsync: (filePath: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", content: "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<void>"
            }
          ],
          "fileUrlPath": "packages/file-system/src/files/write-file.ts",
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "filePath",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "content",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "writeFileAsync"
        }
      ]
    }
  ]
}
