{
  "metadata": {
    "toolPackage": "@microsoft/api-extractor",
    "toolVersion": "7.38.5",
    "schemaVersion": 1011,
    "oldestForwardsCompatibleVersion": 1001,
    "tsdocConfig": {
      "$schema": "https://developer.microsoft.com/json-schemas/tsdoc/v0/tsdoc.schema.json",
      "noStandardTags": true,
      "tagDefinitions": [
        {
          "tagName": "@alpha",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@beta",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@defaultValue",
          "syntaxKind": "block"
        },
        {
          "tagName": "@decorator",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@deprecated",
          "syntaxKind": "block"
        },
        {
          "tagName": "@eventProperty",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@example",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@experimental",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@inheritDoc",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@internal",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@label",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@link",
          "syntaxKind": "inline",
          "allowMultiple": true
        },
        {
          "tagName": "@override",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@packageDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@param",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@privateRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@public",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@readonly",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@remarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@returns",
          "syntaxKind": "block"
        },
        {
          "tagName": "@sealed",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@see",
          "syntaxKind": "block"
        },
        {
          "tagName": "@throws",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@typeParam",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@virtual",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@betaDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@internalRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@preapproved",
          "syntaxKind": "modifier"
        }
      ],
      "supportForTags": {
        "@alpha": true,
        "@beta": true,
        "@defaultValue": true,
        "@decorator": true,
        "@deprecated": true,
        "@eventProperty": true,
        "@example": true,
        "@experimental": true,
        "@inheritDoc": true,
        "@internal": true,
        "@label": true,
        "@link": true,
        "@override": true,
        "@packageDocumentation": true,
        "@param": true,
        "@privateRemarks": true,
        "@public": true,
        "@readonly": true,
        "@remarks": true,
        "@returns": true,
        "@sealed": true,
        "@see": true,
        "@throws": true,
        "@typeParam": true,
        "@virtual": true,
        "@betaDocumentation": true,
        "@internalRemarks": true,
        "@preapproved": true
      },
      "reportUnsupportedHtmlElements": false
    }
  },
  "kind": "Package",
  "canonicalReference": "@storm-stack/jotai!",
  "docComment": "",
  "name": "@storm-stack/jotai",
  "preserveMemberOrder": false,
  "members": [
    {
      "kind": "EntryPoint",
      "canonicalReference": "@storm-stack/jotai!",
      "name": "",
      "preserveMemberOrder": false,
      "members": [
        {
          "kind": "Function",
          "canonicalReference": "@storm-stack/jotai!atomEffect:function(1)",
          "docComment": "/**\n * Creates an atom that runs an effect function when mounted and unmounts.\n *\n * @param effectFn - The effect function to run\n *\n * @returns An atom that runs an effect function when mounted and unmounts.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function atomEffect(effectFn: "
            },
            {
              "kind": "Content",
              "text": "(get: "
            },
            {
              "kind": "Reference",
              "text": "Getter",
              "canonicalReference": "!unknown"
            },
            {
              "kind": "Content",
              "text": ", set: "
            },
            {
              "kind": "Reference",
              "text": "Setter",
              "canonicalReference": "!unknown"
            },
            {
              "kind": "Content",
              "text": ") => void | "
            },
            {
              "kind": "Reference",
              "text": "CleanupFn",
              "canonicalReference": "@storm-stack/jotai!~CleanupFn:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "import(\"jotai/vanilla\").Atom<void>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/jotai/src/atoms/atom-with-effect.ts",
          "returnTypeTokenRange": {
            "startIndex": 8,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "effectFn",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              },
              "isOptional": false
            }
          ],
          "name": "atomEffect"
        },
        {
          "kind": "Function",
          "canonicalReference": "@storm-stack/jotai!atomWithBroadcast:function(1)",
          "docComment": "/**\n * Creates an atom that broadcasts its value to other tabs/windows using the BroadcastChannel API.\n *\n * @param key - The key to use for the BroadcastChannel\n *\n * @param initialValue - The initial value of the atom\n *\n * @returns An atom that broadcasts its value to other tabs/windows using the BroadcastChannel API.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function atomWithBroadcast<TValue>(key: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", initialValue: "
            },
            {
              "kind": "Content",
              "text": "TValue"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "import(\"jotai/vanilla\").WritableAtom<TValue, [TValue], void>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/jotai/src/atoms/atom-with-broadcast.ts",
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "key",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "initialValue",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "TValue",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "atomWithBroadcast"
        },
        {
          "kind": "Variable",
          "canonicalReference": "@storm-stack/jotai!atomWithPending:var",
          "docComment": "/**\n * Creates an atom that always returns a pending promise.\n *\n * @returns An atom that always returns a pending promise.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "atomWithPending: "
            },
            {
              "kind": "Content",
              "text": "<Value>() => import(\"jotai/vanilla\").PrimitiveAtom<Value> & {\n    init: Value;\n}"
            }
          ],
          "fileUrlPath": "packages/jotai/src/atoms/atom-with-pending.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "atomWithPending",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@storm-stack/jotai!atomWithWebStorage:function(1)",
          "docComment": "/**\n * Creates an atom that persists its state in external storage and sends a broadcast message to other tabs/windows when the state changes.\n *\n * @param key - The key to use for the storage\n *\n * @param initialValue - The initial value of the atom\n *\n * @param webStorage - The storage to use\n *\n * @returns An atom that persists its state in external storage and sends a broadcast message to other tabs/windows when the state changes.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function atomWithWebStorage<TValue = "
            },
            {
              "kind": "Content",
              "text": "unknown"
            },
            {
              "kind": "Content",
              "text": ">(key: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", initialValue: "
            },
            {
              "kind": "Content",
              "text": "TValue"
            },
            {
              "kind": "Content",
              "text": ", webStorage?: "
            },
            {
              "kind": "Reference",
              "text": "SyncStorage",
              "canonicalReference": "!unknown"
            },
            {
              "kind": "Content",
              "text": "<TValue> | "
            },
            {
              "kind": "Reference",
              "text": "AsyncStorage",
              "canonicalReference": "!unknown"
            },
            {
              "kind": "Content",
              "text": "<TValue>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "WritableAtom",
              "canonicalReference": "!unknown"
            },
            {
              "kind": "Content",
              "text": "<TValue, ["
            },
            {
              "kind": "Reference",
              "text": "SetStateAction",
              "canonicalReference": "@types/react!React.SetStateAction:type"
            },
            {
              "kind": "Content",
              "text": "<TValue>], void>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/jotai/src/atoms/atom-with-web-storage.ts",
          "returnTypeTokenRange": {
            "startIndex": 12,
            "endIndex": 16
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "key",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "initialValue",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": false
            },
            {
              "parameterName": "webStorage",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 11
              },
              "isOptional": true
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "TValue",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "atomWithWebStorage"
        },
        {
          "kind": "Function",
          "canonicalReference": "@storm-stack/jotai!createWebStorage:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function createWebStorage<TValue>(getStringStorage: "
            },
            {
              "kind": "Content",
              "text": "() => "
            },
            {
              "kind": "Reference",
              "text": "AsyncStringStorage",
              "canonicalReference": "!unknown"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "SyncStringStorage",
              "canonicalReference": "!unknown"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "AsyncStorage",
              "canonicalReference": "!unknown"
            },
            {
              "kind": "Content",
              "text": "<TValue> | "
            },
            {
              "kind": "Reference",
              "text": "SyncStorage",
              "canonicalReference": "!unknown"
            },
            {
              "kind": "Content",
              "text": "<TValue>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/jotai/src/utilities/create-web-storage.ts",
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 11
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "getStringStorage",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "TValue",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "createWebStorage"
        },
        {
          "kind": "Variable",
          "canonicalReference": "@storm-stack/jotai!setAtomDebugLabel:var",
          "docComment": "/**\n * Add a debug label to the Jotai Atom\n *\n * @param atom - The atom to apply the debug label to\n *\n * @param label - The label to apply to the atom\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "setAtomDebugLabel: "
            },
            {
              "kind": "Content",
              "text": "(atom: "
            },
            {
              "kind": "Reference",
              "text": "Atom",
              "canonicalReference": "!unknown"
            },
            {
              "kind": "Content",
              "text": "<unknown>, label: string) => void"
            }
          ],
          "fileUrlPath": "packages/jotai/src/utilities/set-atom-debug.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "setAtomDebugLabel",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@storm-stack/jotai!setAtomPrivate:var",
          "docComment": "/**\n * Mark the atom as a *private* or internal\n *\n * @param atom - The atom to mark as private\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "setAtomPrivate: "
            },
            {
              "kind": "Content",
              "text": "(atom: "
            },
            {
              "kind": "Reference",
              "text": "Atom",
              "canonicalReference": "!unknown"
            },
            {
              "kind": "Content",
              "text": "<unknown>) => void"
            }
          ],
          "fileUrlPath": "packages/jotai/src/utilities/set-atom-debug.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "setAtomPrivate",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@storm-stack/jotai!usePrepareAtoms:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function usePrepareAtoms(atoms: "
            },
            {
              "kind": "Reference",
              "text": "Atom",
              "canonicalReference": "!unknown"
            },
            {
              "kind": "Content",
              "text": "<unknown>[]"
            },
            {
              "kind": "Content",
              "text": ", options?: "
            },
            {
              "kind": "Reference",
              "text": "Options",
              "canonicalReference": "@storm-stack/jotai!~Options:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/jotai/src/hooks/use-prepare-atoms.ts",
          "returnTypeTokenRange": {
            "startIndex": 6,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "atoms",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isOptional": false
            },
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "isOptional": true
            }
          ],
          "name": "usePrepareAtoms"
        }
      ]
    }
  ]
}
