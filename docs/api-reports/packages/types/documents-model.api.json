{
  "metadata": {
    "toolPackage": "@microsoft/api-extractor",
    "toolVersion": "7.46.2",
    "schemaVersion": 1011,
    "oldestForwardsCompatibleVersion": 1001,
    "tsdocConfig": {
      "$schema": "https://developer.microsoft.com/json-schemas/tsdoc/v0/tsdoc.schema.json",
      "noStandardTags": true,
      "tagDefinitions": [
        {
          "tagName": "@alpha",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@beta",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@defaultValue",
          "syntaxKind": "block"
        },
        {
          "tagName": "@decorator",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@deprecated",
          "syntaxKind": "block"
        },
        {
          "tagName": "@eventProperty",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@example",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@experimental",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@inheritDoc",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@internal",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@label",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@link",
          "syntaxKind": "inline",
          "allowMultiple": true
        },
        {
          "tagName": "@override",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@packageDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@param",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@privateRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@public",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@readonly",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@remarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@returns",
          "syntaxKind": "block"
        },
        {
          "tagName": "@sealed",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@see",
          "syntaxKind": "block"
        },
        {
          "tagName": "@throws",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@typeParam",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@virtual",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@betaDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@internalRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@preapproved",
          "syntaxKind": "modifier"
        }
      ],
      "supportForTags": {
        "@alpha": true,
        "@beta": true,
        "@defaultValue": true,
        "@decorator": true,
        "@deprecated": true,
        "@eventProperty": true,
        "@example": true,
        "@experimental": true,
        "@inheritDoc": true,
        "@internal": true,
        "@label": true,
        "@link": true,
        "@override": true,
        "@packageDocumentation": true,
        "@param": true,
        "@privateRemarks": true,
        "@public": true,
        "@readonly": true,
        "@remarks": true,
        "@returns": true,
        "@sealed": true,
        "@see": true,
        "@throws": true,
        "@typeParam": true,
        "@virtual": true,
        "@betaDocumentation": true,
        "@internalRemarks": true,
        "@preapproved": true
      },
      "reportUnsupportedHtmlElements": false
    }
  },
  "kind": "Package",
  "canonicalReference": "@storm-stack/types!",
  "docComment": "",
  "name": "@storm-stack/types",
  "preserveMemberOrder": false,
  "members": [
    {
      "kind": "EntryPoint",
      "canonicalReference": "@storm-stack/types!",
      "name": "",
      "preserveMemberOrder": false,
      "members": [
        {
          "kind": "Variable",
          "canonicalReference": "@storm-stack/types!$NestedValue:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "$NestedValue: "
            },
            {
              "kind": "Content",
              "text": "unique symbol"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/base.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "$NestedValue",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@storm-stack/types!Abstract:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface Abstract<T> "
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/base.ts",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "Abstract",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!Abstract#prototype:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "prototype: "
                },
                {
                  "kind": "Content",
                  "text": "T"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "prototype",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@storm-stack/types!AbstractClass:interface",
          "docComment": "/**\n * Matches an [`abstract class`](https://www.typescriptlang.org/docs/handbook/classes.html#abstract-classes).\n *\n * @category Class\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface AbstractClass<T, Arguments extends "
            },
            {
              "kind": "Content",
              "text": "unknown[]"
            },
            {
              "kind": "Content",
              "text": " = "
            },
            {
              "kind": "Content",
              "text": "any[]"
            },
            {
              "kind": "Content",
              "text": "> extends "
            },
            {
              "kind": "Reference",
              "text": "AbstractConstructor",
              "canonicalReference": "@storm-stack/types!AbstractConstructor:type"
            },
            {
              "kind": "Content",
              "text": "<T, Arguments>"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/base.ts",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "Arguments",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "name": "AbstractClass",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!AbstractClass#prototype:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "prototype: "
                },
                {
                  "kind": "Reference",
                  "text": "Pick",
                  "canonicalReference": "!Pick:type"
                },
                {
                  "kind": "Content",
                  "text": "<T, keyof T>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "prototype",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 5,
              "endIndex": 7
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!AbstractConstructor:type",
          "docComment": "/**\n * Matches an [`abstract class`](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-4-2.html#abstract-construct-signatures) constructor.\n *\n * @category Class\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type AbstractConstructor<T, Arguments extends "
            },
            {
              "kind": "Content",
              "text": "unknown[]"
            },
            {
              "kind": "Content",
              "text": " = "
            },
            {
              "kind": "Content",
              "text": "any[]"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Content",
              "text": "abstract new (...arguments_: Arguments) => T"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/base.ts",
          "releaseTag": "Public",
          "name": "AbstractConstructor",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "Arguments",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!And:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type And<A extends "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ", B extends "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Content",
              "text": "[\n    A,\n    B\n][number] extends true ? true : true extends ["
            },
            {
              "kind": "Reference",
              "text": "IsEqual",
              "canonicalReference": "@storm-stack/types!IsEqual:type"
            },
            {
              "kind": "Content",
              "text": "<A, false>, "
            },
            {
              "kind": "Reference",
              "text": "IsEqual",
              "canonicalReference": "@storm-stack/types!IsEqual:type"
            },
            {
              "kind": "Content",
              "text": "<B, false>][number] ? false : never"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/logic.ts",
          "releaseTag": "Public",
          "name": "And",
          "typeParameters": [
            {
              "typeParameterName": "A",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "B",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 5,
            "endIndex": 10
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!Any:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type Any = "
            },
            {
              "kind": "Content",
              "text": "boolean | number | bigint | string | null | undefined | void | symbol | object | "
            },
            {
              "kind": "Reference",
              "text": "PlainObject",
              "canonicalReference": "@storm-stack/types!PlainObject:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "AnyArray",
              "canonicalReference": "@storm-stack/types!AnyArray:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "AnyMap",
              "canonicalReference": "@storm-stack/types!AnyMap:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "AnyWeakMap",
              "canonicalReference": "@storm-stack/types!AnyWeakMap:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/base.ts",
          "releaseTag": "Public",
          "name": "Any",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 9
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!AnyArray:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type AnyArray = "
            },
            {
              "kind": "Content",
              "text": "any[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/base.ts",
          "releaseTag": "Public",
          "name": "AnyArray",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!AnyBoolean:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type AnyBoolean = "
            },
            {
              "kind": "Content",
              "text": "boolean | boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/base.ts",
          "releaseTag": "Public",
          "name": "AnyBoolean",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!AnyCase:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type AnyCase<T extends "
            },
            {
              "kind": "Reference",
              "text": "IndexType",
              "canonicalReference": "@storm-stack/types!IndexType:type"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Content",
              "text": "string extends T ? string : T extends `${infer F1}${infer F2}${infer R}` ? `${"
            },
            {
              "kind": "Reference",
              "text": "Uppercase",
              "canonicalReference": "!Uppercase:type"
            },
            {
              "kind": "Content",
              "text": "<F1> | "
            },
            {
              "kind": "Reference",
              "text": "Lowercase",
              "canonicalReference": "!Lowercase:type"
            },
            {
              "kind": "Content",
              "text": "<F1>}${"
            },
            {
              "kind": "Reference",
              "text": "Uppercase",
              "canonicalReference": "!Uppercase:type"
            },
            {
              "kind": "Content",
              "text": "<F2> | "
            },
            {
              "kind": "Reference",
              "text": "Lowercase",
              "canonicalReference": "!Lowercase:type"
            },
            {
              "kind": "Content",
              "text": "<F2>}${"
            },
            {
              "kind": "Reference",
              "text": "AnyCase",
              "canonicalReference": "@storm-stack/types!AnyCase:type"
            },
            {
              "kind": "Content",
              "text": "<R>}` : T extends `${infer F}${infer R}` ? `${"
            },
            {
              "kind": "Reference",
              "text": "Uppercase",
              "canonicalReference": "!Uppercase:type"
            },
            {
              "kind": "Content",
              "text": "<F> | "
            },
            {
              "kind": "Reference",
              "text": "Lowercase",
              "canonicalReference": "!Lowercase:type"
            },
            {
              "kind": "Content",
              "text": "<F>}${"
            },
            {
              "kind": "Reference",
              "text": "AnyCase",
              "canonicalReference": "@storm-stack/types!AnyCase:type"
            },
            {
              "kind": "Content",
              "text": "<R>}` : typeof "
            },
            {
              "kind": "Reference",
              "text": "EMPTY_STRING",
              "canonicalReference": "@storm-stack/types!EMPTY_STRING:var"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/base.ts",
          "releaseTag": "Public",
          "name": "AnyCase",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 3,
            "endIndex": 21
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!AnyFunction:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type AnyFunction = "
            },
            {
              "kind": "Reference",
              "text": "Function",
              "canonicalReference": "!Function:interface"
            },
            {
              "kind": "Content",
              "text": " | ((...args: any) => any)"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/base.ts",
          "releaseTag": "Public",
          "name": "AnyFunction",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!AnyMap:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type AnyMap = "
            },
            {
              "kind": "Reference",
              "text": "Map",
              "canonicalReference": "!Map:interface"
            },
            {
              "kind": "Content",
              "text": "<any, any>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/base.ts",
          "releaseTag": "Public",
          "name": "AnyMap",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!AnyNumber:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type AnyNumber = "
            },
            {
              "kind": "Content",
              "text": "number | number"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/base.ts",
          "releaseTag": "Public",
          "name": "AnyNumber",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!AnyString:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type AnyString = "
            },
            {
              "kind": "Content",
              "text": "string | string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/base.ts",
          "releaseTag": "Public",
          "name": "AnyString",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!AnyWeakMap:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type AnyWeakMap = "
            },
            {
              "kind": "Reference",
              "text": "WeakMap",
              "canonicalReference": "!WeakMap:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "WeakKey",
              "canonicalReference": "!WeakKey:type"
            },
            {
              "kind": "Content",
              "text": ", any>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/base.ts",
          "releaseTag": "Public",
          "name": "AnyWeakMap",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!ArrayElement:type",
          "docComment": "/**\n * Extract the element of an array that also works for array union.\n *\n * Returns `never` if T is not an array.\n *\n * It creates a type-safe way to access the element type of `unknown` type.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type ArrayElement<T> = "
            },
            {
              "kind": "Content",
              "text": "T extends readonly unknown[] ? T[0] : never"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/array.ts",
          "releaseTag": "Public",
          "name": "ArrayElement",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!ArrayIndices:type",
          "docComment": "/**\n * Provides valid indices for a constant array or tuple.\n *\n * Use-case: This type is useful when working with constant arrays or tuples and you want to enforce type-safety for accessing elements by their indices.\n *\n * @example\n * ```\n * import type {ArrayIndices, ArrayValues} from 'type-fest';\n *\n * const weekdays = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'] as const;\n *\n * type Weekday = ArrayIndices<typeof weekdays>;\n * type WeekdayName = ArrayValues<typeof weekdays>;\n *\n * const getWeekdayName = (day: Weekday): WeekdayName => weekdays[day];\n * ```\n *\n * @see\n *\n * {@link ArrayValues}\n *\n * @category Array\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type ArrayIndices<Element extends "
            },
            {
              "kind": "Content",
              "text": "readonly unknown[]"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Reference",
              "text": "Exclude",
              "canonicalReference": "!Exclude:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Partial",
              "canonicalReference": "!Partial:type"
            },
            {
              "kind": "Content",
              "text": "<Element>[\"length\"], Element[\"length\"]>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/array.ts",
          "releaseTag": "Public",
          "name": "ArrayIndices",
          "typeParameters": [
            {
              "typeParameterName": "Element",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 3,
            "endIndex": 7
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!ArrayLength:type",
          "docComment": "/**\n * Infer the length of the given array `<T>`.\n *\n * Check out {@link https://itnext.io/implementing-arithmetic-within-typescripts-type-system-a1ef140a6f6f this article} for more information.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type ArrayLength<T extends "
            },
            {
              "kind": "Content",
              "text": "readonly unknown[]"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Content",
              "text": "T extends {\n    readonly length: infer L;\n} ? L : never"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/array.ts",
          "releaseTag": "Public",
          "name": "ArrayLength",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!ArrayMax:type",
          "docComment": "/**\n * Returns the maximum value from a tuple of integers.\n *\n * Note: - Float numbers are not supported.\n *\n * @example\n * ```\n * ArrayMax<[1, 2, 5, 3]>;\n * //=> 5\n *\n * ArrayMax<[1, 2, 5, 3, 99, -1]>;\n * //=> 99\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type ArrayMax<A extends "
            },
            {
              "kind": "Content",
              "text": "number[]"
            },
            {
              "kind": "Content",
              "text": ", Result extends "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": " = "
            },
            {
              "kind": "Reference",
              "text": "NegativeInfinity",
              "canonicalReference": "@storm-stack/types!NegativeInfinity:type"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Content",
              "text": "number extends A[number] ? never : A extends [infer F extends number, ...infer R extends number[]] ? "
            },
            {
              "kind": "Reference",
              "text": "GreaterThan",
              "canonicalReference": "@storm-stack/types!GreaterThan:type"
            },
            {
              "kind": "Content",
              "text": "<F, Result> extends true ? "
            },
            {
              "kind": "Reference",
              "text": "ArrayMax",
              "canonicalReference": "@storm-stack/types!ArrayMax:type"
            },
            {
              "kind": "Content",
              "text": "<R, F> : "
            },
            {
              "kind": "Reference",
              "text": "ArrayMax",
              "canonicalReference": "@storm-stack/types!ArrayMax:type"
            },
            {
              "kind": "Content",
              "text": "<R, Result> : Result"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/logic.ts",
          "releaseTag": "Public",
          "name": "ArrayMax",
          "typeParameters": [
            {
              "typeParameterName": "A",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "Result",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 7,
            "endIndex": 14
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!ArrayMin:type",
          "docComment": "/**\n * Returns the minimum value from a tuple of integers.\n *\n * Note: - Float numbers are not supported.\n *\n * @example\n * ```\n * ArrayMin<[1, 2, 5, 3]>;\n * //=> 1\n *\n * ArrayMin<[1, 2, 5, 3, -5]>;\n * //=> -5\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type ArrayMin<A extends "
            },
            {
              "kind": "Content",
              "text": "number[]"
            },
            {
              "kind": "Content",
              "text": ", Result extends "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": " = "
            },
            {
              "kind": "Reference",
              "text": "PositiveInfinity",
              "canonicalReference": "@storm-stack/types!PositiveInfinity:type"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Content",
              "text": "number extends A[number] ? never : A extends [infer F extends number, ...infer R extends number[]] ? "
            },
            {
              "kind": "Reference",
              "text": "LessThan",
              "canonicalReference": "@storm-stack/types!LessThan:type"
            },
            {
              "kind": "Content",
              "text": "<F, Result> extends true ? "
            },
            {
              "kind": "Reference",
              "text": "ArrayMin",
              "canonicalReference": "@storm-stack/types!ArrayMin:type"
            },
            {
              "kind": "Content",
              "text": "<R, F> : "
            },
            {
              "kind": "Reference",
              "text": "ArrayMin",
              "canonicalReference": "@storm-stack/types!ArrayMin:type"
            },
            {
              "kind": "Content",
              "text": "<R, Result> : Result"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/logic.ts",
          "releaseTag": "Public",
          "name": "ArrayMin",
          "typeParameters": [
            {
              "typeParameterName": "A",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "Result",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 7,
            "endIndex": 14
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!ArrayValues:type",
          "docComment": "/**\n * Provides all values for a constant array or tuple.\n *\n * Use-case: This type is useful when working with constant arrays or tuples and you want to enforce type-safety with their values.\n *\n * @example\n * ```\n * import type {ArrayValues, ArrayIndices} from 'type-fest';\n *\n * const weekdays = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'] as const;\n *\n * type WeekdayName = ArrayValues<typeof weekdays>;\n * type Weekday = ArrayIndices<typeof weekdays>;\n *\n * const getWeekdayName = (day: Weekday): WeekdayName => weekdays[day];\n * ```\n *\n * @see\n *\n * {@link ArrayIndices}\n *\n * @category Array\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type ArrayValues<T extends "
            },
            {
              "kind": "Content",
              "text": "readonly unknown[]"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Content",
              "text": "T[number]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/array.ts",
          "releaseTag": "Public",
          "name": "ArrayValues",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!AsyncFunction:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type AsyncFunction = "
            },
            {
              "kind": "Content",
              "text": "(...arguments_: any[]) => "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<unknown>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/async.ts",
          "releaseTag": "Public",
          "name": "AsyncFunction",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!Asyncify:type",
          "docComment": "/**\n * Create an async version of the given function type, by boxing the return type in `Promise` while keeping the same parameter types.\n *\n * Use-case: You have two functions, one synchronous and one asynchronous that do the same thing. Instead of having to duplicate the type definition, you can use `Asyncify` to reuse the synchronous type.\n *\n * @example\n * ```\n * import type {Asyncify} from 'type-fest';\n *\n * // Synchronous function.\n * function getFooSync(someArg: SomeType): Foo {\n * \t// …\n * }\n *\n * type AsyncifiedFooGetter = Asyncify<typeof getFooSync>;\n * //=> type AsyncifiedFooGetter = (someArg: SomeType) => Promise<Foo>;\n *\n * // Same as `getFooSync` but asynchronous.\n * const getFooAsync: AsyncifiedFooGetter = (someArg) => {\n * \t// TypeScript now knows that `someArg` is `SomeType` automatically.\n * \t// It also knows that this function must return `Promise<Foo>`.\n * \t// If you have `@typescript-eslint/promise-function-async` linter rule enabled, it will even report that \"Functions that return promises must be async.\".\n *\n * \t// …\n * }\n * ```\n *\n * @category Async\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type Asyncify<Function_ extends "
            },
            {
              "kind": "Content",
              "text": "(...arguments_: any[]) => any"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Reference",
              "text": "SetReturnType",
              "canonicalReference": "@storm-stack/types!SetReturnType:type"
            },
            {
              "kind": "Content",
              "text": "<Function_, "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Awaited",
              "canonicalReference": "!Awaited:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ReturnType",
              "canonicalReference": "!ReturnType:type"
            },
            {
              "kind": "Content",
              "text": "<Function_>>>>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/async.ts",
          "releaseTag": "Public",
          "name": "Asyncify",
          "typeParameters": [
            {
              "typeParameterName": "Function_",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 3,
            "endIndex": 11
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!AsyncReturnType:type",
          "docComment": "/**\n * Unwrap the return type of a function that returns a `Promise`.\n *\n * There has been [discussion](https://github.com/microsoft/TypeScript/pull/35998) about implementing this type in TypeScript.\n *\n * @example\n * ```ts\n * import type {AsyncReturnType} from 'type-fest';\n * import {asyncFunction} from 'api';\n *\n * // This type resolves to the unwrapped return type of `asyncFunction`.\n * type Value = AsyncReturnType<typeof asyncFunction>;\n *\n * async function doSomething(value: Value) {}\n *\n * asyncFunction().then(value => doSomething(value));\n * ```\n *\n * @category Async\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type AsyncReturnType<Target extends "
            },
            {
              "kind": "Reference",
              "text": "AsyncFunction",
              "canonicalReference": "@storm-stack/types!AsyncFunction:type"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Reference",
              "text": "Awaited",
              "canonicalReference": "!Awaited:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ReturnType",
              "canonicalReference": "!ReturnType:type"
            },
            {
              "kind": "Content",
              "text": "<Target>>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/async.ts",
          "releaseTag": "Public",
          "name": "AsyncReturnType",
          "typeParameters": [
            {
              "typeParameterName": "Target",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 3,
            "endIndex": 7
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!AtomicObject:type",
          "docComment": "/**\n * Matches any non-primitive object\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type AtomicObject = "
            },
            {
              "kind": "Reference",
              "text": "Function",
              "canonicalReference": "!Function:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<any> | "
            },
            {
              "kind": "Reference",
              "text": "Date",
              "canonicalReference": "!Date:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "RegExp",
              "canonicalReference": "!RegExp:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/base.ts",
          "releaseTag": "Public",
          "name": "AtomicObject",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 8
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!BrowserNativeObject:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type BrowserNativeObject = "
            },
            {
              "kind": "Reference",
              "text": "Date",
              "canonicalReference": "!Date:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "File",
              "canonicalReference": "!\"\\\"buffer\\\"\".__global.File:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/base.ts",
          "releaseTag": "Public",
          "name": "BrowserNativeObject",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!BuildObject:type",
          "docComment": "/**\n * Create an object type with the given key `<Key>` and value `<Value>`.\n *\n * It will copy the prefix and optional status of the same key from the given object `CopiedFrom` into the result.\n *\n * @example\n * ```\n * type A = BuildObject<'a', string>;\n * //=> {a: string}\n *\n * // Copy `readonly` and `?` from the key `a` of `{readonly a?: any}`\n * type B = BuildObject<'a', string, {readonly a?: any}>;\n * //=> {readonly a?: string}\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type BuildObject<Key extends "
            },
            {
              "kind": "Reference",
              "text": "PropertyKey",
              "canonicalReference": "!PropertyKey:type"
            },
            {
              "kind": "Content",
              "text": ", Value, CopiedFrom extends "
            },
            {
              "kind": "Content",
              "text": "object"
            },
            {
              "kind": "Content",
              "text": " = "
            },
            {
              "kind": "Content",
              "text": "{}"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Content",
              "text": "Key extends keyof CopiedFrom ? "
            },
            {
              "kind": "Reference",
              "text": "Pick",
              "canonicalReference": "!Pick:type"
            },
            {
              "kind": "Content",
              "text": "<{\n    [_ in keyof CopiedFrom]: Value;\n}, Key> : Key extends `${infer NumberKey extends number}` ? NumberKey extends keyof CopiedFrom ? "
            },
            {
              "kind": "Reference",
              "text": "Pick",
              "canonicalReference": "!Pick:type"
            },
            {
              "kind": "Content",
              "text": "<{\n    [_ in keyof CopiedFrom]: Value;\n}, NumberKey> : {\n    [_ in Key]: Value;\n} : {\n    [_ in Key]: Value;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/object.ts",
          "releaseTag": "Public",
          "name": "BuildObject",
          "typeParameters": [
            {
              "typeParameterName": "Key",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "Value",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "CopiedFrom",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 7,
            "endIndex": 12
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!BuildTuple:type",
          "docComment": "/**\n * Create a tuple type of the given length `<L>` and fill it with the given type `<Fill>`.\n *\n * If `<Fill>` is not provided, it will default to `unknown`.\n *\n * @link https://itnext.io/implementing-arithmetic-within-typescripts-type-system-a1ef140a6f6f\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type BuildTuple<L extends "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ", Fill = "
            },
            {
              "kind": "Content",
              "text": "unknown"
            },
            {
              "kind": "Content",
              "text": ", T extends "
            },
            {
              "kind": "Content",
              "text": "readonly unknown[]"
            },
            {
              "kind": "Content",
              "text": " = "
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Content",
              "text": "T[\"length\"] extends L ? T : "
            },
            {
              "kind": "Reference",
              "text": "BuildTuple",
              "canonicalReference": "@storm-stack/types!BuildTuple:type"
            },
            {
              "kind": "Content",
              "text": "<L, Fill, [...T, Fill]>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/base.ts",
          "releaseTag": "Public",
          "name": "BuildTuple",
          "typeParameters": [
            {
              "typeParameterName": "L",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "Fill",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "defaultTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 9,
            "endIndex": 12
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!BuiltIns:type",
          "docComment": "/**\n * Matches any primitive, `void`, `Date`, or `RegExp` value.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type BuiltIns = "
            },
            {
              "kind": "Reference",
              "text": "Primitive",
              "canonicalReference": "@storm-stack/types!Primitive:type"
            },
            {
              "kind": "Content",
              "text": " | void | "
            },
            {
              "kind": "Reference",
              "text": "Date",
              "canonicalReference": "!Date:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "RegExp",
              "canonicalReference": "!RegExp:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/base.ts",
          "releaseTag": "Public",
          "name": "BuiltIns",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@storm-stack/types!Class:interface",
          "docComment": "/**\n * Matches a [`class`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes).\n *\n * @category Class\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface Class<T, Arguments extends "
            },
            {
              "kind": "Content",
              "text": "unknown[]"
            },
            {
              "kind": "Content",
              "text": " = "
            },
            {
              "kind": "Content",
              "text": "any[]"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/base.ts",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "Arguments",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "name": "Class",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "ConstructSignature",
              "canonicalReference": "@storm-stack/types!Class:new(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "new (...arguments_: "
                },
                {
                  "kind": "Content",
                  "text": "Arguments"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "T"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "arguments_",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ]
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!Class#prototype:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "prototype: "
                },
                {
                  "kind": "Reference",
                  "text": "Pick",
                  "canonicalReference": "!Pick:type"
                },
                {
                  "kind": "Content",
                  "text": "<T, keyof T>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "prototype",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@storm-stack/types!ClassTypeCheckable:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ClassTypeCheckable<T> extends "
            },
            {
              "kind": "Reference",
              "text": "ITyped",
              "canonicalReference": "@storm-stack/types!ITyped:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/base.ts",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "ClassTypeCheckable",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!ClassTypeCheckable#isTypeOf:member",
              "docComment": "/**\n * Run type check on the given value\n *\n * @param value - The value to check\n *\n * @returns True if the value is of the type of the class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isTypeOf: "
                },
                {
                  "kind": "Content",
                  "text": "(value: unknown) => "
                },
                {
                  "kind": "Reference",
                  "text": "value",
                  "canonicalReference": "@storm-stack/types!~value"
                },
                {
                  "kind": "Content",
                  "text": " is T"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "isTypeOf",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@storm-stack/types!Clonable:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface Clonable<T> "
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/base.ts",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "Clonable",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "@storm-stack/types!Clonable#clone:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "clone(): "
                },
                {
                  "kind": "Content",
                  "text": "T"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "clone"
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!Collection:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type Collection = "
            },
            {
              "kind": "Reference",
              "text": "IArguments",
              "canonicalReference": "!IArguments:interface"
            },
            {
              "kind": "Content",
              "text": " | unknown[] | "
            },
            {
              "kind": "Reference",
              "text": "Map",
              "canonicalReference": "!Map:interface"
            },
            {
              "kind": "Content",
              "text": "<unknown, unknown> | "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<string | number | symbol, unknown> | "
            },
            {
              "kind": "Reference",
              "text": "Set",
              "canonicalReference": "!Set:interface"
            },
            {
              "kind": "Content",
              "text": "<unknown>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/base.ts",
          "releaseTag": "Public",
          "name": "Collection",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 9
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@storm-stack/types!CompilerOptions:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface CompilerOptions "
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/tsconfig.ts",
          "releaseTag": "Public",
          "name": "CompilerOptions",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!CompilerOptions#allowArbitraryExtensions:member",
              "docComment": "/**\n * Suppress errors for file formats that TypeScript does not understand.\n *\n * @defaultValue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "allowArbitraryExtensions?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "allowArbitraryExtensions",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!CompilerOptions#allowImportingTsExtensions:member",
              "docComment": "/**\n * Allows TypeScript files to import each other with a TypeScript-specific extension like .ts, .mts, or .tsx.\n *\n * @defaultValue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "allowImportingTsExtensions?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "allowImportingTsExtensions",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!CompilerOptions#allowJs:member",
              "docComment": "/**\n * Allow javascript files to be compiled.\n *\n * @defaultValue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "allowJs?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "allowJs",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!CompilerOptions#allowSyntheticDefaultImports:member",
              "docComment": "/**\n * Allow default imports from modules with no default export. This does not affect code emit, just typechecking.\n *\n * @defaultValue\n *\n * module === 'system' || esModuleInterop\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "allowSyntheticDefaultImports?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "allowSyntheticDefaultImports",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!CompilerOptions#allowUmdGlobalAccess:member",
              "docComment": "/**\n * Allow accessing UMD globals from modules.\n *\n * @defaultValue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "allowUmdGlobalAccess?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "allowUmdGlobalAccess",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!CompilerOptions#allowUnreachableCode:member",
              "docComment": "/**\n * Do not report errors on unreachable code.\n *\n * @defaultValue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "allowUnreachableCode?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "allowUnreachableCode",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!CompilerOptions#allowUnusedLabels:member",
              "docComment": "/**\n * Do not report errors on unused labels.\n *\n * @defaultValue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "allowUnusedLabels?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "allowUnusedLabels",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!CompilerOptions#alwaysStrict:member",
              "docComment": "/**\n * Parse in strict mode and emit `'use strict'` for each source file.\n *\n * @defaultValue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "alwaysStrict?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "alwaysStrict",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!CompilerOptions#assumeChangesOnlyAffectDirectDependencies:member",
              "docComment": "/**\n * Have recompiles in '--incremental' and '--watch' assume that changes within a file will only affect files directly depending on it.\n *\n * @defaultValue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "assumeChangesOnlyAffectDirectDependencies?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "assumeChangesOnlyAffectDirectDependencies",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!CompilerOptions#baseUrl:member",
              "docComment": "/**\n * Base directory to resolve non-relative module names.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "baseUrl?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "baseUrl",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!CompilerOptions#charset:member",
              "docComment": "/**\n * The character set of the input files.\n *\n * @deprecated\n *\n * This option will be removed in TypeScript 5.5.\n *\n * @defaultValue\n *\n * 'utf8'\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "charset?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "charset",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!CompilerOptions#checkJs:member",
              "docComment": "/**\n * Report errors in `.js` files.\n *\n * @defaultValue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "checkJs?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "checkJs",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!CompilerOptions#composite:member",
              "docComment": "/**\n * Enables building for project references.\n *\n * @defaultValue\n *\n * true\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "composite?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "composite",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!CompilerOptions#customConditions:member",
              "docComment": "/**\n * List of additional conditions that should succeed when TypeScript resolves from package.json.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "customConditions?: "
                },
                {
                  "kind": "Content",
                  "text": "string[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "customConditions",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!CompilerOptions#declaration:member",
              "docComment": "/**\n * Generates corresponding d.ts files.\n *\n * @defaultValue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "declaration?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "declaration",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!CompilerOptions#declarationDir:member",
              "docComment": "/**\n * Specify output directory for generated declaration files.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "declarationDir?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "declarationDir",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!CompilerOptions#declarationMap:member",
              "docComment": "/**\n * Generates a sourcemap for each corresponding `.d.ts` file.\n *\n * @defaultValue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "declarationMap?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "declarationMap",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!CompilerOptions#diagnostics:member",
              "docComment": "/**\n * Show diagnostic information.\n *\n * @defaultValue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "diagnostics?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "diagnostics",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!CompilerOptions#disableReferencedProjectLoad:member",
              "docComment": "/**\n * Reduce the number of projects loaded automatically by TypeScript.\n *\n * @defaultValue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "disableReferencedProjectLoad?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "disableReferencedProjectLoad",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!CompilerOptions#disableSizeLimit:member",
              "docComment": "/**\n * Disable size limit for JavaScript project.\n *\n * @defaultValue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "disableSizeLimit?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "disableSizeLimit",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!CompilerOptions#disableSolutionSearching:member",
              "docComment": "/**\n * Opt a project out of multi-project reference checking when editing.\n *\n * @defaultValue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "disableSolutionSearching?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "disableSolutionSearching",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!CompilerOptions#disableSourceOfProjectReferenceRedirect:member",
              "docComment": "/**\n * Disable preferring source files instead of declaration files when referencing composite projects.\n *\n * @defaultValue\n *\n * true if composite, false otherwise\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "disableSourceOfProjectReferenceRedirect?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "disableSourceOfProjectReferenceRedirect",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!CompilerOptions#downlevelIteration:member",
              "docComment": "/**\n * Provide full support for iterables in `for-of`, spread, and destructuring when targeting `ES5` or `ES3`.\n *\n * @defaultValue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "downlevelIteration?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "downlevelIteration",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!CompilerOptions#emitBOM:member",
              "docComment": "/**\n * Emit a UTF-8 Byte Order Mark (BOM) in the beginning of output files.\n *\n * @defaultValue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "emitBOM?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "emitBOM",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!CompilerOptions#emitDeclarationOnly:member",
              "docComment": "/**\n * Only emit `.d.ts` declaration files.\n *\n * @defaultValue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "emitDeclarationOnly?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "emitDeclarationOnly",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!CompilerOptions#emitDecoratorMetadata:member",
              "docComment": "/**\n * Emit design-type metadata for decorated declarations in source.\n *\n * @defaultValue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "emitDecoratorMetadata?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "emitDecoratorMetadata",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!CompilerOptions#esModuleInterop:member",
              "docComment": "/**\n * Emit `__importStar` and `__importDefault` helpers for runtime Babel ecosystem compatibility and enable `--allowSyntheticDefaultImports` for typesystem compatibility.\n *\n * @defaultValue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "esModuleInterop?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "esModuleInterop",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!CompilerOptions#exactOptionalPropertyTypes:member",
              "docComment": "/**\n * Differentiate between undefined and not present when type checking.\n *\n * @defaultValue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "exactOptionalPropertyTypes?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "exactOptionalPropertyTypes",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!CompilerOptions#experimentalDecorators:member",
              "docComment": "/**\n * Enables experimental support for ES7 decorators.\n *\n * @defaultValue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "experimentalDecorators?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "experimentalDecorators",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!CompilerOptions#explainFiles:member",
              "docComment": "/**\n * Print names of files which TypeScript sees as a part of your project and the reason they are part of the compilation.\n *\n * @defaultValue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "explainFiles?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "explainFiles",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!CompilerOptions#extendedDiagnostics:member",
              "docComment": "/**\n * Output more detailed compiler performance information after building.\n *\n * @defaultValue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "extendedDiagnostics?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "extendedDiagnostics",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!CompilerOptions#fallbackPolling:member",
              "docComment": "/**\n * Specify the polling strategy to use when the system runs out of or doesn't support native file watchers.\n *\n * @deprecated\n *\n * Use watchOptions.fallbackPolling instead.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "fallbackPolling?: "
                },
                {
                  "kind": "Reference",
                  "text": "FallbackPolling",
                  "canonicalReference": "@storm-stack/types!FallbackPolling:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "fallbackPolling",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!CompilerOptions#forceConsistentCasingInFileNames:member",
              "docComment": "/**\n * Disallow inconsistently-cased references to the same file.\n *\n * @defaultValue\n *\n * true\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "forceConsistentCasingInFileNames?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "forceConsistentCasingInFileNames",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!CompilerOptions#generateCpuProfile:member",
              "docComment": "/**\n * Emit a v8 CPU profile of the compiler run for debugging.\n *\n * @defaultValue\n *\n * 'profile.cpuprofile'\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "generateCpuProfile?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "generateCpuProfile",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!CompilerOptions#ignoreDeprecations:member",
              "docComment": "/**\n * Suppress deprecation warnings\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ignoreDeprecations?: "
                },
                {
                  "kind": "Reference",
                  "text": "IgnoreDeprecations",
                  "canonicalReference": "@storm-stack/types!IgnoreDeprecations:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "ignoreDeprecations",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!CompilerOptions#importHelpers:member",
              "docComment": "/**\n * Import emit helpers (e.g. `__extends`, `__rest`, etc..) from tslib.\n *\n * @defaultValue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "importHelpers?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "importHelpers",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!CompilerOptions#importsNotUsedAsValues:member",
              "docComment": "/**\n * Specify emit/checking behavior for imports that are only used for types.\n *\n * @deprecated\n *\n * Use `verbatimModuleSyntax` instead.\n *\n * @defaultValue\n *\n * 'remove'\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "importsNotUsedAsValues?: "
                },
                {
                  "kind": "Reference",
                  "text": "ImportsNotUsedAsValues",
                  "canonicalReference": "@storm-stack/types!ImportsNotUsedAsValues:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "importsNotUsedAsValues",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!CompilerOptions#incremental:member",
              "docComment": "/**\n * Enable incremental compilation.\n *\n * @defaultValue\n *\n * `composite`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "incremental?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "incremental",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!CompilerOptions#inlineSourceMap:member",
              "docComment": "/**\n * Emit a single file with source maps instead of having a separate file.\n *\n * @defaultValue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "inlineSourceMap?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "inlineSourceMap",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!CompilerOptions#inlineSources:member",
              "docComment": "/**\n * Emit the source alongside the sourcemaps within a single file.\n *\n * Requires `--inlineSourceMap` to be set.\n *\n * @defaultValue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "inlineSources?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "inlineSources",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!CompilerOptions#isolatedModules:member",
              "docComment": "/**\n * Unconditionally emit imports for unresolved files.\n *\n * @defaultValue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isolatedModules?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "isolatedModules",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!CompilerOptions#jsx:member",
              "docComment": "/**\n * Specify what JSX code is generated.\n *\n * @defaultValue\n *\n * 'preserve'\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "jsx?: "
                },
                {
                  "kind": "Reference",
                  "text": "JSX",
                  "canonicalReference": "@storm-stack/types!JSX:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "jsx",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!CompilerOptions#jsxFactory:member",
              "docComment": "/**\n * Specify the JSX factory function to use when targeting React JSX emit, e.g. `React.createElement` or `h`.\n *\n * @defaultValue\n *\n * 'React.createElement'\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "jsxFactory?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "jsxFactory",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!CompilerOptions#jsxFragmentFactory:member",
              "docComment": "/**\n * Specify the JSX Fragment reference used for fragments when targeting React JSX emit e.g. 'React.Fragment' or 'Fragment'.\n *\n * @defaultValue\n *\n * 'React.Fragment'\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "jsxFragmentFactory?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "jsxFragmentFactory",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!CompilerOptions#jsxImportSource:member",
              "docComment": "/**\n * Specify module specifier used to import the JSX factory functions when using `jsx: react-jsx*`.\n *\n * @defaultValue\n *\n * 'react'\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "jsxImportSource?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "jsxImportSource",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!CompilerOptions#keyofStringsOnly:member",
              "docComment": "/**\n * Resolve `keyof` to string valued property names only (no numbers or symbols).\n *\n * @deprecated\n *\n * This option will be removed in TypeScript 5.5.\n *\n * @defaultValue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "keyofStringsOnly?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "keyofStringsOnly",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!CompilerOptions#lib:member",
              "docComment": "/**\n * List of library files to be included in the compilation.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "lib?: "
                },
                {
                  "kind": "Reference",
                  "text": "Lib",
                  "canonicalReference": "@storm-stack/types!Lib:type"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "lib",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!CompilerOptions#listEmittedFiles:member",
              "docComment": "/**\n * Enable to list all emitted files.\n *\n * @defaultValue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "listEmittedFiles?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "listEmittedFiles",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!CompilerOptions#listFiles:member",
              "docComment": "/**\n * Print names of files part of the compilation.\n *\n * @defaultValue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "listFiles?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "listFiles",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!CompilerOptions#listFilesOnly:member",
              "docComment": "/**\n * Print names of files that are part of the compilation and then stop processing.\n *\n * @defaultValue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "listFilesOnly?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "listFilesOnly",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!CompilerOptions#mapRoot:member",
              "docComment": "/**\n * Specifies the location where debugger should locate map files instead of generated locations.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "mapRoot?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "mapRoot",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!CompilerOptions#maxNodeModuleJsDepth:member",
              "docComment": "/**\n * The maximum dependency depth to search under `node_modules` and load JavaScript files. Only applicable with `--allowJs`.\n *\n * @defaultValue\n *\n * 0\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "maxNodeModuleJsDepth?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "maxNodeModuleJsDepth",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!CompilerOptions#module:member",
              "docComment": "/**\n * Specify module code generation: 'None', 'CommonJS', 'AMD', 'System', 'UMD', 'ES6', 'ES2015' or 'ESNext'. Only 'AMD' and 'System' can be used in conjunction with `--outFile`. 'ES6' and 'ES2015' values may be used when targeting 'ES5' or lower.\n *\n * @defaultValue\n *\n * ['ES3', 'ES5'].includes(target) ? 'CommonJS' : 'ES6'\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "module?: "
                },
                {
                  "kind": "Reference",
                  "text": "Module",
                  "canonicalReference": "@storm-stack/types!Module:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "module",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!CompilerOptions#moduleDetection:member",
              "docComment": "/**\n * Control what method is used to detect module-format JS files.\n *\n * @defaultValue\n *\n * 'auto'\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "moduleDetection?: "
                },
                {
                  "kind": "Reference",
                  "text": "ModuleDetection",
                  "canonicalReference": "@storm-stack/types!ModuleDetection:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "moduleDetection",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!CompilerOptions#moduleResolution:member",
              "docComment": "/**\n * Specifies module resolution strategy: 'node' (Node) or 'classic' (TypeScript pre 1.6).\n *\n * @defaultValue\n *\n * ['AMD', 'System', 'ES6'].includes(module) ? 'classic' : 'node'\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "moduleResolution?: "
                },
                {
                  "kind": "Reference",
                  "text": "ModuleResolution",
                  "canonicalReference": "@storm-stack/types!ModuleResolution:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "moduleResolution",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!CompilerOptions#moduleSuffixes:member",
              "docComment": "/**\n * List of file name suffixes to search when resolving a module.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "moduleSuffixes?: "
                },
                {
                  "kind": "Content",
                  "text": "string[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "moduleSuffixes",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!CompilerOptions#newLine:member",
              "docComment": "/**\n * Specifies the end of line sequence to be used when emitting files: 'crlf' (Windows) or 'lf' (Unix).\n *\n * @defaultValue\n *\n * 'LF'\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "newLine?: "
                },
                {
                  "kind": "Reference",
                  "text": "NewLine",
                  "canonicalReference": "@storm-stack/types!NewLine:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "newLine",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!CompilerOptions#noEmit:member",
              "docComment": "/**\n * Do not emit output.\n *\n * @defaultValue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "noEmit?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "noEmit",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!CompilerOptions#noEmitHelpers:member",
              "docComment": "/**\n * Do not generate custom helper functions like `__extends` in compiled output.\n *\n * @defaultValue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "noEmitHelpers?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "noEmitHelpers",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!CompilerOptions#noEmitOnError:member",
              "docComment": "/**\n * Do not emit outputs if any type checking errors were reported.\n *\n * @defaultValue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "noEmitOnError?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "noEmitOnError",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!CompilerOptions#noErrorTruncation:member",
              "docComment": "/**\n * Do not truncate error messages.\n *\n * @defaultValue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "noErrorTruncation?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "noErrorTruncation",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!CompilerOptions#noFallthroughCasesInSwitch:member",
              "docComment": "/**\n * Report errors for fallthrough cases in switch statement.\n *\n * @defaultValue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "noFallthroughCasesInSwitch?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "noFallthroughCasesInSwitch",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!CompilerOptions#noImplicitAny:member",
              "docComment": "/**\n * Warn on expressions and declarations with an implied 'any' type.\n *\n * @defaultValue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "noImplicitAny?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "noImplicitAny",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!CompilerOptions#noImplicitOverride:member",
              "docComment": "/**\n * Ensure overriding members in derived classes are marked with an override modifier.\n *\n * @defaultValue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "noImplicitOverride?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "noImplicitOverride",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!CompilerOptions#noImplicitReturns:member",
              "docComment": "/**\n * Report error when not all code paths in function return a value.\n *\n * @defaultValue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "noImplicitReturns?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "noImplicitReturns",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!CompilerOptions#noImplicitThis:member",
              "docComment": "/**\n * Raise error on 'this' expressions with an implied any type.\n *\n * @defaultValue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "noImplicitThis?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "noImplicitThis",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!CompilerOptions#noImplicitUseStrict:member",
              "docComment": "/**\n * Do not emit `'use strict'` directives in module output.\n *\n * @deprecated\n *\n * This option will be removed in TypeScript 5.5.\n *\n * @defaultValue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "noImplicitUseStrict?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "noImplicitUseStrict",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!CompilerOptions#noLib:member",
              "docComment": "/**\n * Do not include the default library file (lib.d.ts).\n *\n * @defaultValue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "noLib?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "noLib",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!CompilerOptions#noPropertyAccessFromIndexSignature:member",
              "docComment": "/**\n * Enforces using indexed accessors for keys declared using an indexed type.\n *\n * @defaultValue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "noPropertyAccessFromIndexSignature?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "noPropertyAccessFromIndexSignature",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!CompilerOptions#noResolve:member",
              "docComment": "/**\n * Do not add triple-slash references or module import targets to the list of compiled files.\n *\n * @defaultValue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "noResolve?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "noResolve",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!CompilerOptions#noStrictGenericChecks:member",
              "docComment": "/**\n * Disable strict checking of generic signatures in function types.\n *\n * @deprecated\n *\n * This option will be removed in TypeScript 5.5.\n *\n * @defaultValue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "noStrictGenericChecks?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "noStrictGenericChecks",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!CompilerOptions#noUncheckedIndexedAccess:member",
              "docComment": "/**\n * Add `undefined` to a type when accessed using an index.\n *\n * @defaultValue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "noUncheckedIndexedAccess?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "noUncheckedIndexedAccess",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!CompilerOptions#noUnusedLocals:member",
              "docComment": "/**\n * Report errors on unused locals.\n *\n * @defaultValue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "noUnusedLocals?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "noUnusedLocals",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!CompilerOptions#noUnusedParameters:member",
              "docComment": "/**\n * Report errors on unused parameters.\n *\n * @defaultValue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "noUnusedParameters?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "noUnusedParameters",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!CompilerOptions#outDir:member",
              "docComment": "/**\n * Redirect output structure to the directory.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "outDir?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "outDir",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!CompilerOptions#outFile:member",
              "docComment": "/**\n * Concatenate and emit output to single file.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "outFile?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "outFile",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!CompilerOptions#paths:member",
              "docComment": "/**\n * Specify path mapping to be computed relative to baseUrl option.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "paths?: "
                },
                {
                  "kind": "Reference",
                  "text": "Record",
                  "canonicalReference": "!Record:type"
                },
                {
                  "kind": "Content",
                  "text": "<string, string[]>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "paths",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!CompilerOptions#plugins:member",
              "docComment": "/**\n * List of TypeScript language server plugins to load.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "plugins?: "
                },
                {
                  "kind": "Reference",
                  "text": "Plugin",
                  "canonicalReference": "@storm-stack/types!Plugin:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "plugins",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!CompilerOptions#preserveConstEnums:member",
              "docComment": "/**\n * Do not erase const enum declarations in generated code.\n *\n * @defaultValue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "preserveConstEnums?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "preserveConstEnums",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!CompilerOptions#preserveSymlinks:member",
              "docComment": "/**\n * Do not resolve symlinks to their real path; treat a symlinked file like a real one.\n *\n * @defaultValue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "preserveSymlinks?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "preserveSymlinks",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!CompilerOptions#preserveValueImports:member",
              "docComment": "/**\n * Preserve unused imported values in the JavaScript output that would otherwise be removed.\n *\n * @deprecated\n *\n * Use `verbatimModuleSyntax` instead.\n *\n * @defaultValue\n *\n * true\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "preserveValueImports?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "preserveValueImports",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!CompilerOptions#preserveWatchOutput:member",
              "docComment": "/**\n * Keep outdated console output in watch mode instead of clearing the screen.\n *\n * @defaultValue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "preserveWatchOutput?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "preserveWatchOutput",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!CompilerOptions#pretty:member",
              "docComment": "/**\n * Stylize errors and messages using color and context (experimental).\n *\n * @defaultValue\n *\n * true // Unless piping to another program or redirecting output to a file.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "pretty?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "pretty",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!CompilerOptions#reactNamespace:member",
              "docComment": "/**\n * Specifies the object invoked for `createElement` and `__spread` when targeting `'react'` JSX emit.\n *\n * @defaultValue\n *\n * 'React'\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "reactNamespace?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "reactNamespace",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!CompilerOptions#removeComments:member",
              "docComment": "/**\n * Do not emit comments to output.\n *\n * @defaultValue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "removeComments?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "removeComments",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!CompilerOptions#resolveJsonModule:member",
              "docComment": "/**\n * Include modules imported with `.json` extension.\n *\n * @defaultValue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "resolveJsonModule?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "resolveJsonModule",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!CompilerOptions#resolvePackageJsonExports:member",
              "docComment": "/**\n * Forces TypeScript to consult the exports field of package.json files if it ever reads from a package in node_modules.\n *\n * @defaultValue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "resolvePackageJsonExports?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "resolvePackageJsonExports",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!CompilerOptions#resolvePackageJsonImports:member",
              "docComment": "/**\n * Forces TypeScript to consult the imports field of package.json files when performing a lookup that starts with # from a file whose ancestor directory contains a package.json.\n *\n * @defaultValue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "resolvePackageJsonImports?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "resolvePackageJsonImports",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!CompilerOptions#rootDir:member",
              "docComment": "/**\n * Specifies the root directory of input files.\n *\n * Use to control the output directory structure with `--outDir`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "rootDir?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "rootDir",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!CompilerOptions#rootDirs:member",
              "docComment": "/**\n * Specify list of root directories to be used when resolving modules.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "rootDirs?: "
                },
                {
                  "kind": "Content",
                  "text": "string[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "rootDirs",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!CompilerOptions#skipDefaultLibCheck:member",
              "docComment": "/**\n * @deprecated\n *\n * use `skipLibCheck` instead.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "skipDefaultLibCheck?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "skipDefaultLibCheck",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!CompilerOptions#skipLibCheck:member",
              "docComment": "/**\n * Skip type checking of declaration files.\n *\n * @defaultValue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "skipLibCheck?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "skipLibCheck",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!CompilerOptions#sourceMap:member",
              "docComment": "/**\n * Generates corresponding '.map' file.\n *\n * @defaultValue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "sourceMap?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "sourceMap",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!CompilerOptions#sourceRoot:member",
              "docComment": "/**\n * Specifies the location where debugger should locate TypeScript files instead of source locations.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "sourceRoot?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "sourceRoot",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!CompilerOptions#strict:member",
              "docComment": "/**\n * Enable all strict type checking options.\n *\n * @defaultValue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "strict?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "strict",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!CompilerOptions#strictBindCallApply:member",
              "docComment": "/**\n * Enable stricter checking of of the `bind`, `call`, and `apply` methods on functions.\n *\n * @defaultValue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "strictBindCallApply?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "strictBindCallApply",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!CompilerOptions#strictFunctionTypes:member",
              "docComment": "/**\n * Disable bivariant parameter checking for function types.\n *\n * @defaultValue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "strictFunctionTypes?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "strictFunctionTypes",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!CompilerOptions#strictNullChecks:member",
              "docComment": "/**\n * Enable strict null checks.\n *\n * @defaultValue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "strictNullChecks?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "strictNullChecks",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!CompilerOptions#strictPropertyInitialization:member",
              "docComment": "/**\n * Ensure non-undefined class properties are initialized in the constructor.\n *\n * @defaultValue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "strictPropertyInitialization?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "strictPropertyInitialization",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!CompilerOptions#stripInternal:member",
              "docComment": "/**\n * Do not emit declarations for code that has an `@internal` annotation.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "stripInternal?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "stripInternal",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!CompilerOptions#suppressExcessPropertyErrors:member",
              "docComment": "/**\n * Suppress excess property checks for object literals.\n *\n * @deprecated\n *\n * This option will be removed in TypeScript 5.5.\n *\n * @defaultValue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "suppressExcessPropertyErrors?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "suppressExcessPropertyErrors",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!CompilerOptions#suppressImplicitAnyIndexErrors:member",
              "docComment": "/**\n * Suppress noImplicitAny errors for indexing objects lacking index signatures.\n *\n * @deprecated\n *\n * This option will be removed in TypeScript 5.5.\n *\n * @defaultValue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "suppressImplicitAnyIndexErrors?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "suppressImplicitAnyIndexErrors",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!CompilerOptions#target:member",
              "docComment": "/**\n * Specify ECMAScript target version.\n *\n * @defaultValue\n *\n * 'es3'\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "target?: "
                },
                {
                  "kind": "Reference",
                  "text": "Target",
                  "canonicalReference": "@storm-stack/types!Target:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "target",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!CompilerOptions#traceResolution:member",
              "docComment": "/**\n * Enable tracing of the name resolution process.\n *\n * @defaultValue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "traceResolution?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "traceResolution",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!CompilerOptions#tsBuildInfoFile:member",
              "docComment": "/**\n * Specify file to store incremental compilation information.\n *\n * @defaultValue\n *\n * '.tsbuildinfo'\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "tsBuildInfoFile?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "tsBuildInfoFile",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!CompilerOptions#typeRoots:member",
              "docComment": "/**\n * Specify list of directories for type definition files to be included.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "typeRoots?: "
                },
                {
                  "kind": "Content",
                  "text": "string[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "typeRoots",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!CompilerOptions#types:member",
              "docComment": "/**\n * Type declaration files to be included in compilation.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "types?: "
                },
                {
                  "kind": "Content",
                  "text": "string[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "types",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!CompilerOptions#useDefineForClassFields:member",
              "docComment": "/**\n * Emit ECMAScript standard class fields.\n *\n * @defaultValue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "useDefineForClassFields?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "useDefineForClassFields",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!CompilerOptions#useUnknownInCatchVariables:member",
              "docComment": "/**\n * Default catch clause variables as `unknown` instead of `any`.\n *\n * @defaultValue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "useUnknownInCatchVariables?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "useUnknownInCatchVariables",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!CompilerOptions#verbatimModuleSyntax:member",
              "docComment": "/**\n * Anything that uses the type modifier is dropped entirely.\n *\n * @defaultValue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "verbatimModuleSyntax?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "verbatimModuleSyntax",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!CompilerOptions#watch:member",
              "docComment": "/**\n * Watch input files.\n *\n * @deprecated\n *\n * Use watchOptions instead.\n *\n * @defaultValue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "watch?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "watch",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!CompilerOptions#watchDirectory:member",
              "docComment": "/**\n * Specify the strategy for watching directories under systems that lack recursive file-watching functionality.\n *\n * @deprecated\n *\n * Use watchOptions.watchDirectory instead.\n *\n * @defaultValue\n *\n * 'useFsEvents'\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "watchDirectory?: "
                },
                {
                  "kind": "Reference",
                  "text": "WatchDirectory",
                  "canonicalReference": "@storm-stack/types!WatchDirectory:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "watchDirectory",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!CompilerOptions#watchFile:member",
              "docComment": "/**\n * Specify the strategy for watching individual files.\n *\n * @deprecated\n *\n * Use watchOptions.watchFile instead.\n *\n * @defaultValue\n *\n * 'useFsEvents'\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "watchFile?: "
                },
                {
                  "kind": "Reference",
                  "text": "WatchFile",
                  "canonicalReference": "@storm-stack/types!WatchFile:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "watchFile",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!ComputeRange:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type ComputeRange<N extends "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ", Result extends "
            },
            {
              "kind": "Content",
              "text": "unknown[]"
            },
            {
              "kind": "Content",
              "text": " = "
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Content",
              "text": "Result[\"length\"] extends N ? Result : "
            },
            {
              "kind": "Reference",
              "text": "ComputeRange",
              "canonicalReference": "@storm-stack/types!ComputeRange:type"
            },
            {
              "kind": "Content",
              "text": "<N, [...Result, Result[\"length\"]]>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/utilities.ts",
          "releaseTag": "Public",
          "name": "ComputeRange",
          "typeParameters": [
            {
              "typeParameterName": "N",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "Result",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 7,
            "endIndex": 10
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!Constructor:type",
          "docComment": "/**\n * Matches a [`class` constructor](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes).\n *\n * @category Class\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type Constructor<T, Arguments extends "
            },
            {
              "kind": "Content",
              "text": "unknown[]"
            },
            {
              "kind": "Content",
              "text": " = "
            },
            {
              "kind": "Content",
              "text": "any[]"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Content",
              "text": "new (...arguments_: Arguments) => T"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/base.ts",
          "releaseTag": "Public",
          "name": "Constructor",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "Arguments",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!DeepKey:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type DeepKey<T, TDepth extends "
            },
            {
              "kind": "Content",
              "text": "any[]"
            },
            {
              "kind": "Content",
              "text": " = "
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Content",
              "text": "TDepth[\"length\"] extends 5 ? never : unknown extends T ? "
            },
            {
              "kind": "Reference",
              "text": "PrefixFromDepth",
              "canonicalReference": "@storm-stack/types!~PrefixFromDepth:type"
            },
            {
              "kind": "Content",
              "text": "<string, TDepth> : T extends "
            },
            {
              "kind": "Reference",
              "text": "IsTuple",
              "canonicalReference": "@storm-stack/types!~IsTuple:type"
            },
            {
              "kind": "Content",
              "text": "<T> & any[] ? "
            },
            {
              "kind": "Reference",
              "text": "PrefixTupleAccessor",
              "canonicalReference": "@storm-stack/types!~PrefixTupleAccessor:type"
            },
            {
              "kind": "Content",
              "text": "<T, "
            },
            {
              "kind": "Reference",
              "text": "AllowedIndexes",
              "canonicalReference": "@storm-stack/types!~AllowedIndexes:type"
            },
            {
              "kind": "Content",
              "text": "<T>, TDepth> : T extends any[] ? "
            },
            {
              "kind": "Reference",
              "text": "PrefixArrayAccessor",
              "canonicalReference": "@storm-stack/types!~PrefixArrayAccessor:type"
            },
            {
              "kind": "Content",
              "text": "<T, [...TDepth, any]> : T extends "
            },
            {
              "kind": "Reference",
              "text": "Date",
              "canonicalReference": "!Date:interface"
            },
            {
              "kind": "Content",
              "text": " ? never : T extends object ? "
            },
            {
              "kind": "Reference",
              "text": "PrefixObjectAccessor",
              "canonicalReference": "@storm-stack/types!~PrefixObjectAccessor:type"
            },
            {
              "kind": "Content",
              "text": "<T, TDepth> : T extends bigint | boolean | number | string ? \"\" : never"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/object.ts",
          "releaseTag": "Public",
          "name": "DeepKey",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "TDepth",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 5,
            "endIndex": 20
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!DeepPartial:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type DeepPartial<T> = "
            },
            {
              "kind": "Content",
              "text": "T extends "
            },
            {
              "kind": "Reference",
              "text": "BrowserNativeObject",
              "canonicalReference": "@storm-stack/types!BrowserNativeObject:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "NestedValue",
              "canonicalReference": "@storm-stack/types!NestedValue:type"
            },
            {
              "kind": "Content",
              "text": " ? T : {\n    [K in keyof T]?: "
            },
            {
              "kind": "Reference",
              "text": "DeepPartial",
              "canonicalReference": "@storm-stack/types!DeepPartial:type"
            },
            {
              "kind": "Content",
              "text": "<T[K]>;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/base.ts",
          "releaseTag": "Public",
          "name": "DeepPartial",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 8
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!DeepValue:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type DeepValue<TObject extends "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<string, unknown>"
            },
            {
              "kind": "Content",
              "text": ", TPath extends "
            },
            {
              "kind": "Reference",
              "text": "DeepKey",
              "canonicalReference": "@storm-stack/types!DeepKey:type"
            },
            {
              "kind": "Content",
              "text": "<TObject>"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Reference",
              "text": "GetWithPath",
              "canonicalReference": "@storm-stack/types!GetWithPath:type"
            },
            {
              "kind": "Content",
              "text": "<TObject, "
            },
            {
              "kind": "Reference",
              "text": "ToPath",
              "canonicalReference": "@storm-stack/types!ToPath:type"
            },
            {
              "kind": "Content",
              "text": "<TPath>>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/object.ts",
          "releaseTag": "Public",
          "name": "DeepValue",
          "typeParameters": [
            {
              "typeParameterName": "TObject",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "TPath",
              "constraintTokenRange": {
                "startIndex": 4,
                "endIndex": 6
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 7,
            "endIndex": 11
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@storm-stack/types!EMPTY_OBJECT:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "EMPTY_OBJECT: "
            },
            {
              "kind": "Content",
              "text": "{}"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/base.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "EMPTY_OBJECT",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@storm-stack/types!EMPTY_STRING:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "EMPTY_STRING = "
            },
            {
              "kind": "Content",
              "text": "\"\""
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/base.ts",
          "initializerTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "EMPTY_STRING",
          "variableTypeTokenRange": {
            "startIndex": 0,
            "endIndex": 0
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!EmptyArray:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type EmptyArray = "
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/base.ts",
          "releaseTag": "Public",
          "name": "EmptyArray",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@storm-stack/types!EmptyObject:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface EmptyObject "
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/base.ts",
          "releaseTag": "Public",
          "name": "EmptyObject",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!EmptyObject#[emptyObjectSymbol]:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "emptyObjectSymbol",
                  "canonicalReference": "@storm-stack/types!~emptyObjectSymbol:var"
                },
                {
                  "kind": "Content",
                  "text": "]?: "
                },
                {
                  "kind": "Content",
                  "text": "never"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "[emptyObjectSymbol]",
              "propertyTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!ErrorMessageDetails:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type ErrorMessageDetails = "
            },
            {
              "kind": "Content",
              "text": "{\n    type: \"error\";\n} & "
            },
            {
              "kind": "Reference",
              "text": "Omit",
              "canonicalReference": "!Omit:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "MessageDetails",
              "canonicalReference": "@storm-stack/types!MessageDetails:type"
            },
            {
              "kind": "Content",
              "text": ", \"type\">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/messages.ts",
          "releaseTag": "Public",
          "name": "ErrorMessageDetails",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!Except:type",
          "docComment": "/**\n * Create a type from an object type without certain keys.\n *\n * @remarks\n *\n * This type was proposed to the TypeScript team, which declined it, saying they prefer that libraries implement stricter versions of the built-in types ([microsoft/TypeScript#30825](https://github.com/microsoft/TypeScript/issues/30825#issuecomment-523668235)).  @category Object\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type Except<ObjectType, KeysType extends "
            },
            {
              "kind": "Content",
              "text": "keyof ObjectType"
            },
            {
              "kind": "Content",
              "text": ", Options extends "
            },
            {
              "kind": "Reference",
              "text": "ExceptOptions",
              "canonicalReference": "@storm-stack/types!~ExceptOptions:interface"
            },
            {
              "kind": "Content",
              "text": " = "
            },
            {
              "kind": "Content",
              "text": "{\n    requireExactProps: false;\n}"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Content",
              "text": "{\n    [KeyType in keyof ObjectType as "
            },
            {
              "kind": "Reference",
              "text": "Filter",
              "canonicalReference": "@storm-stack/types!Filter:type"
            },
            {
              "kind": "Content",
              "text": "<KeyType, KeysType>]: ObjectType[KeyType];\n} & (Options[\"requireExactProps\"] extends true ? "
            },
            {
              "kind": "Reference",
              "text": "Partial",
              "canonicalReference": "!Partial:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<KeysType, never>> : "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<string, never>)"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/base.ts",
          "releaseTag": "Public",
          "name": "Except",
          "typeParameters": [
            {
              "typeParameterName": "ObjectType",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "KeysType",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "Options",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 7,
            "endIndex": 16
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!FallbackPolling:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type FallbackPolling = "
            },
            {
              "kind": "Content",
              "text": "\"fixedPollingInterval\" | \"priorityPollingInterval\" | \"dynamicPriorityPolling\" | \"fixedInterval\" | \"priorityInterval\" | \"dynamicPriority\" | \"fixedChunkSize\""
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/tsconfig.ts",
          "releaseTag": "Public",
          "name": "FallbackPolling",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!Filter:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type Filter<KeyType, ExcludeType> = "
            },
            {
              "kind": "Reference",
              "text": "IsEqual",
              "canonicalReference": "@storm-stack/types!IsEqual:type"
            },
            {
              "kind": "Content",
              "text": "<KeyType, ExcludeType> extends true ? never : KeyType extends ExcludeType ? never : KeyType"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/base.ts",
          "releaseTag": "Public",
          "name": "Filter",
          "typeParameters": [
            {
              "typeParameterName": "KeyType",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "ExcludeType",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@storm-stack/types!filterEmpty:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "filterEmpty: <T>(values?: "
            },
            {
              "kind": "Content",
              "text": "(T | null | undefined)[]"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Content",
              "text": "T[]"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/array.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "values",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "filterEmpty"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!Finite:type",
          "docComment": "/**\n * A finite `number`. You can't pass a `bigint` as they are already guaranteed to be finite.\n *\n * Use-case: Validating and documenting parameters.\n *\n * Note: This can't detect `NaN`, please upvote [this issue](https://github.com/microsoft/TypeScript/issues/28682) if you want to have this type as a built-in in TypeScript.\n *\n * @example\n * ```\n * import type {Finite} from 'type-fest';\n *\n * declare function setScore<T extends number>(length: Finite<T>): void;\n * ```\n *\n * @category Numeric\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type Finite<T extends "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Content",
              "text": "T extends "
            },
            {
              "kind": "Reference",
              "text": "PositiveInfinity",
              "canonicalReference": "@storm-stack/types!PositiveInfinity:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "NegativeInfinity",
              "canonicalReference": "@storm-stack/types!NegativeInfinity:type"
            },
            {
              "kind": "Content",
              "text": " ? never : T"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/number.ts",
          "releaseTag": "Public",
          "name": "Finite",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 3,
            "endIndex": 8
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!FirstArrayElement:type",
          "docComment": "/**\n * Extracts the type of the first element of an array or tuple.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type FirstArrayElement<TArray extends "
            },
            {
              "kind": "Reference",
              "text": "UnknownArrayOrTuple",
              "canonicalReference": "@storm-stack/types!UnknownArrayOrTuple:type"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Content",
              "text": "TArray extends readonly [infer THead, ...unknown[]] ? THead : never"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/array.ts",
          "releaseTag": "Public",
          "name": "FirstArrayElement",
          "typeParameters": [
            {
              "typeParameterName": "TArray",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!Float:type",
          "docComment": "/**\n * A `number` that is not an integer.\n *\n * Use-case: Validating and documenting parameters.\n *\n * It does not accept `Infinity`.\n *\n * @example\n * ```\n * import type {Float} from 'type-fest';\n *\n * declare function setPercentage<T extends number>(length: Float<T>): void;\n * ```\n *\n * @see\n *\n * Integer\n *\n * @category Numeric\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type Float<T> = "
            },
            {
              "kind": "Content",
              "text": "T extends unknown ? "
            },
            {
              "kind": "Reference",
              "text": "IsFloat",
              "canonicalReference": "@storm-stack/types!IsFloat:type"
            },
            {
              "kind": "Content",
              "text": "<T> extends true ? T : never : never"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/number.ts",
          "releaseTag": "Public",
          "name": "Float",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!Get:type",
          "docComment": "/**\n * Get a deeply-nested property from an object using a key path, like Lodash's `.get()` function.\n *\n * Use-case: Retrieve a property from deep inside an API response or some other complex object.\n *\n * @example\n * ```\n * import type {Get} from 'type-fest';\n * import * as lodash from 'lodash';\n *\n * const get = <BaseType, Path extends string | readonly string[]>(object: BaseType, path: Path): Get<BaseType, Path> =>\n *   lodash.get(object, path);\n *\n * interface ApiResponse {\n *   hits: {\n *     hits: Array<{\n *       _id: string\n *       _source: {\n *         name: Array<{\n *           given: string[]\n *           family: string\n *         }>\n *         birthDate: string\n *       }\n *     }>\n *   }\n * }\n *\n * const getName = (apiResponse: ApiResponse) =>\n *   get(apiResponse, 'hits.hits[0]._source.name');\n *   //=> Array<{given: string[]; family: string}> | undefined\n *\n * // Path also supports a readonly array of strings\n * const getNameWithPathArray = (apiResponse: ApiResponse) =>\n *   get(apiResponse, ['hits','hits', '0', '_source', 'name'] as const);\n *   //=> Array<{given: string[]; family: string}> | undefined\n *\n * // Non-strict mode:\n * Get<string[], '3', {strict: false}> //=> string\n * Get<Record<string, string>, 'foo', {strict: true}> // => string\n * ```\n *\n * @category Object  @category Array  @category Template literal\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type Get<BaseType, Path extends "
            },
            {
              "kind": "Content",
              "text": "readonly string[] | string"
            },
            {
              "kind": "Content",
              "text": ", Options extends "
            },
            {
              "kind": "Reference",
              "text": "GetOptions",
              "canonicalReference": "@storm-stack/types!~GetOptions:interface"
            },
            {
              "kind": "Content",
              "text": " = "
            },
            {
              "kind": "Content",
              "text": "{}"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Reference",
              "text": "GetWithPath",
              "canonicalReference": "@storm-stack/types!GetWithPath:type"
            },
            {
              "kind": "Content",
              "text": "<BaseType, Path extends string ? "
            },
            {
              "kind": "Reference",
              "text": "ToPath",
              "canonicalReference": "@storm-stack/types!ToPath:type"
            },
            {
              "kind": "Content",
              "text": "<Path> : Path, Options>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/object.ts",
          "releaseTag": "Public",
          "name": "Get",
          "typeParameters": [
            {
              "typeParameterName": "BaseType",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "Path",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "Options",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 7,
            "endIndex": 11
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!GetWithPath:type",
          "docComment": "/**\n * Like the `Get` type but receives an array of strings as a path parameter.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type GetWithPath<BaseType, Keys extends "
            },
            {
              "kind": "Content",
              "text": "readonly string[]"
            },
            {
              "kind": "Content",
              "text": ", Options extends "
            },
            {
              "kind": "Reference",
              "text": "GetOptions",
              "canonicalReference": "@storm-stack/types!~GetOptions:interface"
            },
            {
              "kind": "Content",
              "text": " = "
            },
            {
              "kind": "Content",
              "text": "{}"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Content",
              "text": "Keys extends readonly [] ? BaseType : Keys extends readonly [infer Head, ...infer Tail] ? "
            },
            {
              "kind": "Reference",
              "text": "GetWithPath",
              "canonicalReference": "@storm-stack/types!GetWithPath:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "PropertyOf",
              "canonicalReference": "@storm-stack/types!~PropertyOf:type"
            },
            {
              "kind": "Content",
              "text": "<BaseType, "
            },
            {
              "kind": "Reference",
              "text": "Extract",
              "canonicalReference": "!Extract:type"
            },
            {
              "kind": "Content",
              "text": "<Head, string>, Options>, "
            },
            {
              "kind": "Reference",
              "text": "Extract",
              "canonicalReference": "!Extract:type"
            },
            {
              "kind": "Content",
              "text": "<Tail, string[]>, Options> : never"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/object.ts",
          "releaseTag": "Public",
          "name": "GetWithPath",
          "typeParameters": [
            {
              "typeParameterName": "BaseType",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "Keys",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "Options",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 7,
            "endIndex": 16
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!GlobalThis:type",
          "docComment": "/**\n * Declare locally scoped properties on `globalThis`.\n *\n * When defining a global variable in a declaration file is inappropriate, it can be helpful to define a `type` or `interface` (say `ExtraGlobals`) with the global variable and then cast `globalThis` via code like `globalThis as unknown as ExtraGlobals`.\n *\n * Instead of casting through `unknown`, you can update your `type` or `interface` to extend `GlobalThis` and then directly cast `globalThis`.\n *\n * @example\n * ```\n * import type {GlobalThis} from 'type-fest';\n *\n * type ExtraGlobals = GlobalThis & {\n * \treadonly GLOBAL_TOKEN: string;\n * };\n *\n * (globalThis as ExtraGlobals).GLOBAL_TOKEN;\n * ```\n *\n * @category Type\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type GlobalThis = "
            },
            {
              "kind": "Content",
              "text": "typeof "
            },
            {
              "kind": "Reference",
              "text": "globalThis",
              "canonicalReference": "!globalThis:namespace"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/base.ts",
          "releaseTag": "Public",
          "name": "GlobalThis",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!GreaterThan:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type GreaterThan<A extends "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ", B extends "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Content",
              "text": "number extends A | B ? never : [\n    "
            },
            {
              "kind": "Reference",
              "text": "IsEqual",
              "canonicalReference": "@storm-stack/types!IsEqual:type"
            },
            {
              "kind": "Content",
              "text": "<A, "
            },
            {
              "kind": "Reference",
              "text": "PositiveInfinity",
              "canonicalReference": "@storm-stack/types!PositiveInfinity:type"
            },
            {
              "kind": "Content",
              "text": ">,\n    "
            },
            {
              "kind": "Reference",
              "text": "IsEqual",
              "canonicalReference": "@storm-stack/types!IsEqual:type"
            },
            {
              "kind": "Content",
              "text": "<A, "
            },
            {
              "kind": "Reference",
              "text": "NegativeInfinity",
              "canonicalReference": "@storm-stack/types!NegativeInfinity:type"
            },
            {
              "kind": "Content",
              "text": ">,\n    "
            },
            {
              "kind": "Reference",
              "text": "IsEqual",
              "canonicalReference": "@storm-stack/types!IsEqual:type"
            },
            {
              "kind": "Content",
              "text": "<B, "
            },
            {
              "kind": "Reference",
              "text": "PositiveInfinity",
              "canonicalReference": "@storm-stack/types!PositiveInfinity:type"
            },
            {
              "kind": "Content",
              "text": ">,\n    "
            },
            {
              "kind": "Reference",
              "text": "IsEqual",
              "canonicalReference": "@storm-stack/types!IsEqual:type"
            },
            {
              "kind": "Content",
              "text": "<B, "
            },
            {
              "kind": "Reference",
              "text": "NegativeInfinity",
              "canonicalReference": "@storm-stack/types!NegativeInfinity:type"
            },
            {
              "kind": "Content",
              "text": ">\n] extends infer R extends [boolean, boolean, boolean, boolean] ? "
            },
            {
              "kind": "Reference",
              "text": "Or",
              "canonicalReference": "@storm-stack/types!Or:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "And",
              "canonicalReference": "@storm-stack/types!And:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IsEqual",
              "canonicalReference": "@storm-stack/types!IsEqual:type"
            },
            {
              "kind": "Content",
              "text": "<R[0], true>, "
            },
            {
              "kind": "Reference",
              "text": "IsEqual",
              "canonicalReference": "@storm-stack/types!IsEqual:type"
            },
            {
              "kind": "Content",
              "text": "<R[2], false>>, "
            },
            {
              "kind": "Reference",
              "text": "And",
              "canonicalReference": "@storm-stack/types!And:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IsEqual",
              "canonicalReference": "@storm-stack/types!IsEqual:type"
            },
            {
              "kind": "Content",
              "text": "<R[3], true>, "
            },
            {
              "kind": "Reference",
              "text": "IsEqual",
              "canonicalReference": "@storm-stack/types!IsEqual:type"
            },
            {
              "kind": "Content",
              "text": "<R[1], false>>> extends true ? true : "
            },
            {
              "kind": "Reference",
              "text": "Or",
              "canonicalReference": "@storm-stack/types!Or:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "And",
              "canonicalReference": "@storm-stack/types!And:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IsEqual",
              "canonicalReference": "@storm-stack/types!IsEqual:type"
            },
            {
              "kind": "Content",
              "text": "<R[1], true>, "
            },
            {
              "kind": "Reference",
              "text": "IsEqual",
              "canonicalReference": "@storm-stack/types!IsEqual:type"
            },
            {
              "kind": "Content",
              "text": "<R[3], false>>, "
            },
            {
              "kind": "Reference",
              "text": "And",
              "canonicalReference": "@storm-stack/types!And:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IsEqual",
              "canonicalReference": "@storm-stack/types!IsEqual:type"
            },
            {
              "kind": "Content",
              "text": "<R[2], true>, "
            },
            {
              "kind": "Reference",
              "text": "IsEqual",
              "canonicalReference": "@storm-stack/types!IsEqual:type"
            },
            {
              "kind": "Content",
              "text": "<R[0], false>>> extends true ? false : true extends R[number] ? false : ["
            },
            {
              "kind": "Reference",
              "text": "IsNegative",
              "canonicalReference": "@storm-stack/types!IsNegative:type"
            },
            {
              "kind": "Content",
              "text": "<A>, "
            },
            {
              "kind": "Reference",
              "text": "IsNegative",
              "canonicalReference": "@storm-stack/types!IsNegative:type"
            },
            {
              "kind": "Content",
              "text": "<B>] extends infer R extends [\n    boolean,\n    boolean\n] ? [true, false] extends R ? false : [false, true] extends R ? true : [false, false] extends R ? "
            },
            {
              "kind": "Reference",
              "text": "PositiveNumericStringGt",
              "canonicalReference": "@storm-stack/types!PositiveNumericStringGt:type"
            },
            {
              "kind": "Content",
              "text": "<`${A}`, `${B}`> : "
            },
            {
              "kind": "Reference",
              "text": "PositiveNumericStringGt",
              "canonicalReference": "@storm-stack/types!PositiveNumericStringGt:type"
            },
            {
              "kind": "Content",
              "text": "<`${"
            },
            {
              "kind": "Reference",
              "text": "NumberAbsolute",
              "canonicalReference": "@storm-stack/types!NumberAbsolute:type"
            },
            {
              "kind": "Content",
              "text": "<B>}`, `${"
            },
            {
              "kind": "Reference",
              "text": "NumberAbsolute",
              "canonicalReference": "@storm-stack/types!NumberAbsolute:type"
            },
            {
              "kind": "Content",
              "text": "<A>}`> : never : never"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/logic.ts",
          "releaseTag": "Public",
          "name": "GreaterThan",
          "typeParameters": [
            {
              "typeParameterName": "A",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "B",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 5,
            "endIndex": 62
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!GreaterThanOrEqual:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type GreaterThanOrEqual<A extends "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ", B extends "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Content",
              "text": "number extends A | B ? never : A extends B ? true : "
            },
            {
              "kind": "Reference",
              "text": "GreaterThan",
              "canonicalReference": "@storm-stack/types!GreaterThan:type"
            },
            {
              "kind": "Content",
              "text": "<A, B>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/logic.ts",
          "releaseTag": "Public",
          "name": "GreaterThanOrEqual",
          "typeParameters": [
            {
              "typeParameterName": "A",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "B",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 5,
            "endIndex": 8
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!HasMultipleCallSignatures:type",
          "docComment": "/**\n * Test if the given function has multiple call signatures.\n *\n * Needed to handle the case of a single call signature with properties.\n *\n * Multiple call signatures cannot currently be supported due to a TypeScript limitation.\n *\n * @see\n *\n * https://github.com/microsoft/TypeScript/issues/29732\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type HasMultipleCallSignatures<T extends "
            },
            {
              "kind": "Content",
              "text": "(...arguments_: any[]) => unknown"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Content",
              "text": "T extends {\n    (...arguments_: infer A): unknown;\n    (...arguments_: infer B): unknown;\n} ? B extends A ? A extends B ? false : true : true : false"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/base.ts",
          "releaseTag": "Public",
          "name": "HasMultipleCallSignatures",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!IgnoreDeprecations:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type IgnoreDeprecations = "
            },
            {
              "kind": "Content",
              "text": "\"5.0\""
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/tsconfig.ts",
          "releaseTag": "Public",
          "name": "IgnoreDeprecations",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@storm-stack/types!IIdentity:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IIdentity<T = "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/base.ts",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "IIdentity",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!IIdentity#id:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "id: "
                },
                {
                  "kind": "Content",
                  "text": "T"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "id",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!ImportsNotUsedAsValues:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type ImportsNotUsedAsValues = "
            },
            {
              "kind": "Content",
              "text": "\"remove\" | \"preserve\" | \"error\""
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/tsconfig.ts",
          "releaseTag": "Public",
          "name": "ImportsNotUsedAsValues",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!Index40:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type Index40 = "
            },
            {
              "kind": "Reference",
              "text": "ComputeRange",
              "canonicalReference": "@storm-stack/types!ComputeRange:type"
            },
            {
              "kind": "Content",
              "text": "<40>[number]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/utilities.ts",
          "releaseTag": "Public",
          "name": "Index40",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!Indexable:type",
          "docComment": "/**\n * The declaration of a ***dictionary-type*** object\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type Indexable = "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IndexType",
              "canonicalReference": "@storm-stack/types!IndexType:type"
            },
            {
              "kind": "Content",
              "text": ", any>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/base.ts",
          "releaseTag": "Public",
          "name": "Indexable",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!IndexType:type",
          "docComment": "/**\n * The valid types of the index for an `Indexable` type object\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type IndexType = "
            },
            {
              "kind": "Content",
              "text": "string | number | symbol"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/base.ts",
          "releaseTag": "Public",
          "name": "IndexType",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!InfoMessageDetails:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type InfoMessageDetails = "
            },
            {
              "kind": "Content",
              "text": "{\n    type: \"info\";\n} & "
            },
            {
              "kind": "Reference",
              "text": "Omit",
              "canonicalReference": "!Omit:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "MessageDetails",
              "canonicalReference": "@storm-stack/types!MessageDetails:type"
            },
            {
              "kind": "Content",
              "text": ", \"type\">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/messages.ts",
          "releaseTag": "Public",
          "name": "InfoMessageDetails",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!Integer:type",
          "docComment": "/**\n * A `number` that is an integer.\n *\n * Use-case: Validating and documenting parameters.\n *\n * @example\n * ```\n * type Integer = Integer<1>;\n * //=> 1\n *\n * type IntegerWithDecimal = Integer<1.0>;\n * //=> 1\n *\n * type NegativeInteger = Integer<-1>;\n * //=> -1\n *\n * type Float = Integer<1.5>;\n * //=> never\n *\n * // Supports non-decimal numbers\n *\n * type OctalInteger: Integer<0o10>;\n * //=> 0o10\n *\n * type BinaryInteger: Integer<0b10>;\n * //=> 0b10\n *\n * type HexadecimalInteger: Integer<0x10>;\n * //=> 0x10\n * ```\n *\n * @example\n * ```\n * import type {Integer} from 'type-fest';\n *\n * declare function setYear<T extends number>(length: Integer<T>): void;\n * ```\n *\n * @see\n *\n * NegativeInteger\n *\n * @see\n *\n * NonNegativeInteger\n *\n * @category Numeric\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type Integer<T> = "
            },
            {
              "kind": "Content",
              "text": "T extends unknown ? "
            },
            {
              "kind": "Reference",
              "text": "IsInteger",
              "canonicalReference": "@storm-stack/types!IsInteger:type"
            },
            {
              "kind": "Content",
              "text": "<T> extends true ? T : never : never"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/number.ts",
          "releaseTag": "Public",
          "name": "Integer",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!InternalPaths:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type InternalPaths<_T, Depth extends "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": " = "
            },
            {
              "kind": "Content",
              "text": "0"
            },
            {
              "kind": "Content",
              "text": ", T = "
            },
            {
              "kind": "Reference",
              "text": "Required",
              "canonicalReference": "!Required:type"
            },
            {
              "kind": "Content",
              "text": "<_T>"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Content",
              "text": "T extends "
            },
            {
              "kind": "Reference",
              "text": "EmptyObject",
              "canonicalReference": "@storm-stack/types!EmptyObject:interface"
            },
            {
              "kind": "Content",
              "text": " | readonly [] ? never : {\n    [Key in keyof T]: Key extends number | string ? Key | ("
            },
            {
              "kind": "Reference",
              "text": "LessThan",
              "canonicalReference": "@storm-stack/types!LessThan:type"
            },
            {
              "kind": "Content",
              "text": "<Depth, 15> extends true ? "
            },
            {
              "kind": "Reference",
              "text": "IsNever",
              "canonicalReference": "@storm-stack/types!IsNever:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Paths_",
              "canonicalReference": "@storm-stack/types!~Paths_:type"
            },
            {
              "kind": "Content",
              "text": "<T[Key], "
            },
            {
              "kind": "Reference",
              "text": "Sum",
              "canonicalReference": "@storm-stack/types!Sum:type"
            },
            {
              "kind": "Content",
              "text": "<Depth, 1>>> extends false ? `${Key}.${"
            },
            {
              "kind": "Reference",
              "text": "Paths_",
              "canonicalReference": "@storm-stack/types!~Paths_:type"
            },
            {
              "kind": "Content",
              "text": "<T[Key], "
            },
            {
              "kind": "Reference",
              "text": "Sum",
              "canonicalReference": "@storm-stack/types!Sum:type"
            },
            {
              "kind": "Content",
              "text": "<Depth, 1>>}` : never : never) | "
            },
            {
              "kind": "Reference",
              "text": "ToString",
              "canonicalReference": "@storm-stack/types!ToString:type"
            },
            {
              "kind": "Content",
              "text": "<Key> : never;\n}[(T extends "
            },
            {
              "kind": "Reference",
              "text": "UnknownArray",
              "canonicalReference": "@storm-stack/types!UnknownArray:type"
            },
            {
              "kind": "Content",
              "text": " ? number : unknown) & keyof T]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/object.ts",
          "releaseTag": "Public",
          "name": "InternalPaths",
          "typeParameters": [
            {
              "typeParameterName": "_T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "Depth",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 8,
            "endIndex": 27
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!IsAny:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type IsAny<T> = "
            },
            {
              "kind": "Content",
              "text": "0 extends 1 & T ? true : false"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/base.ts",
          "releaseTag": "Public",
          "name": "IsAny",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!IsBooleanLiteral:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type IsBooleanLiteral<T> = "
            },
            {
              "kind": "Reference",
              "text": "LiteralCheck",
              "canonicalReference": "@storm-stack/types!~LiteralCheck:type"
            },
            {
              "kind": "Content",
              "text": "<T, boolean>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/object.ts",
          "releaseTag": "Public",
          "name": "IsBooleanLiteral",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!IsEmptyObject:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type IsEmptyObject<T> = "
            },
            {
              "kind": "Content",
              "text": "T extends "
            },
            {
              "kind": "Reference",
              "text": "EmptyObject",
              "canonicalReference": "@storm-stack/types!EmptyObject:interface"
            },
            {
              "kind": "Content",
              "text": " ? true : false"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/object.ts",
          "releaseTag": "Public",
          "name": "IsEmptyObject",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!IsEqual:type",
          "docComment": "/**\n * Returns a boolean for whether the two given types are equal.\n *\n * @remarks\n *\n * Use-cases: If you want to make a conditional branch based on the result of a comparison of two types.  @link https://github.com/microsoft/TypeScript/issues/27024#issuecomment-421529650  @link https://stackoverflow.com/questions/68961864/how-does-the-equals-work-in-typescript/68963796#68963796  @category Type Guard  @category Utilities\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type IsEqual<A, B> = "
            },
            {
              "kind": "Content",
              "text": "(<G>() => G extends A ? 1 : 2) extends <G>() => G extends B ? 1 : 2 ? true : false"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/base.ts",
          "releaseTag": "Public",
          "name": "IsEqual",
          "typeParameters": [
            {
              "typeParameterName": "A",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "B",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@storm-stack/types!ISequenced:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ISequenced "
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/base.ts",
          "releaseTag": "Public",
          "name": "ISequenced",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!ISequenced#sequence:member",
              "docComment": "/**\n * The sequence number (version, or event counter, etc.) of the record\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "sequence: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "sequence",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!IsFloat:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type IsFloat<T> = "
            },
            {
              "kind": "Content",
              "text": "T extends number ? `${T}` extends `${infer _Sign extends \"\" | \"-\"}${number}.${infer Decimal extends number}` ? Decimal extends "
            },
            {
              "kind": "Reference",
              "text": "Zero",
              "canonicalReference": "@storm-stack/types!Zero:type"
            },
            {
              "kind": "Content",
              "text": " ? false : true : false : false"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/number.ts",
          "releaseTag": "Public",
          "name": "IsFloat",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!IsFunction:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type IsFunction<T> = "
            },
            {
              "kind": "Content",
              "text": "T extends "
            },
            {
              "kind": "Reference",
              "text": "AnyFunction",
              "canonicalReference": "@storm-stack/types!AnyFunction:type"
            },
            {
              "kind": "Content",
              "text": " ? true : false"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/base.ts",
          "releaseTag": "Public",
          "name": "IsFunction",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!IsInteger:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type IsInteger<T> = "
            },
            {
              "kind": "Content",
              "text": "T extends bigint ? true : T extends number ? number extends T ? false : T extends "
            },
            {
              "kind": "Reference",
              "text": "PositiveInfinity",
              "canonicalReference": "@storm-stack/types!PositiveInfinity:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "NegativeInfinity",
              "canonicalReference": "@storm-stack/types!NegativeInfinity:type"
            },
            {
              "kind": "Content",
              "text": " ? false : "
            },
            {
              "kind": "Reference",
              "text": "Not",
              "canonicalReference": "@storm-stack/types!Not:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IsFloat",
              "canonicalReference": "@storm-stack/types!IsFloat:type"
            },
            {
              "kind": "Content",
              "text": "<T>> : false"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/number.ts",
          "releaseTag": "Public",
          "name": "IsInteger",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 10
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!IsLiteral:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type IsLiteral<T> = "
            },
            {
              "kind": "Reference",
              "text": "IsPrimitive",
              "canonicalReference": "@storm-stack/types!IsPrimitive:type"
            },
            {
              "kind": "Content",
              "text": "<T> extends true ? "
            },
            {
              "kind": "Reference",
              "text": "IsNotFalse",
              "canonicalReference": "@storm-stack/types!IsNotFalse:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IsLiteralUnion",
              "canonicalReference": "@storm-stack/types!~IsLiteralUnion:type"
            },
            {
              "kind": "Content",
              "text": "<T>> : false"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/object.ts",
          "releaseTag": "Public",
          "name": "IsLiteral",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 7
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!IsNegative:type",
          "docComment": "/**\n * Returns a boolean for whether the given number is a negative number.\n *\n * @example\n * ```\n * import type {IsNegative} from 'type-fest';\n *\n * type ShouldBeFalse = IsNegative<1>;\n * type ShouldBeTrue = IsNegative<-1>;\n * ```\n *\n * @category Numeric\n *\n * @see\n *\n * Negative\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type IsNegative<T extends "
            },
            {
              "kind": "Reference",
              "text": "Numeric",
              "canonicalReference": "@storm-stack/types!Numeric:type"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Content",
              "text": "T extends "
            },
            {
              "kind": "Reference",
              "text": "Negative",
              "canonicalReference": "@storm-stack/types!Negative:type"
            },
            {
              "kind": "Content",
              "text": "<T> ? true : false"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/number.ts",
          "releaseTag": "Public",
          "name": "IsNegative",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!IsNever:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type IsNever<T> = "
            },
            {
              "kind": "Content",
              "text": "[T] extends [never] ? true : false"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/base.ts",
          "releaseTag": "Public",
          "name": "IsNever",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!IsNotFalse:type",
          "docComment": "/**\n * Returns a boolean for whether the given `boolean` is not `false`.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type IsNotFalse<T extends "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Content",
              "text": "[T] extends [false] ? false : true"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/logic.ts",
          "releaseTag": "Public",
          "name": "IsNotFalse",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!IsNull:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type IsNull<T> = "
            },
            {
              "kind": "Content",
              "text": "[T] extends [null] ? true : false"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/base.ts",
          "releaseTag": "Public",
          "name": "IsNull",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!IsNullable:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type IsNullable<T> = "
            },
            {
              "kind": "Content",
              "text": "[null] extends [T] ? true : false"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/utilities.ts",
          "releaseTag": "Public",
          "name": "IsNullable",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!IsNullish:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type IsNullish<T> = "
            },
            {
              "kind": "Reference",
              "text": "IsNull",
              "canonicalReference": "@storm-stack/types!IsNull:type"
            },
            {
              "kind": "Content",
              "text": "<T> & "
            },
            {
              "kind": "Reference",
              "text": "IsUndefined",
              "canonicalReference": "@storm-stack/types!IsUndefined:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/base.ts",
          "releaseTag": "Public",
          "name": "IsNullish",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!IsNumericLiteral:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type IsNumericLiteral<T> = "
            },
            {
              "kind": "Reference",
              "text": "LiteralChecks",
              "canonicalReference": "@storm-stack/types!~LiteralChecks:type"
            },
            {
              "kind": "Content",
              "text": "<T, "
            },
            {
              "kind": "Reference",
              "text": "Numeric",
              "canonicalReference": "@storm-stack/types!Numeric:type"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/object.ts",
          "releaseTag": "Public",
          "name": "IsNumericLiteral",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!IsPlainObject:type",
          "docComment": "/**\n * Returns a boolean for whether the given type is a plain key-value object.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type IsPlainObject<T> = "
            },
            {
              "kind": "Content",
              "text": "T extends "
            },
            {
              "kind": "Reference",
              "text": "NonRecursiveType",
              "canonicalReference": "@storm-stack/types!NonRecursiveType:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "ReadonlyMap",
              "canonicalReference": "!ReadonlyMap:interface"
            },
            {
              "kind": "Content",
              "text": "<unknown, unknown> | "
            },
            {
              "kind": "Reference",
              "text": "ReadonlySet",
              "canonicalReference": "!ReadonlySet:interface"
            },
            {
              "kind": "Content",
              "text": "<unknown> | "
            },
            {
              "kind": "Reference",
              "text": "UnknownArray",
              "canonicalReference": "@storm-stack/types!UnknownArray:type"
            },
            {
              "kind": "Content",
              "text": " ? false : T extends object ? true : false"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/object.ts",
          "releaseTag": "Public",
          "name": "IsPlainObject",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 10
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!IsPrimitive:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type IsPrimitive<T> = "
            },
            {
              "kind": "Content",
              "text": "[T] extends ["
            },
            {
              "kind": "Reference",
              "text": "Primitive",
              "canonicalReference": "@storm-stack/types!Primitive:type"
            },
            {
              "kind": "Content",
              "text": "] ? true : false"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/base.ts",
          "releaseTag": "Public",
          "name": "IsPrimitive",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!IsStringLiteral:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type IsStringLiteral<T> = "
            },
            {
              "kind": "Reference",
              "text": "LiteralCheck",
              "canonicalReference": "@storm-stack/types!~LiteralCheck:type"
            },
            {
              "kind": "Content",
              "text": "<T, string>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/object.ts",
          "releaseTag": "Public",
          "name": "IsStringLiteral",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!IsSymbolLiteral:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type IsSymbolLiteral<T> = "
            },
            {
              "kind": "Reference",
              "text": "LiteralCheck",
              "canonicalReference": "@storm-stack/types!~LiteralCheck:type"
            },
            {
              "kind": "Content",
              "text": "<T, symbol>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/object.ts",
          "releaseTag": "Public",
          "name": "IsSymbolLiteral",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!IsUndefined:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type IsUndefined<T> = "
            },
            {
              "kind": "Content",
              "text": "T extends undefined ? true : false"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/base.ts",
          "releaseTag": "Public",
          "name": "IsUndefined",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!IsUnknown:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type IsUnknown<T> = "
            },
            {
              "kind": "Content",
              "text": "unknown extends T ? "
            },
            {
              "kind": "Reference",
              "text": "IsNull",
              "canonicalReference": "@storm-stack/types!IsNull:type"
            },
            {
              "kind": "Content",
              "text": "<T> extends false ? true : false : false"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/base.ts",
          "releaseTag": "Public",
          "name": "IsUnknown",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@storm-stack/types!ITyped:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ITyped "
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/base.ts",
          "releaseTag": "Public",
          "name": "ITyped",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!ITyped#__typename:member",
              "docComment": "/**\n * The type of the record\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "__typename: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "__typename",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@storm-stack/types!IVersioned:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IVersioned "
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/base.ts",
          "releaseTag": "Public",
          "name": "IVersioned",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!IVersioned#version:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "version: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "version",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!JsonArray:type",
          "docComment": "/**\n * Matches a JSON array.\n *\n * @category JSON\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type JsonArray = "
            },
            {
              "kind": "Reference",
              "text": "JsonValue",
              "canonicalReference": "@storm-stack/types!JsonValue:type"
            },
            {
              "kind": "Content",
              "text": "[] | readonly "
            },
            {
              "kind": "Reference",
              "text": "JsonValue",
              "canonicalReference": "@storm-stack/types!JsonValue:type"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/json.ts",
          "releaseTag": "Public",
          "name": "JsonArray",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!JsonObject:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type JsonObject = "
            },
            {
              "kind": "Content",
              "text": "{\n    [Key in string]: "
            },
            {
              "kind": "Reference",
              "text": "JsonValue",
              "canonicalReference": "@storm-stack/types!JsonValue:type"
            },
            {
              "kind": "Content",
              "text": ";\n} & {\n    [Key in string]?: "
            },
            {
              "kind": "Reference",
              "text": "JsonValue",
              "canonicalReference": "@storm-stack/types!JsonValue:type"
            },
            {
              "kind": "Content",
              "text": " | undefined;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/json.ts",
          "releaseTag": "Public",
          "name": "JsonObject",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!JsonPrimitive:type",
          "docComment": "/**\n * Matches any valid JSON primitive value.\n *\n * @category JSON\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type JsonPrimitive = "
            },
            {
              "kind": "Content",
              "text": "string | number | boolean | null"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/json.ts",
          "releaseTag": "Public",
          "name": "JsonPrimitive",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!JsonValue:type",
          "docComment": "/**\n * Matches any valid JSON value.\n *\n * @see\n *\n * `Jsonify` if you need to transform a type to one that is assignable to `JsonValue`.\n *\n * @category JSON\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type JsonValue = "
            },
            {
              "kind": "Reference",
              "text": "JsonPrimitive",
              "canonicalReference": "@storm-stack/types!JsonPrimitive:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "JsonObject",
              "canonicalReference": "@storm-stack/types!JsonObject:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "JsonArray",
              "canonicalReference": "@storm-stack/types!JsonArray:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/json.ts",
          "releaseTag": "Public",
          "name": "JsonValue",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!JSX:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type JSX = "
            },
            {
              "kind": "Content",
              "text": "\"preserve\" | \"react\" | \"react-jsx\" | \"react-jsxdev\" | \"react-native\""
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/tsconfig.ts",
          "releaseTag": "Public",
          "name": "JSX",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!LastArrayElement:type",
          "docComment": "/**\n * Extracts the type of the last element of an array.\n *\n * Use-case: Defining the return type of functions that extract the last element of an array, for example [`lodash.last`](https://lodash.com/docs/4.17.15#last).\n *\n * @example\n * ```\n * import type {LastArrayElement} from 'type-fest';\n *\n * declare function lastOf<V extends readonly any[]>(array: V): LastArrayElement<V>;\n *\n * const array = ['foo', 2];\n *\n * typeof lastOf(array);\n * //=> number\n *\n * const array = ['foo', 2] as const;\n *\n * typeof lastOf(array);\n * //=> 2\n * ```\n *\n * @category Array  @category Template literal\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type LastArrayElement<Elements extends "
            },
            {
              "kind": "Content",
              "text": "readonly unknown[]"
            },
            {
              "kind": "Content",
              "text": ", ElementBeforeTailingSpreadElement = "
            },
            {
              "kind": "Content",
              "text": "never"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Content",
              "text": "Elements extends readonly [] ? ElementBeforeTailingSpreadElement : Elements extends readonly [...infer _U, infer V] ? V : Elements extends readonly [infer U, ...infer V] ? "
            },
            {
              "kind": "Reference",
              "text": "LastArrayElement",
              "canonicalReference": "@storm-stack/types!LastArrayElement:type"
            },
            {
              "kind": "Content",
              "text": "<V, U> : Elements extends readonly (infer U)[] ? ElementBeforeTailingSpreadElement | U : never"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/array.ts",
          "releaseTag": "Public",
          "name": "LastArrayElement",
          "typeParameters": [
            {
              "typeParameterName": "Elements",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "ElementBeforeTailingSpreadElement",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 5,
            "endIndex": 8
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!LessThan:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type LessThan<A extends "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ", B extends "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Content",
              "text": "number extends A | B ? never : "
            },
            {
              "kind": "Reference",
              "text": "GreaterThanOrEqual",
              "canonicalReference": "@storm-stack/types!GreaterThanOrEqual:type"
            },
            {
              "kind": "Content",
              "text": "<A, B> extends true ? false : true"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/logic.ts",
          "releaseTag": "Public",
          "name": "LessThan",
          "typeParameters": [
            {
              "typeParameterName": "A",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "B",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 5,
            "endIndex": 8
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!Lib:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type Lib = "
            },
            {
              "kind": "Content",
              "text": "\"ES5\" | \"ES6\" | \"ES7\" | \"ES2015\" | \"ES2015.Collection\" | \"ES2015.Core\" | \"ES2015.Generator\" | \"ES2015.Iterable\" | \"ES2015.Promise\" | \"ES2015.Proxy\" | \"ES2015.Reflect\" | \"ES2015.Symbol.WellKnown\" | \"ES2015.Symbol\" | \"ES2016\" | \"ES2016.Array.Include\" | \"ES2017\" | \"ES2017.Intl\" | \"ES2017.Object\" | \"ES2017.SharedMemory\" | \"ES2017.String\" | \"ES2017.TypedArrays\" | \"ES2018\" | \"ES2018.AsyncGenerator\" | \"ES2018.AsyncIterable\" | \"ES2018.Intl\" | \"ES2018.Promise\" | \"ES2018.Regexp\" | \"ES2019\" | \"ES2019.Array\" | \"ES2019.Object\" | \"ES2019.String\" | \"ES2019.Symbol\" | \"ES2020\" | \"ES2020.BigInt\" | \"ES2020.Promise\" | \"ES2020.String\" | \"ES2020.Symbol.WellKnown\" | \"ES2020.SharedMemory\" | \"ES2020.Intl\" | \"ES2021\" | \"ES2021.Promise\" | \"ES2021.String\" | \"ES2021.WeakRef\" | \"ES2022\" | \"ES2022.Array\" | \"ES2022.Error\" | \"ES2022.Intl\" | \"ES2022.Object\" | \"ES2022.SharedMemory\" | \"ES2022.String\" | \"ES2022.RegExp\" | \"ESNext\" | \"ESNext.Array\" | \"ESNext.AsyncIterable\" | \"ESNext.BigInt\" | \"ESNext.Intl\" | \"ESNext.Promise\" | \"ESNext.String\" | \"ESNext.Symbol\" | \"ESNext.WeakRef\" | \"DOM\" | \"DOM.Iterable\" | \"ScriptHost\" | \"WebWorker\" | \"WebWorker.ImportScripts\" | \"WebWorker.Iterable\" | \"es5\" | \"es6\" | \"es7\" | \"es2015\" | \"es2015.collection\" | \"es2015.core\" | \"es2015.generator\" | \"es2015.iterable\" | \"es2015.promise\" | \"es2015.proxy\" | \"es2015.reflect\" | \"es2015.symbol.wellknown\" | \"es2015.symbol\" | \"es2016\" | \"es2016.array.include\" | \"es2017\" | \"es2017.intl\" | \"es2017.object\" | \"es2017.sharedmemory\" | \"es2017.string\" | \"es2017.typedarrays\" | \"es2018\" | \"es2018.asyncgenerator\" | \"es2018.asynciterable\" | \"es2018.intl\" | \"es2018.promise\" | \"es2018.regexp\" | \"es2019\" | \"es2019.array\" | \"es2019.object\" | \"es2019.string\" | \"es2019.symbol\" | \"es2020\" | \"es2020.bigint\" | \"es2020.promise\" | \"es2020.string\" | \"es2020.symbol.wellknown\" | \"es2020.sharedmemory\" | \"es2020.intl\" | \"es2021\" | \"es2021.promise\" | \"es2021.string\" | \"es2021.weakref\" | \"es2022\" | \"es2022.array\" | \"es2022.error\" | \"es2022.intl\" | \"es2022.object\" | \"es2022.sharedmemory\" | \"es2022.string\" | \"es2022.regexp\" | \"esnext\" | \"esnext.array\" | \"esnext.asynciterable\" | \"esnext.bigint\" | \"esnext.intl\" | \"esnext.promise\" | \"esnext.string\" | \"esnext.symbol\" | \"esnext.weakref\" | \"dom\" | \"dom.iterable\" | \"scripthost\" | \"webworker\" | \"webworker.importscripts\" | \"webworker.iterable\""
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/tsconfig.ts",
          "releaseTag": "Public",
          "name": "Lib",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!LiteralKeyOf:type",
          "docComment": "/**\n * Returns a boolean for whether the given type is an object.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type LiteralKeyOf<T> = "
            },
            {
              "kind": "Content",
              "text": "keyof {\n    [K in keyof T as "
            },
            {
              "kind": "Reference",
              "text": "IsLiteral",
              "canonicalReference": "@storm-stack/types!IsLiteral:type"
            },
            {
              "kind": "Content",
              "text": "<K> extends true ? K : never]-?: never;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/object.ts",
          "releaseTag": "Public",
          "name": "LiteralKeyOf",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!LiteralUnion:type",
          "docComment": "/**\n * Allows creating a union type by combining primitive types and literal types without sacrificing auto-completion in IDEs for the literal type part of the union.\n *\n * Currently, when a union type of a primitive type is combined with literal types, TypeScript loses all information about the combined literals. Thus, when such type is used in an IDE with autocompletion, no suggestions are made for the declared literals.\n *\n * This type is a workaround for [Microsoft/TypeScript#29729](https://github.com/Microsoft/TypeScript/issues/29729). It will be removed as soon as it's not needed anymore.\n *\n * @example\n * ```\n * import type {LiteralUnion} from 'type-fest';\n *\n * // Before\n *\n * type Pet = 'dog' | 'cat' | string;\n *\n * const pet: Pet = '';\n * // Start typing in your TypeScript-enabled IDE.\n * // You **will not** get auto-completion for `dog` and `cat` literals.\n *\n * // After\n *\n * type Pet2 = LiteralUnion<'dog' | 'cat', string>;\n *\n * const pet: Pet2 = '';\n * // You **will** get auto-completion for `dog` and `cat` literals.\n * ```\n *\n * @category Type\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type LiteralUnion<LiteralType, BaseType extends "
            },
            {
              "kind": "Reference",
              "text": "Primitive",
              "canonicalReference": "@storm-stack/types!Primitive:type"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Content",
              "text": "(BaseType & "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<never, never>) | LiteralType"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/object.ts",
          "releaseTag": "Public",
          "name": "LiteralUnion",
          "typeParameters": [
            {
              "typeParameterName": "LiteralType",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "BaseType",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!MaybePromise:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type MaybePromise<T> = "
            },
            {
              "kind": "Content",
              "text": "T | "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/base.ts",
          "releaseTag": "Public",
          "name": "MaybePromise",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!MessageDetails:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type MessageDetails<TMessageType extends "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": " = "
            },
            {
              "kind": "Reference",
              "text": "MessageType",
              "canonicalReference": "@storm-stack/types!MessageType:type"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Content",
              "text": "{\n    code: string;\n    message?: string;\n    type: TMessageType;\n} | {\n    code?: string;\n    message: string;\n    type: TMessageType;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/messages.ts",
          "releaseTag": "Public",
          "name": "MessageDetails",
          "typeParameters": [
            {
              "typeParameterName": "TMessageType",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!MessageType:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type MessageType = "
            },
            {
              "kind": "Content",
              "text": "\"error\" | \"info\" | \"success\" | \"warning\""
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/messages.ts",
          "releaseTag": "Public",
          "name": "MessageType",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@storm-stack/types!MessageType:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "MessageType: "
            },
            {
              "kind": "Content",
              "text": "{\n    ERROR: "
            },
            {
              "kind": "Reference",
              "text": "MessageType",
              "canonicalReference": "@storm-stack/types!MessageType:type"
            },
            {
              "kind": "Content",
              "text": ";\n    INFO: "
            },
            {
              "kind": "Reference",
              "text": "MessageType",
              "canonicalReference": "@storm-stack/types!MessageType:type"
            },
            {
              "kind": "Content",
              "text": ";\n    SUCCESS: "
            },
            {
              "kind": "Reference",
              "text": "MessageType",
              "canonicalReference": "@storm-stack/types!MessageType:type"
            },
            {
              "kind": "Content",
              "text": ";\n    WARNING: "
            },
            {
              "kind": "Reference",
              "text": "MessageType",
              "canonicalReference": "@storm-stack/types!MessageType:type"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/messages.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "MessageType",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 10
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!Module:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type Module = "
            },
            {
              "kind": "Content",
              "text": "\"CommonJS\" | \"AMD\" | \"System\" | \"UMD\" | \"ES6\" | \"ES2015\" | \"ES2020\" | \"ES2022\" | \"ESNext\" | \"Node16\" | \"NodeNext\" | \"Preserve\" | \"None\" | \"commonjs\" | \"amd\" | \"system\" | \"umd\" | \"es6\" | \"es2015\" | \"es2020\" | \"es2022\" | \"esnext\" | \"node16\" | \"nodenext\" | \"preserve\" | \"none\""
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/tsconfig.ts",
          "releaseTag": "Public",
          "name": "Module",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!ModuleDetection:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type ModuleDetection = "
            },
            {
              "kind": "Content",
              "text": "\"auto\" | \"legacy\" | \"force\""
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/tsconfig.ts",
          "releaseTag": "Public",
          "name": "ModuleDetection",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!ModuleResolution:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type ModuleResolution = "
            },
            {
              "kind": "Content",
              "text": "\"classic\" | \"node\" | \"node10\" | \"node16\" | \"nodenext\" | \"bundler\" | \"Classic\" | \"Node\" | \"Node10\" | \"Node16\" | \"NodeNext\" | \"Bundler\""
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/tsconfig.ts",
          "releaseTag": "Public",
          "name": "ModuleResolution",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!Narrow:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type Narrow<A> = "
            },
            {
              "kind": "Reference",
              "text": "Try",
              "canonicalReference": "@storm-stack/types!Try:type"
            },
            {
              "kind": "Content",
              "text": "<A, [], "
            },
            {
              "kind": "Reference",
              "text": "NarrowRaw",
              "canonicalReference": "@storm-stack/types!~NarrowRaw:type"
            },
            {
              "kind": "Content",
              "text": "<A>>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/utilities.ts",
          "releaseTag": "Public",
          "name": "Narrow",
          "typeParameters": [
            {
              "typeParameterName": "A",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!NativeClass:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type NativeClass = "
            },
            {
              "kind": "Content",
              "text": "abstract new (...args: any) => any"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/base.ts",
          "releaseTag": "Public",
          "name": "NativeClass",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!Negative:type",
          "docComment": "/**\n * A negative `number`/`bigint` (`-∞ < x < 0`)\n *\n * Use-case: Validating and documenting parameters.\n *\n * @see\n *\n * NegativeInteger\n *\n * @see\n *\n * NonNegative\n *\n * @category Numeric\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type Negative<T extends "
            },
            {
              "kind": "Reference",
              "text": "Numeric",
              "canonicalReference": "@storm-stack/types!Numeric:type"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Content",
              "text": "T extends "
            },
            {
              "kind": "Reference",
              "text": "Zero",
              "canonicalReference": "@storm-stack/types!Zero:type"
            },
            {
              "kind": "Content",
              "text": " ? never : `${T}` extends `-${string}` ? T : never"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/number.ts",
          "releaseTag": "Public",
          "name": "Negative",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!NegativeFloat:type",
          "docComment": "/**\n * A negative (`-∞ < x < 0`) `number` that is not an integer. Equivalent to `Negative<Float<T>>`.\n *\n * Use-case: Validating and documenting parameters.\n *\n * @see\n *\n * Negative\n *\n * @see\n *\n * Float\n *\n * @category Numeric\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type NegativeFloat<T extends "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Reference",
              "text": "Negative",
              "canonicalReference": "@storm-stack/types!Negative:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Float",
              "canonicalReference": "@storm-stack/types!Float:type"
            },
            {
              "kind": "Content",
              "text": "<T>>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/number.ts",
          "releaseTag": "Public",
          "name": "NegativeFloat",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 3,
            "endIndex": 7
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!NegativeInfinity:type",
          "docComment": "/**\n * Matches the hidden `-Infinity` type.\n *\n * Please upvote [this issue](https://github.com/microsoft/TypeScript/issues/32277) if you want to have this type as a built-in in TypeScript.\n *\n * @see\n *\n * PositiveInfinity\n *\n * @category Numeric\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type NegativeInfinity = "
            },
            {
              "kind": "Content",
              "text": "-1e999"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/number.ts",
          "releaseTag": "Public",
          "name": "NegativeInfinity",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!NegativeInteger:type",
          "docComment": "/**\n * A negative (`-∞ < x < 0`) `number` that is an integer. Equivalent to `Negative<Integer<T>>`.\n *\n * You can't pass a `bigint` as they are already guaranteed to be integers, instead use `Negative<T>`.\n *\n * Use-case: Validating and documenting parameters.\n *\n * @see\n *\n * Negative\n *\n * @see\n *\n * Integer\n *\n * @category Numeric\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type NegativeInteger<T extends "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Reference",
              "text": "Negative",
              "canonicalReference": "@storm-stack/types!Negative:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Integer",
              "canonicalReference": "@storm-stack/types!Integer:type"
            },
            {
              "kind": "Content",
              "text": "<T>>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/number.ts",
          "releaseTag": "Public",
          "name": "NegativeInteger",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 3,
            "endIndex": 7
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!NestedValue:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type NestedValue<TValue extends "
            },
            {
              "kind": "Content",
              "text": "object"
            },
            {
              "kind": "Content",
              "text": " = "
            },
            {
              "kind": "Content",
              "text": "object"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Content",
              "text": "{\n    ["
            },
            {
              "kind": "Reference",
              "text": "$NestedValue",
              "canonicalReference": "@storm-stack/types!$NestedValue:var"
            },
            {
              "kind": "Content",
              "text": "]: never;\n} & TValue"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/base.ts",
          "releaseTag": "Public",
          "name": "NestedValue",
          "typeParameters": [
            {
              "typeParameterName": "TValue",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 5,
            "endIndex": 8
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!Newable:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type Newable<T> = "
            },
            {
              "kind": "Content",
              "text": "new (..._args: never[]) => T"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/base.ts",
          "releaseTag": "Public",
          "name": "Newable",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@storm-stack/types!NEWLINE_STRING:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "NEWLINE_STRING = "
            },
            {
              "kind": "Content",
              "text": "\"\\r\\n\""
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/base.ts",
          "initializerTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "NEWLINE_STRING",
          "variableTypeTokenRange": {
            "startIndex": 0,
            "endIndex": 0
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!NewLine:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type NewLine = "
            },
            {
              "kind": "Content",
              "text": "\"CRLF\" | \"LF\" | \"crlf\" | \"lf\""
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/tsconfig.ts",
          "releaseTag": "Public",
          "name": "NewLine",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!NoInfer_2:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type NoInfer<T> = "
            },
            {
              "kind": "Content",
              "text": "[T][T extends any ? 0 : never]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/utilities.ts",
          "releaseTag": "Public",
          "name": "NoInfer_2",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!NonNegative:type",
          "docComment": "/**\n * A non-negative `number`/`bigint` (`0 <= x < ∞`).\n *\n * Use-case: Validating and documenting parameters.\n *\n * @example\n * ```\n * import type {NonNegative} from 'type-fest';\n *\n * declare function setLength<T extends number>(length: NonNegative<T>): void;\n * ```\n *\n * @category Numeric\n *\n * @see\n *\n * NonNegativeInteger\n *\n * @see\n *\n * Negative\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type NonNegative<T extends "
            },
            {
              "kind": "Reference",
              "text": "Numeric",
              "canonicalReference": "@storm-stack/types!Numeric:type"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Content",
              "text": "T extends "
            },
            {
              "kind": "Reference",
              "text": "Zero",
              "canonicalReference": "@storm-stack/types!Zero:type"
            },
            {
              "kind": "Content",
              "text": " ? T : "
            },
            {
              "kind": "Reference",
              "text": "Negative",
              "canonicalReference": "@storm-stack/types!Negative:type"
            },
            {
              "kind": "Content",
              "text": "<T> extends never ? T : never"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/number.ts",
          "releaseTag": "Public",
          "name": "NonNegative",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 3,
            "endIndex": 8
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!NonNegativeInteger:type",
          "docComment": "/**\n * A non-negative (`0 <= x < ∞`) `number` that is an integer. Equivalent to `NonNegative<Integer<T>>`.\n *\n * You can't pass a `bigint` as they are already guaranteed to be integers, instead use `NonNegative<T>`.\n *\n * Use-case: Validating and documenting parameters.\n *\n * @example\n * ```\n * import type {NonNegativeInteger} from 'type-fest';\n *\n * declare function setLength<T extends number>(length: NonNegativeInteger<T>): void;\n * ```\n *\n * @category Numeric\n *\n * @see\n *\n * NonNegative\n *\n * @see\n *\n * Integer\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type NonNegativeInteger<T extends "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Reference",
              "text": "NonNegative",
              "canonicalReference": "@storm-stack/types!NonNegative:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Integer",
              "canonicalReference": "@storm-stack/types!Integer:type"
            },
            {
              "kind": "Content",
              "text": "<T>>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/number.ts",
          "releaseTag": "Public",
          "name": "NonNegativeInteger",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 3,
            "endIndex": 7
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!NonNullishObject:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type NonNullishObject = "
            },
            {
              "kind": "Content",
              "text": "object"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/base.ts",
          "releaseTag": "Public",
          "name": "NonNullishObject",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!NonRecursiveType:type",
          "docComment": "/**\n * Matches non-recursive types.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type NonRecursiveType = "
            },
            {
              "kind": "Reference",
              "text": "BuiltIns",
              "canonicalReference": "@storm-stack/types!BuiltIns:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "Function",
              "canonicalReference": "!Function:interface"
            },
            {
              "kind": "Content",
              "text": " | (new (...arguments_: any[]) => unknown)"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/base.ts",
          "releaseTag": "Public",
          "name": "NonRecursiveType",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!NonUndefined:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type NonUndefined<T> = "
            },
            {
              "kind": "Content",
              "text": "T extends undefined ? never : T"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/base.ts",
          "releaseTag": "Public",
          "name": "NonUndefined",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!Not:type",
          "docComment": "/**\n * Returns a boolean for whether A is false.\n *\n * @example\n * ```\n * Not<true>;\n * //=> false\n *\n * Not<false>;\n * //=> true\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type Not<A extends "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Content",
              "text": "A extends true ? false : A extends false ? true : never"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/logic.ts",
          "releaseTag": "Public",
          "name": "Not",
          "typeParameters": [
            {
              "typeParameterName": "A",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!Nullable:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type Nullable<T> = "
            },
            {
              "kind": "Content",
              "text": "T | null"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/utilities.ts",
          "releaseTag": "Public",
          "name": "Nullable",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!NullableDeepValue:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type NullableDeepValue<TObject extends "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<string, unknown>"
            },
            {
              "kind": "Content",
              "text": ", TPath extends "
            },
            {
              "kind": "Reference",
              "text": "DeepKey",
              "canonicalReference": "@storm-stack/types!DeepKey:type"
            },
            {
              "kind": "Content",
              "text": "<TObject>"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Reference",
              "text": "Nullable",
              "canonicalReference": "@storm-stack/types!Nullable:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "GetWithPath",
              "canonicalReference": "@storm-stack/types!GetWithPath:type"
            },
            {
              "kind": "Content",
              "text": "<TObject, "
            },
            {
              "kind": "Reference",
              "text": "ToPath",
              "canonicalReference": "@storm-stack/types!ToPath:type"
            },
            {
              "kind": "Content",
              "text": "<TPath>>>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/object.ts",
          "releaseTag": "Public",
          "name": "NullableDeepValue",
          "typeParameters": [
            {
              "typeParameterName": "TObject",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "TPath",
              "constraintTokenRange": {
                "startIndex": 4,
                "endIndex": 6
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 7,
            "endIndex": 13
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!Nullish:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type Nullish = "
            },
            {
              "kind": "Content",
              "text": "undefined | null"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/base.ts",
          "releaseTag": "Public",
          "name": "Nullish",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!Nullishable:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type Nullishable<T> = "
            },
            {
              "kind": "Content",
              "text": "T | "
            },
            {
              "kind": "Reference",
              "text": "Nullish",
              "canonicalReference": "@storm-stack/types!Nullish:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/base.ts",
          "releaseTag": "Public",
          "name": "Nullishable",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!NumberAbsolute:type",
          "docComment": "/**\n * Returns the absolute value of a given value.\n *\n * @example\n * ```\n * NumberAbsolute<-1>;\n * //=> 1\n *\n * NumberAbsolute<1>;\n * //=> 1\n *\n * NumberAbsolute<NegativeInfinity>\n * //=> PositiveInfinity\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type NumberAbsolute<N extends "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Content",
              "text": "`${N}` extends `-${infer StringPositiveN}` ? "
            },
            {
              "kind": "Reference",
              "text": "StringToNumber",
              "canonicalReference": "@storm-stack/types!StringToNumber:type"
            },
            {
              "kind": "Content",
              "text": "<StringPositiveN> : N"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/logic.ts",
          "releaseTag": "Public",
          "name": "NumberAbsolute",
          "typeParameters": [
            {
              "typeParameterName": "N",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!Numeric:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type Numeric = "
            },
            {
              "kind": "Content",
              "text": "number | bigint"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/number.ts",
          "releaseTag": "Public",
          "name": "Numeric",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!ObjectValue:type",
          "docComment": "/**\n * Extract the object field type if T is an object and K is a key of T, return `never` otherwise.\n *\n * It creates a type-safe way to access the member type of `unknown` type.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type ObjectValue<T, K> = "
            },
            {
              "kind": "Content",
              "text": "K extends keyof T ? T[K] : "
            },
            {
              "kind": "Reference",
              "text": "ToString",
              "canonicalReference": "@storm-stack/types!ToString:type"
            },
            {
              "kind": "Content",
              "text": "<K> extends keyof T ? T["
            },
            {
              "kind": "Reference",
              "text": "ToString",
              "canonicalReference": "@storm-stack/types!ToString:type"
            },
            {
              "kind": "Content",
              "text": "<K>] : K extends `${infer NumberK extends number}` ? NumberK extends keyof T ? T[NumberK] : never : never"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/object.ts",
          "releaseTag": "Public",
          "name": "ObjectValue",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "K",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!Or:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type Or<A extends "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ", B extends "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Content",
              "text": "[\n    A,\n    B\n][number] extends false ? false : true extends ["
            },
            {
              "kind": "Reference",
              "text": "IsEqual",
              "canonicalReference": "@storm-stack/types!IsEqual:type"
            },
            {
              "kind": "Content",
              "text": "<A, true>, "
            },
            {
              "kind": "Reference",
              "text": "IsEqual",
              "canonicalReference": "@storm-stack/types!IsEqual:type"
            },
            {
              "kind": "Content",
              "text": "<B, true>][number] ? true : never"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/logic.ts",
          "releaseTag": "Public",
          "name": "Or",
          "typeParameters": [
            {
              "typeParameterName": "A",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "B",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 5,
            "endIndex": 10
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!PackageJson:type",
          "docComment": "/**\n * Type for [npm's `package.json` file](https://docs.npmjs.com/creating-a-package-json-file). Also includes types for fields used by other popular projects, like TypeScript and Yarn.\n *\n * @category File\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type PackageJson = "
            },
            {
              "kind": "Reference",
              "text": "JsonObject",
              "canonicalReference": "@storm-stack/types!JsonObject:type"
            },
            {
              "kind": "Content",
              "text": " & "
            },
            {
              "kind": "Reference",
              "text": "PackageJson.NodeJsStandard",
              "canonicalReference": "@storm-stack/types!~PackageJson_2.NodeJsStandard:interface"
            },
            {
              "kind": "Content",
              "text": " & "
            },
            {
              "kind": "Reference",
              "text": "PackageJson.PackageJsonStandard",
              "canonicalReference": "@storm-stack/types!~PackageJson_2.PackageJsonStandard:interface"
            },
            {
              "kind": "Content",
              "text": " & "
            },
            {
              "kind": "Reference",
              "text": "PackageJson.NonStandardEntryPoints",
              "canonicalReference": "@storm-stack/types!~PackageJson_2.NonStandardEntryPoints:interface"
            },
            {
              "kind": "Content",
              "text": " & "
            },
            {
              "kind": "Reference",
              "text": "PackageJson.TypeScriptConfiguration",
              "canonicalReference": "@storm-stack/types!~PackageJson_2.TypeScriptConfiguration:interface"
            },
            {
              "kind": "Content",
              "text": " & "
            },
            {
              "kind": "Reference",
              "text": "PackageJson.YarnConfiguration",
              "canonicalReference": "@storm-stack/types!~PackageJson_2.YarnConfiguration:interface"
            },
            {
              "kind": "Content",
              "text": " & "
            },
            {
              "kind": "Reference",
              "text": "PackageJson.JSPMConfiguration",
              "canonicalReference": "@storm-stack/types!~PackageJson_2.JSPMConfiguration:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/package-json.ts",
          "releaseTag": "Public",
          "name": "PackageJson",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 14
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!Paths:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type Paths<T> = "
            },
            {
              "kind": "Reference",
              "text": "Paths_",
              "canonicalReference": "@storm-stack/types!~Paths_:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/object.ts",
          "releaseTag": "Public",
          "name": "Paths",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!PickDeep:type",
          "docComment": "/**\n * Pick properties from a deeply-nested object.\n *\n * It supports recursing into arrays.\n *\n * Use-case: Distill complex objects down to the components you need to target.\n *\n * @example\n * ```\n * import type {PickDeep, PartialDeep} from 'type-fest';\n *\n * type Configuration = {\n *  userConfig: {\n *    name: string;\n *    age: number;\n *    address: [\n *      {\n *        city1: string;\n *        street1: string;\n *      },\n *      {\n *        city2: string;\n *        street2: string;\n *      }\n *    ]\n *  };\n *  otherConfig: any;\n * };\n *\n * type NameConfig = PickDeep<Configuration, 'userConfig.name'>;\n * // type NameConfig = {\n * //  userConfig: {\n * //    name: string;\n * //  }\n * // };\n *\n * // Supports optional properties\n * type User = PickDeep<PartialDeep<Configuration>, 'userConfig.name' | 'userConfig.age'>;\n * // type User = {\n * //  userConfig?: {\n * //    name?: string;\n * //    age?: number;\n * //  };\n * // };\n *\n * // Supports array\n * type AddressConfig = PickDeep<Configuration, 'userConfig.address.0'>;\n * // type AddressConfig = {\n * //  userConfig: {\n * //    address: [{\n * //      city1: string;\n * //      street1: string;\n * //    }];\n * //   };\n * // }\n *\n * // Supports recurse into array\n * type Street = PickDeep<Configuration, 'userConfig.address.1.street2'>;\n * // type Street = {\n * //  userConfig: {\n * //    address: [\n * //      unknown,\n * //      {street2: string}\n * //    ];\n * //  };\n * // }\n * ```\n *\n * @category Object  @category Array\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type PickDeep<T, PathUnion extends "
            },
            {
              "kind": "Reference",
              "text": "Paths",
              "canonicalReference": "@storm-stack/types!Paths:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Content",
              "text": "T extends "
            },
            {
              "kind": "Reference",
              "text": "NonRecursiveType",
              "canonicalReference": "@storm-stack/types!NonRecursiveType:type"
            },
            {
              "kind": "Content",
              "text": " ? never : T extends "
            },
            {
              "kind": "Reference",
              "text": "UnknownArray",
              "canonicalReference": "@storm-stack/types!UnknownArray:type"
            },
            {
              "kind": "Content",
              "text": " ? "
            },
            {
              "kind": "Reference",
              "text": "UnionToIntersection",
              "canonicalReference": "@storm-stack/types!UnionToIntersection:type"
            },
            {
              "kind": "Content",
              "text": "<{\n    [P in PathUnion]: "
            },
            {
              "kind": "Reference",
              "text": "InternalPickDeep",
              "canonicalReference": "@storm-stack/types!~InternalPickDeep:type"
            },
            {
              "kind": "Content",
              "text": "<T, P>;\n}[PathUnion]> : T extends object ? "
            },
            {
              "kind": "Reference",
              "text": "Simplify",
              "canonicalReference": "@storm-stack/types!Simplify:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "UnionToIntersection",
              "canonicalReference": "@storm-stack/types!UnionToIntersection:type"
            },
            {
              "kind": "Content",
              "text": "<{\n    [P in PathUnion]: "
            },
            {
              "kind": "Reference",
              "text": "InternalPickDeep",
              "canonicalReference": "@storm-stack/types!~InternalPickDeep:type"
            },
            {
              "kind": "Content",
              "text": "<T, P>;\n}[PathUnion]>> : never"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/object.ts",
          "releaseTag": "Public",
          "name": "PickDeep",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "PathUnion",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 4,
            "endIndex": 19
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!PlainObject:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type PlainObject = "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<any, {}>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/base.ts",
          "releaseTag": "Public",
          "name": "PlainObject",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@storm-stack/types!Plugin:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface Plugin "
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/tsconfig.ts",
          "releaseTag": "Public",
          "name": "Plugin",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!Plugin#name:member",
              "docComment": "/**\n * Plugin name.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "name: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "name",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!PollingWatchKind:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type PollingWatchKind = "
            },
            {
              "kind": "Content",
              "text": "\"FixedInterval\" | \"PriorityInterval\" | \"DynamicPriority\" | \"FixedChunkSize\""
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/tsconfig.ts",
          "releaseTag": "Public",
          "name": "PollingWatchKind",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!PositiveInfinity:type",
          "docComment": "/**\n * Matches the hidden `Infinity` type.\n *\n * Please upvote [this issue](https://github.com/microsoft/TypeScript/issues/32277) if you want to have this type as a built-in in TypeScript.\n *\n * @see\n *\n * NegativeInfinity\n *\n * @category Numeric\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type PositiveInfinity = "
            },
            {
              "kind": "Content",
              "text": "1e999"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/number.ts",
          "releaseTag": "Public",
          "name": "PositiveInfinity",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!PositiveNumericCharacterGt:type",
          "docComment": "/**\n * Returns a boolean for whether `A` represents a number greater than `B`, where `A` and `B` are both positive numeric characters.\n *\n * @example\n * ```\n * PositiveNumericCharacterGt<'5', '1'>;\n * //=> true\n *\n * PositiveNumericCharacterGt<'1', '1'>;\n * //=> false\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type PositiveNumericCharacterGt<A extends "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", B extends "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Reference",
              "text": "NumericString",
              "canonicalReference": "@storm-stack/types!~NumericString:type"
            },
            {
              "kind": "Content",
              "text": " extends `${infer HeadA}${A}${infer TailA}` ? "
            },
            {
              "kind": "Reference",
              "text": "NumericString",
              "canonicalReference": "@storm-stack/types!~NumericString:type"
            },
            {
              "kind": "Content",
              "text": " extends `${infer HeadB}${B}${infer TailB}` ? HeadA extends `${HeadB}${infer _}${infer __}` ? true : false : never : never"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/logic.ts",
          "releaseTag": "Public",
          "name": "PositiveNumericCharacterGt",
          "typeParameters": [
            {
              "typeParameterName": "A",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "B",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 5,
            "endIndex": 9
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!PositiveNumericStringGt:type",
          "docComment": "/**\n * Returns a boolean for whether `A` is greater than `B`, where `A` and `B` are both positive numeric strings.\n *\n * @example\n * ```\n * PositiveNumericStringGt<'500', '1'>;\n * //=> true\n *\n * PositiveNumericStringGt<'1', '1'>;\n * //=> false\n *\n * PositiveNumericStringGt<'1', '500'>;\n * //=> false\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type PositiveNumericStringGt<A extends "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", B extends "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Content",
              "text": "A extends B ? false : [\n    "
            },
            {
              "kind": "Reference",
              "text": "BuildTuple",
              "canonicalReference": "@storm-stack/types!BuildTuple:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "StringLength",
              "canonicalReference": "@storm-stack/types!StringLength:type"
            },
            {
              "kind": "Content",
              "text": "<A>, 0>,\n    "
            },
            {
              "kind": "Reference",
              "text": "BuildTuple",
              "canonicalReference": "@storm-stack/types!BuildTuple:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "StringLength",
              "canonicalReference": "@storm-stack/types!StringLength:type"
            },
            {
              "kind": "Content",
              "text": "<B>, 0>\n] extends infer R extends [readonly unknown[], readonly unknown[]] ? R[0] extends [...R[1], ...infer Remain extends readonly unknown[]] ? 0 extends Remain[\"length\"] ? "
            },
            {
              "kind": "Reference",
              "text": "SameLengthPositiveNumericStringGt",
              "canonicalReference": "@storm-stack/types!SameLengthPositiveNumericStringGt:type"
            },
            {
              "kind": "Content",
              "text": "<A, B> : true : false : never"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/logic.ts",
          "releaseTag": "Public",
          "name": "PositiveNumericStringGt",
          "typeParameters": [
            {
              "typeParameterName": "A",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "B",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 5,
            "endIndex": 16
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!Pretty:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type Pretty<T> = "
            },
            {
              "kind": "Content",
              "text": "{\n    [K in keyof T]: T[K];\n} & {}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/utilities.ts",
          "releaseTag": "Public",
          "name": "Pretty",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!Primitive:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type Primitive = "
            },
            {
              "kind": "Reference",
              "text": "SerializablePrimitive",
              "canonicalReference": "@storm-stack/types!SerializablePrimitive:type"
            },
            {
              "kind": "Content",
              "text": " | symbol"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/base.ts",
          "releaseTag": "Public",
          "name": "Primitive",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!ReducerFunction:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type ReducerFunction<TState, TAction> = "
            },
            {
              "kind": "Content",
              "text": "(state: TState, action: TAction) => TState"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/base.ts",
          "releaseTag": "Public",
          "name": "ReducerFunction",
          "typeParameters": [
            {
              "typeParameterName": "TState",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "TAction",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@storm-stack/types!References:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface References "
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/tsconfig.ts",
          "releaseTag": "Public",
          "name": "References",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!References#circular:member",
              "docComment": "/**\n * True if it is intended that this reference form a circularity.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "circular?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "circular",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!References#originalPath:member",
              "docComment": "/**\n * The path as the user originally wrote it.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "originalPath?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "originalPath",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!References#path:member",
              "docComment": "/**\n * A normalized path on disk.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "path: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "path",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!References#prepend:member",
              "docComment": "/**\n * True if the output of this reference should be prepended to the output of this project.\n *\n * Only valid for `--outFile` compilations.\n *\n * @deprecated\n *\n * This option will be removed in TypeScript 5.5.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "prepend?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "prepend",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@storm-stack/types!RefObject:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface RefObject<T> "
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/base.ts",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "RefObject",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!RefObject#current:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "current: "
                },
                {
                  "kind": "Content",
                  "text": "T"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "current",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!RequiredByKey:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type RequiredByKey<T, K extends "
            },
            {
              "kind": "Content",
              "text": "keyof T"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Reference",
              "text": "Omit",
              "canonicalReference": "!Omit:type"
            },
            {
              "kind": "Content",
              "text": "<T, K> & "
            },
            {
              "kind": "Reference",
              "text": "Required",
              "canonicalReference": "!Required:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Pick",
              "canonicalReference": "!Pick:type"
            },
            {
              "kind": "Content",
              "text": "<T, K>>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/utilities.ts",
          "releaseTag": "Public",
          "name": "RequiredByKey",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "K",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 3,
            "endIndex": 9
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!RequiredKeysOf:type",
          "docComment": "/**\n * Extract all required keys from the given type.\n *\n * @remarks\n *\n * This is useful when you want to create a new type that contains different type values for the required keys only or use the list of keys for validation purposes, etc...  @category Utilities\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type RequiredKeysOf<BaseType extends "
            },
            {
              "kind": "Content",
              "text": "object"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Reference",
              "text": "Exclude",
              "canonicalReference": "!Exclude:type"
            },
            {
              "kind": "Content",
              "text": "<{\n    [Key in keyof BaseType]: BaseType extends "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<Key, BaseType[Key]> ? Key : never;\n}[keyof BaseType], undefined>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/base.ts",
          "releaseTag": "Public",
          "name": "RequiredKeysOf",
          "typeParameters": [
            {
              "typeParameterName": "BaseType",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 3,
            "endIndex": 7
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!Rollback:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type Rollback = "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<string, (initialValue: any, currentValue: any) => any>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/base.ts",
          "releaseTag": "Public",
          "name": "Rollback",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!SameLengthPositiveNumericStringGt:type",
          "docComment": "/**\n * Returns a boolean for whether `A` represents a number greater than `B`, where `A` and `B` are both numeric strings and have the same length.\n *\n * @example\n * ```\n * SameLengthPositiveNumericStringGt<'50', '10'>;\n * //=> true\n *\n * SameLengthPositiveNumericStringGt<'10', '10'>;\n * //=> false\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type SameLengthPositiveNumericStringGt<A extends "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", B extends "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Content",
              "text": "A extends `${infer FirstA}${infer RestA}` ? B extends `${infer FirstB}${infer RestB}` ? FirstA extends FirstB ? "
            },
            {
              "kind": "Reference",
              "text": "SameLengthPositiveNumericStringGt",
              "canonicalReference": "@storm-stack/types!SameLengthPositiveNumericStringGt:type"
            },
            {
              "kind": "Content",
              "text": "<RestA, RestB> : "
            },
            {
              "kind": "Reference",
              "text": "PositiveNumericCharacterGt",
              "canonicalReference": "@storm-stack/types!PositiveNumericCharacterGt:type"
            },
            {
              "kind": "Content",
              "text": "<FirstA, FirstB> : never : false"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/logic.ts",
          "releaseTag": "Public",
          "name": "SameLengthPositiveNumericStringGt",
          "typeParameters": [
            {
              "typeParameterName": "A",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "B",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 5,
            "endIndex": 10
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@storm-stack/types!SelectOption:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface SelectOption<T = "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/form.ts",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "SelectOption",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!SelectOption#disabled:member",
              "docComment": "/**\n * Is the option value valid for selection in the dropdown\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "disabled: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "disabled",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!SelectOption#name:member",
              "docComment": "/**\n * The string value to display in the field\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "name: "
                },
                {
                  "kind": "Content",
                  "text": "T"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "name",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!SelectOption#selected:member",
              "docComment": "/**\n * Sets or retrieves whether the option in the list box is the default item.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "selected: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "selected",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!SelectOption#value:member",
              "docComment": "/**\n * The value stored behind the scenes when selected\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "value: "
                },
                {
                  "kind": "Content",
                  "text": "string | number | boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "value",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!SerializablePrimitive:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type SerializablePrimitive = "
            },
            {
              "kind": "Content",
              "text": "null | undefined | string | number | boolean | bigint"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/base.ts",
          "releaseTag": "Public",
          "name": "SerializablePrimitive",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!SetRequired:type",
          "docComment": "/**\n * Create a type that makes the given keys required. The remaining keys are kept as is. The sister of the `SetOptional` type.\n *\n * @remarks\n *\n * Use-case: You want to define a single model where the only thing that changes is whether or not some of the keys are required.  @category Object\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type SetRequired<BaseType, Keys extends "
            },
            {
              "kind": "Content",
              "text": "keyof BaseType"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Content",
              "text": "BaseType extends unknown ? "
            },
            {
              "kind": "Reference",
              "text": "Simplify",
              "canonicalReference": "@storm-stack/types!Simplify:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Except",
              "canonicalReference": "@storm-stack/types!Except:type"
            },
            {
              "kind": "Content",
              "text": "<BaseType, Keys> & "
            },
            {
              "kind": "Reference",
              "text": "Required",
              "canonicalReference": "!Required:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Pick",
              "canonicalReference": "!Pick:type"
            },
            {
              "kind": "Content",
              "text": "<BaseType, Keys>>> : never"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/base.ts",
          "releaseTag": "Public",
          "name": "SetRequired",
          "typeParameters": [
            {
              "typeParameterName": "BaseType",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "Keys",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 3,
            "endIndex": 12
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!SetReturnType:type",
          "docComment": "/**\n * Create a function type with a return type of your choice and the same parameters as the given function type.\n *\n * Use-case: You want to define a wrapped function that returns something different while receiving the same parameters. For example, you might want to wrap a function that can throw an error into one that will return `undefined` instead.\n *\n * @example\n * ```\n * import type {SetReturnType} from 'type-fest';\n *\n * type MyFunctionThatCanThrow = (foo: SomeType, bar: unknown) => SomeOtherType;\n *\n * type MyWrappedFunction = SetReturnType<MyFunctionThatCanThrow, SomeOtherType | undefined>;\n * //=> type MyWrappedFunction = (foo: SomeType, bar: unknown) => SomeOtherType | undefined;\n * ```\n *\n * @category Function\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type SetReturnType<Function_ extends "
            },
            {
              "kind": "Content",
              "text": "(...arguments_: any[]) => any"
            },
            {
              "kind": "Content",
              "text": ", TypeToReturn> = "
            },
            {
              "kind": "Content",
              "text": "Function_ extends (this: infer ThisArgument, ...arguments_: infer Arguments) => any ? "
            },
            {
              "kind": "Reference",
              "text": "IsUnknown",
              "canonicalReference": "@storm-stack/types!IsUnknown:type"
            },
            {
              "kind": "Content",
              "text": "<ThisArgument> extends true ? (...arguments_: Arguments) => TypeToReturn : (this: ThisArgument, ...arguments_: Arguments) => TypeToReturn : (...arguments_: "
            },
            {
              "kind": "Reference",
              "text": "Parameters",
              "canonicalReference": "!Parameters:type"
            },
            {
              "kind": "Content",
              "text": "<Function_>) => TypeToReturn"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/async.ts",
          "releaseTag": "Public",
          "name": "SetReturnType",
          "typeParameters": [
            {
              "typeParameterName": "Function_",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "TypeToReturn",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 3,
            "endIndex": 8
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!Simplify:type",
          "docComment": "/**\n * Useful to flatten the type output to improve type hints shown in editors. And also to transform an interface into a type to aide with assignability.\n *\n * @remarks\n *\n * If the type definition must be an interface (perhaps it was defined in a third-party npm package), then the `value` can be defined as `const value: Simplify<SomeInterface> = ...`. Then `value` will be assignable to the `fn` argument. Or the `value` can be cast as `Simplify<SomeInterface>` if you can't re-declare the `value`.  @link https://github.com/microsoft/TypeScript/issues/15300  @category Object\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type Simplify<T> = "
            },
            {
              "kind": "Content",
              "text": "{\n    [KeyType in keyof T]: T[KeyType];\n} & {}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/base.ts",
          "releaseTag": "Public",
          "name": "Simplify",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!Split:type",
          "docComment": "/**\n * Represents an array of strings split using a given character or character set.\n *\n * Use-case: Defining the return type of a method like `String.prototype.split`.\n *\n * @example\n * ```\n * import type {Split} from 'type-fest';\n *\n * declare function split<S extends string, D extends string>(string: S, separator: D): Split<S, D>;\n *\n * type Item = 'foo' | 'bar' | 'baz' | 'waldo';\n * const items = 'foo,bar,baz,waldo';\n * let array: Item[];\n *\n * array = split(items, ',');\n * ```\n *\n * @category String  @category Template literal\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type Split<S extends "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", Delimiter extends "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Content",
              "text": "S extends `${infer Head}${Delimiter}${infer Tail}` ? [Head, ..."
            },
            {
              "kind": "Reference",
              "text": "Split",
              "canonicalReference": "@storm-stack/types!Split:type"
            },
            {
              "kind": "Content",
              "text": "<Tail, Delimiter>] : S extends Delimiter ? [] : [S]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/object.ts",
          "releaseTag": "Public",
          "name": "Split",
          "typeParameters": [
            {
              "typeParameterName": "S",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "Delimiter",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 5,
            "endIndex": 8
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!StartsWith:type",
          "docComment": "/**\n * Returns a boolean for whether the given string `S` starts with the given string `SearchString`.\n *\n * @example\n * ```\n * StartsWith<'abcde', 'abc'>;\n * //=> true\n *\n * StartsWith<'abcde', 'bc'>;\n * //=> false\n *\n * StartsWith<string, 'bc'>;\n * //=> never\n *\n * StartsWith<'abcde', string>;\n * //=> never\n * ```\n *\n * @category String  @category Template literal\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type StartsWith<S extends "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", SearchString extends "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Content",
              "text": "string extends S | SearchString ? never : S extends `${SearchString}${infer T}` ? true : false"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/string.ts",
          "releaseTag": "Public",
          "name": "StartsWith",
          "typeParameters": [
            {
              "typeParameterName": "S",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "SearchString",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!StaticPartOfArray:type",
          "docComment": "/**\n * Returns the static, fixed-length portion of the given array, excluding variable-length parts.\n *\n * @example\n * ```\n * type A = [string, number, boolean, ...string[]];\n * type B = StaticPartOfArray<A>;\n * //=> [string, number, boolean]\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type StaticPartOfArray<T extends "
            },
            {
              "kind": "Reference",
              "text": "UnknownArray",
              "canonicalReference": "@storm-stack/types!UnknownArray:type"
            },
            {
              "kind": "Content",
              "text": ", Result extends "
            },
            {
              "kind": "Reference",
              "text": "UnknownArray",
              "canonicalReference": "@storm-stack/types!UnknownArray:type"
            },
            {
              "kind": "Content",
              "text": " = "
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Content",
              "text": "T extends unknown ? number extends T[\"length\"] ? T extends readonly [infer U, ...infer V] ? "
            },
            {
              "kind": "Reference",
              "text": "StaticPartOfArray",
              "canonicalReference": "@storm-stack/types!StaticPartOfArray:type"
            },
            {
              "kind": "Content",
              "text": "<V, [...Result, U]> : Result : T : never"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/array.ts",
          "releaseTag": "Public",
          "name": "StaticPartOfArray",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "Result",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 7,
            "endIndex": 10
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!StringDigit:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type StringDigit = "
            },
            {
              "kind": "Content",
              "text": "\"0\" | \"1\" | \"2\" | \"3\" | \"4\" | \"5\" | \"6\" | \"7\" | \"8\" | \"9\""
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/string.ts",
          "releaseTag": "Public",
          "name": "StringDigit",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!Stringified:type",
          "docComment": "/**\n * Create a type with the keys of the given type changed to `string` type.\n *\n * Use-case: Changing interface values to strings in order to use them in a form model.\n *\n * @example\n * ```\n * import type {Stringified} from 'type-fest';\n *\n * type Car = {\n * \tmodel: string;\n * \tspeed: number;\n * }\n *\n * const carForm: Stringified<Car> = {\n * \tmodel: 'Foo',\n * \tspeed: '101'\n * };\n * ```\n *\n * @category Object\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type Stringified<ObjectType> = "
            },
            {
              "kind": "Content",
              "text": "{\n    [KeyType in keyof ObjectType]: string;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/json.ts",
          "releaseTag": "Public",
          "name": "Stringified",
          "typeParameters": [
            {
              "typeParameterName": "ObjectType",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!StringKeyOf:type",
          "docComment": "/**\n * Get keys of the given type as strings.\n *\n * Number keys are converted to strings.\n *\n * Use-cases: - Get string keys from a type which may have number keys. - Makes it possible to index using strings retrieved from template types.\n *\n * @example\n * ```\n * import type {StringKeyOf} from 'type-fest';\n *\n * type Foo = {\n * \t1: number,\n * \tstringKey: string,\n * };\n *\n * type StringKeysOfFoo = StringKeyOf<Foo>;\n * //=> '1' | 'stringKey'\n * ```\n *\n * @category Object\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type StringKeyOf<BaseType> = "
            },
            {
              "kind": "Content",
              "text": "`${"
            },
            {
              "kind": "Reference",
              "text": "Extract",
              "canonicalReference": "!Extract:type"
            },
            {
              "kind": "Content",
              "text": "<keyof BaseType, string | number>}`"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/json.ts",
          "releaseTag": "Public",
          "name": "StringKeyOf",
          "typeParameters": [
            {
              "typeParameterName": "BaseType",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!StringLength:type",
          "docComment": "/**\n * Returns the length of the given string.\n *\n * @example\n * ```\n * StringLength<'abcde'>;\n * //=> 5\n *\n * StringLength<string>;\n * //=> never\n * ```\n *\n * @category String  @category Template literal\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type StringLength<S extends "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Content",
              "text": "string extends S ? never : "
            },
            {
              "kind": "Reference",
              "text": "StringToArray",
              "canonicalReference": "@storm-stack/types!StringToArray:type"
            },
            {
              "kind": "Content",
              "text": "<S>[\"length\"]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/string.ts",
          "releaseTag": "Public",
          "name": "StringLength",
          "typeParameters": [
            {
              "typeParameterName": "S",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!StringToArray:type",
          "docComment": "/**\n * Returns an array of the characters of the string.\n *\n * @example\n * ```\n * StringToArray<'abcde'>;\n * //=> ['a', 'b', 'c', 'd', 'e']\n *\n * StringToArray<string>;\n * //=> never\n * ```\n *\n * @category String\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type StringToArray<S extends "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", Result extends "
            },
            {
              "kind": "Content",
              "text": "string[]"
            },
            {
              "kind": "Content",
              "text": " = "
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Content",
              "text": "string extends S ? never : S extends `${infer F}${infer R}` ? "
            },
            {
              "kind": "Reference",
              "text": "StringToArray",
              "canonicalReference": "@storm-stack/types!StringToArray:type"
            },
            {
              "kind": "Content",
              "text": "<R, [...Result, F]> : Result"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/string.ts",
          "releaseTag": "Public",
          "name": "StringToArray",
          "typeParameters": [
            {
              "typeParameterName": "S",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "Result",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 7,
            "endIndex": 10
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!StringToNumber:type",
          "docComment": "/**\n * Converts a numeric string to a number.\n *\n * @example\n * ```\n * type PositiveInt = StringToNumber<'1234'>;\n * //=> 1234\n *\n * type NegativeInt = StringToNumber<'-1234'>;\n * //=> -1234\n *\n * type PositiveFloat = StringToNumber<'1234.56'>;\n * //=> 1234.56\n *\n * type NegativeFloat = StringToNumber<'-1234.56'>;\n * //=> -1234.56\n *\n * type PositiveInfinity = StringToNumber<'Infinity'>;\n * //=> Infinity\n *\n * type NegativeInfinity = StringToNumber<'-Infinity'>;\n * //=> -Infinity\n * ```\n *\n * @category String  @category Numeric  @category Template literal\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type StringToNumber<S extends "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Content",
              "text": "S extends `${infer N extends number}` ? N : S extends \"Infinity\" ? "
            },
            {
              "kind": "Reference",
              "text": "PositiveInfinity",
              "canonicalReference": "@storm-stack/types!PositiveInfinity:type"
            },
            {
              "kind": "Content",
              "text": " : S extends \"-Infinity\" ? "
            },
            {
              "kind": "Reference",
              "text": "NegativeInfinity",
              "canonicalReference": "@storm-stack/types!NegativeInfinity:type"
            },
            {
              "kind": "Content",
              "text": " : never"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/string.ts",
          "releaseTag": "Public",
          "name": "StringToNumber",
          "typeParameters": [
            {
              "typeParameterName": "S",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 3,
            "endIndex": 8
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!StructuredCloneable:type",
          "docComment": "/**\n * Matches a value that can be losslessly cloned using `structuredClone`.\n *\n * Note: - Custom error types will be cloned as the base `Error` type - This type doesn't include types exclusive to the TypeScript DOM library (e.g. `DOMRect` and `VideoFrame`)\n *\n * @example\n * ```\n * import type {StructuredCloneable} from 'type-fest';\n *\n * class CustomClass {}\n *\n * // @ts-expect-error\n * const error: StructuredCloneable = {\n *     custom: new CustomClass(),\n * };\n *\n * structuredClone(error);\n * //=> {custom: {}}\n *\n * const good: StructuredCloneable = {\n *     number: 3,\n *     date: new Date(),\n *     map: new Map<string, number>(),\n * }\n *\n * good.map.set('key', 1);\n *\n * structuredClone(good);\n * //=> {number: 3, date: Date(2022-10-17 22:22:35.920), map: Map {'key' -> 1}}\n * ```\n *\n * @category Structured clone\n *\n * @see\n *\n * https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type StructuredCloneable = "
            },
            {
              "kind": "Reference",
              "text": "StructuredCloneablePrimitive",
              "canonicalReference": "@storm-stack/types!~StructuredCloneablePrimitive:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "StructuredCloneableData",
              "canonicalReference": "@storm-stack/types!~StructuredCloneableData:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "StructuredCloneableCollection",
              "canonicalReference": "@storm-stack/types!~StructuredCloneableCollection:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/base.ts",
          "releaseTag": "Public",
          "name": "StructuredCloneable",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!Subtract:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type Subtract<A extends "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ", B extends "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Content",
              "text": "number extends A | B ? number : [\n    "
            },
            {
              "kind": "Reference",
              "text": "IsEqual",
              "canonicalReference": "@storm-stack/types!IsEqual:type"
            },
            {
              "kind": "Content",
              "text": "<A, "
            },
            {
              "kind": "Reference",
              "text": "PositiveInfinity",
              "canonicalReference": "@storm-stack/types!PositiveInfinity:type"
            },
            {
              "kind": "Content",
              "text": ">,\n    "
            },
            {
              "kind": "Reference",
              "text": "IsEqual",
              "canonicalReference": "@storm-stack/types!IsEqual:type"
            },
            {
              "kind": "Content",
              "text": "<A, "
            },
            {
              "kind": "Reference",
              "text": "NegativeInfinity",
              "canonicalReference": "@storm-stack/types!NegativeInfinity:type"
            },
            {
              "kind": "Content",
              "text": ">,\n    "
            },
            {
              "kind": "Reference",
              "text": "IsEqual",
              "canonicalReference": "@storm-stack/types!IsEqual:type"
            },
            {
              "kind": "Content",
              "text": "<B, "
            },
            {
              "kind": "Reference",
              "text": "PositiveInfinity",
              "canonicalReference": "@storm-stack/types!PositiveInfinity:type"
            },
            {
              "kind": "Content",
              "text": ">,\n    "
            },
            {
              "kind": "Reference",
              "text": "IsEqual",
              "canonicalReference": "@storm-stack/types!IsEqual:type"
            },
            {
              "kind": "Content",
              "text": "<B, "
            },
            {
              "kind": "Reference",
              "text": "NegativeInfinity",
              "canonicalReference": "@storm-stack/types!NegativeInfinity:type"
            },
            {
              "kind": "Content",
              "text": ">\n] extends infer R extends [boolean, boolean, boolean, boolean] ? "
            },
            {
              "kind": "Reference",
              "text": "Or",
              "canonicalReference": "@storm-stack/types!Or:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "And",
              "canonicalReference": "@storm-stack/types!And:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IsEqual",
              "canonicalReference": "@storm-stack/types!IsEqual:type"
            },
            {
              "kind": "Content",
              "text": "<R[0], true>, "
            },
            {
              "kind": "Reference",
              "text": "IsEqual",
              "canonicalReference": "@storm-stack/types!IsEqual:type"
            },
            {
              "kind": "Content",
              "text": "<R[2], false>>, "
            },
            {
              "kind": "Reference",
              "text": "And",
              "canonicalReference": "@storm-stack/types!And:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IsEqual",
              "canonicalReference": "@storm-stack/types!IsEqual:type"
            },
            {
              "kind": "Content",
              "text": "<R[3], true>, "
            },
            {
              "kind": "Reference",
              "text": "IsEqual",
              "canonicalReference": "@storm-stack/types!IsEqual:type"
            },
            {
              "kind": "Content",
              "text": "<R[1], false>>> extends true ? "
            },
            {
              "kind": "Reference",
              "text": "PositiveInfinity",
              "canonicalReference": "@storm-stack/types!PositiveInfinity:type"
            },
            {
              "kind": "Content",
              "text": " : "
            },
            {
              "kind": "Reference",
              "text": "Or",
              "canonicalReference": "@storm-stack/types!Or:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "And",
              "canonicalReference": "@storm-stack/types!And:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IsEqual",
              "canonicalReference": "@storm-stack/types!IsEqual:type"
            },
            {
              "kind": "Content",
              "text": "<R[1], true>, "
            },
            {
              "kind": "Reference",
              "text": "IsEqual",
              "canonicalReference": "@storm-stack/types!IsEqual:type"
            },
            {
              "kind": "Content",
              "text": "<R[3], false>>, "
            },
            {
              "kind": "Reference",
              "text": "And",
              "canonicalReference": "@storm-stack/types!And:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IsEqual",
              "canonicalReference": "@storm-stack/types!IsEqual:type"
            },
            {
              "kind": "Content",
              "text": "<R[2], true>, "
            },
            {
              "kind": "Reference",
              "text": "IsEqual",
              "canonicalReference": "@storm-stack/types!IsEqual:type"
            },
            {
              "kind": "Content",
              "text": "<R[0], false>>> extends true ? "
            },
            {
              "kind": "Reference",
              "text": "NegativeInfinity",
              "canonicalReference": "@storm-stack/types!NegativeInfinity:type"
            },
            {
              "kind": "Content",
              "text": " : true extends R[number] ? number : ["
            },
            {
              "kind": "Reference",
              "text": "IsNegative",
              "canonicalReference": "@storm-stack/types!IsNegative:type"
            },
            {
              "kind": "Content",
              "text": "<A>, "
            },
            {
              "kind": "Reference",
              "text": "IsNegative",
              "canonicalReference": "@storm-stack/types!IsNegative:type"
            },
            {
              "kind": "Content",
              "text": "<B>] extends infer R ? [false, false] extends R ? "
            },
            {
              "kind": "Reference",
              "text": "BuildTuple",
              "canonicalReference": "@storm-stack/types!BuildTuple:type"
            },
            {
              "kind": "Content",
              "text": "<A> extends infer R ? R extends [..."
            },
            {
              "kind": "Reference",
              "text": "BuildTuple",
              "canonicalReference": "@storm-stack/types!BuildTuple:type"
            },
            {
              "kind": "Content",
              "text": "<B>, ...infer R] ? R[\"length\"] : number : never : "
            },
            {
              "kind": "Reference",
              "text": "LessThan",
              "canonicalReference": "@storm-stack/types!LessThan:type"
            },
            {
              "kind": "Content",
              "text": "<A, B> extends true ? number : [false, true] extends R ? "
            },
            {
              "kind": "Reference",
              "text": "Sum",
              "canonicalReference": "@storm-stack/types!Sum:type"
            },
            {
              "kind": "Content",
              "text": "<A, "
            },
            {
              "kind": "Reference",
              "text": "NumberAbsolute",
              "canonicalReference": "@storm-stack/types!NumberAbsolute:type"
            },
            {
              "kind": "Content",
              "text": "<B>> : "
            },
            {
              "kind": "Reference",
              "text": "Subtract",
              "canonicalReference": "@storm-stack/types!Subtract:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "NumberAbsolute",
              "canonicalReference": "@storm-stack/types!NumberAbsolute:type"
            },
            {
              "kind": "Content",
              "text": "<B>, "
            },
            {
              "kind": "Reference",
              "text": "NumberAbsolute",
              "canonicalReference": "@storm-stack/types!NumberAbsolute:type"
            },
            {
              "kind": "Content",
              "text": "<A>> : never : never"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/logic.ts",
          "releaseTag": "Public",
          "name": "Subtract",
          "typeParameters": [
            {
              "typeParameterName": "A",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "B",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 5,
            "endIndex": 74
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!SuccessMessageDetails:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type SuccessMessageDetails = "
            },
            {
              "kind": "Content",
              "text": "{\n    type: \"success\";\n} & "
            },
            {
              "kind": "Reference",
              "text": "Omit",
              "canonicalReference": "!Omit:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "MessageDetails",
              "canonicalReference": "@storm-stack/types!MessageDetails:type"
            },
            {
              "kind": "Content",
              "text": ", \"type\">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/messages.ts",
          "releaseTag": "Public",
          "name": "SuccessMessageDetails",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!Sum:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type Sum<A extends "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ", B extends "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Content",
              "text": "number extends A | B ? number : [\n    "
            },
            {
              "kind": "Reference",
              "text": "IsEqual",
              "canonicalReference": "@storm-stack/types!IsEqual:type"
            },
            {
              "kind": "Content",
              "text": "<A, "
            },
            {
              "kind": "Reference",
              "text": "PositiveInfinity",
              "canonicalReference": "@storm-stack/types!PositiveInfinity:type"
            },
            {
              "kind": "Content",
              "text": ">,\n    "
            },
            {
              "kind": "Reference",
              "text": "IsEqual",
              "canonicalReference": "@storm-stack/types!IsEqual:type"
            },
            {
              "kind": "Content",
              "text": "<A, "
            },
            {
              "kind": "Reference",
              "text": "NegativeInfinity",
              "canonicalReference": "@storm-stack/types!NegativeInfinity:type"
            },
            {
              "kind": "Content",
              "text": ">,\n    "
            },
            {
              "kind": "Reference",
              "text": "IsEqual",
              "canonicalReference": "@storm-stack/types!IsEqual:type"
            },
            {
              "kind": "Content",
              "text": "<B, "
            },
            {
              "kind": "Reference",
              "text": "PositiveInfinity",
              "canonicalReference": "@storm-stack/types!PositiveInfinity:type"
            },
            {
              "kind": "Content",
              "text": ">,\n    "
            },
            {
              "kind": "Reference",
              "text": "IsEqual",
              "canonicalReference": "@storm-stack/types!IsEqual:type"
            },
            {
              "kind": "Content",
              "text": "<B, "
            },
            {
              "kind": "Reference",
              "text": "NegativeInfinity",
              "canonicalReference": "@storm-stack/types!NegativeInfinity:type"
            },
            {
              "kind": "Content",
              "text": ">\n] extends infer R extends [boolean, boolean, boolean, boolean] ? "
            },
            {
              "kind": "Reference",
              "text": "Or",
              "canonicalReference": "@storm-stack/types!Or:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "And",
              "canonicalReference": "@storm-stack/types!And:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IsEqual",
              "canonicalReference": "@storm-stack/types!IsEqual:type"
            },
            {
              "kind": "Content",
              "text": "<R[0], true>, "
            },
            {
              "kind": "Reference",
              "text": "IsEqual",
              "canonicalReference": "@storm-stack/types!IsEqual:type"
            },
            {
              "kind": "Content",
              "text": "<R[3], false>>, "
            },
            {
              "kind": "Reference",
              "text": "And",
              "canonicalReference": "@storm-stack/types!And:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IsEqual",
              "canonicalReference": "@storm-stack/types!IsEqual:type"
            },
            {
              "kind": "Content",
              "text": "<R[2], true>, "
            },
            {
              "kind": "Reference",
              "text": "IsEqual",
              "canonicalReference": "@storm-stack/types!IsEqual:type"
            },
            {
              "kind": "Content",
              "text": "<R[1], false>>> extends true ? "
            },
            {
              "kind": "Reference",
              "text": "PositiveInfinity",
              "canonicalReference": "@storm-stack/types!PositiveInfinity:type"
            },
            {
              "kind": "Content",
              "text": " : "
            },
            {
              "kind": "Reference",
              "text": "Or",
              "canonicalReference": "@storm-stack/types!Or:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "And",
              "canonicalReference": "@storm-stack/types!And:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IsEqual",
              "canonicalReference": "@storm-stack/types!IsEqual:type"
            },
            {
              "kind": "Content",
              "text": "<R[1], true>, "
            },
            {
              "kind": "Reference",
              "text": "IsEqual",
              "canonicalReference": "@storm-stack/types!IsEqual:type"
            },
            {
              "kind": "Content",
              "text": "<R[2], false>>, "
            },
            {
              "kind": "Reference",
              "text": "And",
              "canonicalReference": "@storm-stack/types!And:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IsEqual",
              "canonicalReference": "@storm-stack/types!IsEqual:type"
            },
            {
              "kind": "Content",
              "text": "<R[3], true>, "
            },
            {
              "kind": "Reference",
              "text": "IsEqual",
              "canonicalReference": "@storm-stack/types!IsEqual:type"
            },
            {
              "kind": "Content",
              "text": "<R[0], false>>> extends true ? "
            },
            {
              "kind": "Reference",
              "text": "NegativeInfinity",
              "canonicalReference": "@storm-stack/types!NegativeInfinity:type"
            },
            {
              "kind": "Content",
              "text": " : true extends R[number] ? number : (["
            },
            {
              "kind": "Reference",
              "text": "IsNegative",
              "canonicalReference": "@storm-stack/types!IsNegative:type"
            },
            {
              "kind": "Content",
              "text": "<A>, "
            },
            {
              "kind": "Reference",
              "text": "IsNegative",
              "canonicalReference": "@storm-stack/types!IsNegative:type"
            },
            {
              "kind": "Content",
              "text": "<B>] extends infer R ? [false, false] extends R ? [..."
            },
            {
              "kind": "Reference",
              "text": "BuildTuple",
              "canonicalReference": "@storm-stack/types!BuildTuple:type"
            },
            {
              "kind": "Content",
              "text": "<A>, ..."
            },
            {
              "kind": "Reference",
              "text": "BuildTuple",
              "canonicalReference": "@storm-stack/types!BuildTuple:type"
            },
            {
              "kind": "Content",
              "text": "<B>][\"length\"] : [true, true] extends R ? number : "
            },
            {
              "kind": "Reference",
              "text": "ArrayMax",
              "canonicalReference": "@storm-stack/types!ArrayMax:type"
            },
            {
              "kind": "Content",
              "text": "<[\n    "
            },
            {
              "kind": "Reference",
              "text": "NumberAbsolute",
              "canonicalReference": "@storm-stack/types!NumberAbsolute:type"
            },
            {
              "kind": "Content",
              "text": "<A>,\n    "
            },
            {
              "kind": "Reference",
              "text": "NumberAbsolute",
              "canonicalReference": "@storm-stack/types!NumberAbsolute:type"
            },
            {
              "kind": "Content",
              "text": "<B>\n]> extends infer Max_ ? "
            },
            {
              "kind": "Reference",
              "text": "ArrayMin",
              "canonicalReference": "@storm-stack/types!ArrayMin:type"
            },
            {
              "kind": "Content",
              "text": "<[\n    "
            },
            {
              "kind": "Reference",
              "text": "NumberAbsolute",
              "canonicalReference": "@storm-stack/types!NumberAbsolute:type"
            },
            {
              "kind": "Content",
              "text": "<A>,\n    "
            },
            {
              "kind": "Reference",
              "text": "NumberAbsolute",
              "canonicalReference": "@storm-stack/types!NumberAbsolute:type"
            },
            {
              "kind": "Content",
              "text": "<B>\n]> extends infer Min_ extends number ? Max_ extends A | B ? "
            },
            {
              "kind": "Reference",
              "text": "Subtract",
              "canonicalReference": "@storm-stack/types!Subtract:type"
            },
            {
              "kind": "Content",
              "text": "<Max_, Min_> : number : never : never : never) & number : never"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/logic.ts",
          "releaseTag": "Public",
          "name": "Sum",
          "typeParameters": [
            {
              "typeParameterName": "A",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "B",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 5,
            "endIndex": 76
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!Target:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type Target = "
            },
            {
              "kind": "Content",
              "text": "\"ES3\" | \"ES5\" | \"ES6\" | \"ES2015\" | \"ES2016\" | \"ES2017\" | \"ES2018\" | \"ES2019\" | \"ES2020\" | \"ES2021\" | \"ES2022\" | \"ESNext\" | \"es3\" | \"es5\" | \"es6\" | \"es2015\" | \"es2016\" | \"es2017\" | \"es2018\" | \"es2019\" | \"es2020\" | \"es2021\" | \"es2022\" | \"esnext\""
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/tsconfig.ts",
          "releaseTag": "Public",
          "name": "Target",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!ToPath:type",
          "docComment": "/**\n * Splits a dot-prop style path into a tuple comprised of the properties in the path. Handles square-bracket notation.\n *\n * @example\n * ```\n * ToPath<'foo.bar.baz'>\n * //=> ['foo', 'bar', 'baz']\n *\n * ToPath<'foo[0].bar.baz'>\n * //=> ['foo', '0', 'bar', 'baz']\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type ToPath<S extends "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Reference",
              "text": "Split",
              "canonicalReference": "@storm-stack/types!Split:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "FixPathSquareBrackets",
              "canonicalReference": "@storm-stack/types!~FixPathSquareBrackets:type"
            },
            {
              "kind": "Content",
              "text": "<S>, \".\">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/object.ts",
          "releaseTag": "Public",
          "name": "ToPath",
          "typeParameters": [
            {
              "typeParameterName": "S",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 3,
            "endIndex": 7
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!ToString:type",
          "docComment": "/**\n * Return a string representation of the given string or number.\n *\n * Note: This type is not the return type of the `.toString()` function.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type ToString<T> = "
            },
            {
              "kind": "Content",
              "text": "T extends number | string ? `${T}` : never"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/object.ts",
          "releaseTag": "Public",
          "name": "ToString",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!Try:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type Try<A1, A2, Catch = "
            },
            {
              "kind": "Content",
              "text": "never"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Content",
              "text": "A1 extends A2 ? A1 : Catch"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/utilities.ts",
          "releaseTag": "Public",
          "name": "Try",
          "typeParameters": [
            {
              "typeParameterName": "A1",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "A2",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "Catch",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@storm-stack/types!TsConfigJson:interface",
          "docComment": "/**\n * Type for [TypeScript's `tsconfig.json` file](https://www.typescriptlang.org/docs/handbook/tsconfig-json.html) (TypeScript 3.7).\n *\n * @category File\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface TsConfigJson "
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/tsconfig.ts",
          "releaseTag": "Public",
          "name": "TsConfigJson",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!TsConfigJson#compileOnSave:member",
              "docComment": "/**\n * Enable Compile-on-Save for this project.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "compileOnSave?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "compileOnSave",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!TsConfigJson#compilerOptions:member",
              "docComment": "/**\n * Instructs the TypeScript compiler how to compile `.ts` files.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "compilerOptions?: "
                },
                {
                  "kind": "Reference",
                  "text": "CompilerOptions",
                  "canonicalReference": "@storm-stack/types!CompilerOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "compilerOptions",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!TsConfigJson#exclude:member",
              "docComment": "/**\n * Specifies a list of files to be excluded from compilation. The `exclude` property only affects the files included via the `include` property and not the `files` property.\n *\n * Glob patterns require TypeScript version 2.0 or later.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "exclude?: "
                },
                {
                  "kind": "Content",
                  "text": "string[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "exclude",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!TsConfigJson#extends:member",
              "docComment": "/**\n * Path to base configuration file to inherit from.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "extends?: "
                },
                {
                  "kind": "Content",
                  "text": "string | string[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "extends",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!TsConfigJson#files:member",
              "docComment": "/**\n * If no `files` or `include` property is present in a `tsconfig.json`, the compiler defaults to including all files in the containing directory and subdirectories except those specified by `exclude`. When a `files` property is specified, only those files and those specified by `include` are included.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "files?: "
                },
                {
                  "kind": "Content",
                  "text": "string[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "files",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!TsConfigJson#include:member",
              "docComment": "/**\n * Specifies a list of glob patterns that match files to be included in compilation.\n *\n * If no `files` or `include` property is present in a `tsconfig.json`, the compiler defaults to including all files in the containing directory and subdirectories except those specified by `exclude`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "include?: "
                },
                {
                  "kind": "Content",
                  "text": "string[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "include",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!TsConfigJson#references:member",
              "docComment": "/**\n * Referenced projects.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "references?: "
                },
                {
                  "kind": "Reference",
                  "text": "References",
                  "canonicalReference": "@storm-stack/types!References:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "references",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!TsConfigJson#typeAcquisition:member",
              "docComment": "/**\n * Auto type (.d.ts) acquisition options for this project.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "typeAcquisition?: "
                },
                {
                  "kind": "Reference",
                  "text": "TypeAcquisition",
                  "canonicalReference": "@storm-stack/types!TypeAcquisition:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "typeAcquisition",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!TsConfigJson#watchOptions:member",
              "docComment": "/**\n * Instructs the TypeScript compiler how to watch files.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "watchOptions?: "
                },
                {
                  "kind": "Reference",
                  "text": "WatchOptions",
                  "canonicalReference": "@storm-stack/types!WatchOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "watchOptions",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "@storm-stack/types!TYPE_ARGUMENTS:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "TYPE_ARGUMENTS = "
            },
            {
              "kind": "Content",
              "text": "\"Arguments\""
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/base.ts",
          "initializerTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "TYPE_ARGUMENTS",
          "variableTypeTokenRange": {
            "startIndex": 0,
            "endIndex": 0
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@storm-stack/types!TYPE_ARRAY:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "TYPE_ARRAY = "
            },
            {
              "kind": "Content",
              "text": "\"Array\""
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/base.ts",
          "initializerTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "TYPE_ARRAY",
          "variableTypeTokenRange": {
            "startIndex": 0,
            "endIndex": 0
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@storm-stack/types!TYPE_MAP:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "TYPE_MAP = "
            },
            {
              "kind": "Content",
              "text": "\"Map\""
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/base.ts",
          "initializerTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "TYPE_MAP",
          "variableTypeTokenRange": {
            "startIndex": 0,
            "endIndex": 0
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@storm-stack/types!TYPE_OBJECT:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "TYPE_OBJECT = "
            },
            {
              "kind": "Content",
              "text": "\"Object\""
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/base.ts",
          "initializerTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "TYPE_OBJECT",
          "variableTypeTokenRange": {
            "startIndex": 0,
            "endIndex": 0
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@storm-stack/types!TYPE_SET:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "TYPE_SET = "
            },
            {
              "kind": "Content",
              "text": "\"Set\""
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/base.ts",
          "initializerTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "TYPE_SET",
          "variableTypeTokenRange": {
            "startIndex": 0,
            "endIndex": 0
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@storm-stack/types!TypeAcquisition:interface",
          "docComment": "/**\n * Auto type (.d.ts) acquisition options for this project.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface TypeAcquisition "
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/tsconfig.ts",
          "releaseTag": "Public",
          "name": "TypeAcquisition",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!TypeAcquisition#enable:member",
              "docComment": "/**\n * Enable auto type acquisition.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "enable?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "enable",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!TypeAcquisition#exclude:member",
              "docComment": "/**\n * Specifies a list of type declarations to be excluded from auto type acquisition. For example, `['jquery', 'lodash']`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "exclude?: "
                },
                {
                  "kind": "Content",
                  "text": "string[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "exclude",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!TypeAcquisition#include:member",
              "docComment": "/**\n * Specifies a list of type declarations to be included in auto type acquisition. For example, `['jquery', 'lodash']`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "include?: "
                },
                {
                  "kind": "Content",
                  "text": "string[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "include",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!TypedArray:type",
          "docComment": "/**\n * Matches any [typed array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray), like `Uint8Array` or `Float64Array`.\n *\n * @category Array\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type TypedArray = "
            },
            {
              "kind": "Reference",
              "text": "BigInt64Array",
              "canonicalReference": "!BigInt64Array:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "BigUint64Array",
              "canonicalReference": "!BigUint64Array:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "Float32Array",
              "canonicalReference": "!Float32Array:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "Float64Array",
              "canonicalReference": "!Float64Array:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "Int8Array",
              "canonicalReference": "!Int8Array:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "Int16Array",
              "canonicalReference": "!Int16Array:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "Int32Array",
              "canonicalReference": "!Int32Array:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "Uint8Array",
              "canonicalReference": "!Uint8Array:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "Uint8ClampedArray",
              "canonicalReference": "!Uint8ClampedArray:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "Uint16Array",
              "canonicalReference": "!Uint16Array:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "Uint32Array",
              "canonicalReference": "!Uint32Array:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/array.ts",
          "releaseTag": "Public",
          "name": "TypedArray",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 22
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!TypeMap:type",
          "docComment": "/**\n * The interface for a type mapping (key =\\> function) to use for {@link getType}. export * The key represents the name of the type. The function represents the {@link TypeTester | test method}. The map should be ordered by testing preference, with more specific tests first. If a test returns true, it is selected, and the key is returned as the type.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type TypeMap = "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<string, "
            },
            {
              "kind": "Reference",
              "text": "TypeTester",
              "canonicalReference": "@storm-stack/types!TypeTester:type"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/base.ts",
          "releaseTag": "Public",
          "name": "TypeMap",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!TypeTester:type",
          "docComment": "/**\n * Determines if the passed value is of a specific type\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type TypeTester = "
            },
            {
              "kind": "Content",
              "text": "(value: any) => boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/base.ts",
          "releaseTag": "Public",
          "name": "TypeTester",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!UnionToIntersection:type",
          "docComment": "/**\n * Convert a union type to an intersection type using [distributive conditional types](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-8.html#distributive-conditional-types).\n *\n * Inspired by [this Stack Overflow answer](https://stackoverflow.com/a/50375286/2172153).\n *\n * @example\n * ```\n * import type {UnionToIntersection} from 'type-fest';\n *\n * type Union = {the(): void} | {great(arg: string): void} | {escape: boolean};\n *\n * type Intersection = UnionToIntersection<Union>;\n * //=> {the(): void; great(arg: string): void; escape: boolean};\n * ```\n *\n * A more applicable example which could make its way into your library code follows.\n *\n * @example\n * ```\n * import type {UnionToIntersection} from 'type-fest';\n *\n * class CommandOne {\n *  commands: {\n *    a1: () => undefined,\n *    b1: () => undefined,\n *  }\n * }\n *\n * class CommandTwo {\n *  commands: {\n *    a2: (argA: string) => undefined,\n *    b2: (argB: string) => undefined,\n *  }\n * }\n *\n * const union = [new CommandOne(), new CommandTwo()].map(instance => instance.commands);\n * type Union = typeof union;\n * //=> {a1(): void; b1(): void} | {a2(argA: string): void; b2(argB: string): void}\n *\n * type Intersection = UnionToIntersection<Union>;\n * //=> {a1(): void; b1(): void; a2(argA: string): void; b2(argB: string): void}\n * ```\n *\n * @category Type\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type UnionToIntersection<Union> = "
            },
            {
              "kind": "Content",
              "text": "(Union extends unknown ? (_distributedUnion: Union) => void : never) extends (_mergedIntersection: infer Intersection) => void ? // The `& Union` is to allow indexing by the resulting type\nIntersection & Union : never"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/object.ts",
          "releaseTag": "Public",
          "name": "UnionToIntersection",
          "typeParameters": [
            {
              "typeParameterName": "Union",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!UnknownArray:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type UnknownArray = "
            },
            {
              "kind": "Content",
              "text": "readonly unknown[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/array.ts",
          "releaseTag": "Public",
          "name": "UnknownArray",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!UnknownArrayOrTuple:type",
          "docComment": "/**\n * Matches any unknown array or tuple.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type UnknownArrayOrTuple = "
            },
            {
              "kind": "Content",
              "text": "readonly [...unknown[]]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/array.ts",
          "releaseTag": "Public",
          "name": "UnknownArrayOrTuple",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!UpperCaseCharacters:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type UpperCaseCharacters = "
            },
            {
              "kind": "Content",
              "text": "\"A\" | \"B\" | \"C\" | \"D\" | \"E\" | \"F\" | \"G\" | \"H\" | \"I\" | \"J\" | \"K\" | \"L\" | \"M\" | \"N\" | \"O\" | \"P\" | \"Q\" | \"R\" | \"S\" | \"T\" | \"U\" | \"V\" | \"W\" | \"X\" | \"Y\" | \"Z\""
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/string.ts",
          "releaseTag": "Public",
          "name": "UpperCaseCharacters",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!VariablePartOfArray:type",
          "docComment": "/**\n * Returns the variable, non-fixed-length portion of the given array, excluding static-length parts.\n *\n * @example\n * ```\n * type A = [string, number, boolean, ...string[]];\n * type B = VariablePartOfArray<A>;\n * //=> string[]\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type VariablePartOfArray<T extends "
            },
            {
              "kind": "Reference",
              "text": "UnknownArray",
              "canonicalReference": "@storm-stack/types!UnknownArray:type"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Content",
              "text": "T extends unknown ? T extends readonly [..."
            },
            {
              "kind": "Reference",
              "text": "StaticPartOfArray",
              "canonicalReference": "@storm-stack/types!StaticPartOfArray:type"
            },
            {
              "kind": "Content",
              "text": "<T>, ...infer U] ? U : [] : never"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/array.ts",
          "releaseTag": "Public",
          "name": "VariablePartOfArray",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!WarningMessageDetails:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type WarningMessageDetails = "
            },
            {
              "kind": "Content",
              "text": "{\n    type: \"warning\";\n} & "
            },
            {
              "kind": "Reference",
              "text": "Omit",
              "canonicalReference": "!Omit:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "MessageDetails",
              "canonicalReference": "@storm-stack/types!MessageDetails:type"
            },
            {
              "kind": "Content",
              "text": ", \"type\">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/messages.ts",
          "releaseTag": "Public",
          "name": "WarningMessageDetails",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!WatchDirectory:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type WatchDirectory = "
            },
            {
              "kind": "Content",
              "text": "\"useFsEvents\" | \"fixedPollingInterval\" | \"dynamicPriorityPolling\" | \"fixedChunkSizePolling\""
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/tsconfig.ts",
          "releaseTag": "Public",
          "name": "WatchDirectory",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!WatchDirectoryKind:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type WatchDirectoryKind = "
            },
            {
              "kind": "Content",
              "text": "\"UseFsEvents\" | \"FixedPollingInterval\" | \"DynamicPriorityPolling\" | \"FixedChunkSizePolling\""
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/tsconfig.ts",
          "releaseTag": "Public",
          "name": "WatchDirectoryKind",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!WatchFile:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type WatchFile = "
            },
            {
              "kind": "Content",
              "text": "\"fixedPollingInterval\" | \"priorityPollingInterval\" | \"dynamicPriorityPolling\" | \"useFsEvents\" | \"useFsEventsOnParentDirectory\" | \"fixedChunkSizePolling\""
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/tsconfig.ts",
          "releaseTag": "Public",
          "name": "WatchFile",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!WatchFileKind:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type WatchFileKind = "
            },
            {
              "kind": "Content",
              "text": "\"FixedPollingInterval\" | \"PriorityPollingInterval\" | \"DynamicPriorityPolling\" | \"FixedChunkSizePolling\" | \"UseFsEvents\" | \"UseFsEventsOnParentDirectory\""
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/tsconfig.ts",
          "releaseTag": "Public",
          "name": "WatchFileKind",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@storm-stack/types!WatchOptions:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface WatchOptions "
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/tsconfig.ts",
          "releaseTag": "Public",
          "name": "WatchOptions",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!WatchOptions#excludeDirectories:member",
              "docComment": "/**\n * Specifies a list of directories to exclude from watch\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "excludeDirectories?: "
                },
                {
                  "kind": "Content",
                  "text": "string[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "excludeDirectories",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!WatchOptions#excludeFiles:member",
              "docComment": "/**\n * Specifies a list of files to exclude from watch\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "excludeFiles?: "
                },
                {
                  "kind": "Content",
                  "text": "string[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "excludeFiles",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!WatchOptions#fallbackPolling:member",
              "docComment": "/**\n * Specify the polling strategy to use when the system runs out of or doesn't support native file watchers.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "fallbackPolling?: "
                },
                {
                  "kind": "Reference",
                  "text": "PollingWatchKind",
                  "canonicalReference": "@storm-stack/types!PollingWatchKind:type"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "Lowercase",
                  "canonicalReference": "!Lowercase:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "PollingWatchKind",
                  "canonicalReference": "@storm-stack/types!PollingWatchKind:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "fallbackPolling",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!WatchOptions#synchronousWatchDirectory:member",
              "docComment": "/**\n * Enable synchronous updates on directory watchers for platforms that don't support recursive watching natively.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "synchronousWatchDirectory?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "synchronousWatchDirectory",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!WatchOptions#watchDirectory:member",
              "docComment": "/**\n * Specify the strategy for watching directories under systems that lack recursive file-watching functionality.\n *\n * @defaultValue\n *\n * 'UseFsEvents'\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "watchDirectory?: "
                },
                {
                  "kind": "Reference",
                  "text": "WatchDirectoryKind",
                  "canonicalReference": "@storm-stack/types!WatchDirectoryKind:type"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "Lowercase",
                  "canonicalReference": "!Lowercase:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "WatchDirectoryKind",
                  "canonicalReference": "@storm-stack/types!WatchDirectoryKind:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "watchDirectory",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/types!WatchOptions#watchFile:member",
              "docComment": "/**\n * Specify the strategy for watching individual files.\n *\n * @defaultValue\n *\n * 'UseFsEvents'\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "watchFile?: "
                },
                {
                  "kind": "Reference",
                  "text": "WatchFileKind",
                  "canonicalReference": "@storm-stack/types!WatchFileKind:type"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "Lowercase",
                  "canonicalReference": "!Lowercase:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "WatchFileKind",
                  "canonicalReference": "@storm-stack/types!WatchFileKind:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "watchFile",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!Whitespace:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type Whitespace = "
            },
            {
              "kind": "Content",
              "text": "\"\\u{9}\" | \"\\u{A}\" | \"\\u{B}\" | \"\\u{C}\" | \"\\u{D}\" | \"\\u{20}\" | \"\\u{85}\" | \"\\u{A0}\" | \"\\u{1680}\" | \"\\u{2000}\" | \"\\u{2001}\" | \"\\u{2002}\" | \"\\u{2003}\" | \"\\u{2004}\" | \"\\u{2005}\" | \"\\u{2006}\" | \"\\u{2007}\" | \"\\u{2008}\" | \"\\u{2009}\" | \"\\u{200A}\" | \"\\u{2028}\" | \"\\u{2029}\" | \"\\u{202F}\" | \"\\u{205F}\" | \"\\u{3000}\" | \"\\u{FEFF}\""
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/string.ts",
          "releaseTag": "Public",
          "name": "Whitespace",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!WordSeparators:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type WordSeparators = "
            },
            {
              "kind": "Content",
              "text": "\"-\" | \"_\" | "
            },
            {
              "kind": "Reference",
              "text": "Whitespace",
              "canonicalReference": "@storm-stack/types!Whitespace:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/string.ts",
          "releaseTag": "Public",
          "name": "WordSeparators",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/types!Zero:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type Zero = "
            },
            {
              "kind": "Content",
              "text": "0 | 0n"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/types/src/utility-types/number.ts",
          "releaseTag": "Public",
          "name": "Zero",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        }
      ]
    }
  ]
}
