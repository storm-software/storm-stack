{
  "metadata": {
    "toolPackage": "@microsoft/api-extractor",
    "toolVersion": "7.38.5",
    "schemaVersion": 1011,
    "oldestForwardsCompatibleVersion": 1001,
    "tsdocConfig": {
      "$schema": "https://developer.microsoft.com/json-schemas/tsdoc/v0/tsdoc.schema.json",
      "noStandardTags": true,
      "tagDefinitions": [
        {
          "tagName": "@alpha",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@beta",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@defaultValue",
          "syntaxKind": "block"
        },
        {
          "tagName": "@decorator",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@deprecated",
          "syntaxKind": "block"
        },
        {
          "tagName": "@eventProperty",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@example",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@experimental",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@inheritDoc",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@internal",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@label",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@link",
          "syntaxKind": "inline",
          "allowMultiple": true
        },
        {
          "tagName": "@override",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@packageDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@param",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@privateRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@public",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@readonly",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@remarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@returns",
          "syntaxKind": "block"
        },
        {
          "tagName": "@sealed",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@see",
          "syntaxKind": "block"
        },
        {
          "tagName": "@throws",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@typeParam",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@virtual",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@betaDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@internalRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@preapproved",
          "syntaxKind": "modifier"
        }
      ],
      "supportForTags": {
        "@alpha": true,
        "@beta": true,
        "@defaultValue": true,
        "@decorator": true,
        "@deprecated": true,
        "@eventProperty": true,
        "@example": true,
        "@experimental": true,
        "@inheritDoc": true,
        "@internal": true,
        "@label": true,
        "@link": true,
        "@override": true,
        "@packageDocumentation": true,
        "@param": true,
        "@privateRemarks": true,
        "@public": true,
        "@readonly": true,
        "@remarks": true,
        "@returns": true,
        "@sealed": true,
        "@see": true,
        "@throws": true,
        "@typeParam": true,
        "@virtual": true,
        "@betaDocumentation": true,
        "@internalRemarks": true,
        "@preapproved": true
      },
      "reportUnsupportedHtmlElements": false
    }
  },
  "kind": "Package",
  "canonicalReference": "@storm-stack/logging!",
  "docComment": "",
  "name": "@storm-stack/logging",
  "preserveMemberOrder": false,
  "members": [
    {
      "kind": "EntryPoint",
      "canonicalReference": "@storm-stack/logging!",
      "name": "",
      "preserveMemberOrder": false,
      "members": [
        {
          "kind": "Variable",
          "canonicalReference": "@storm-stack/logging!createErrorSerializer:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "createErrorSerializer: "
            },
            {
              "kind": "Reference",
              "text": "SerializerFn",
              "canonicalReference": "!unknown"
            }
          ],
          "fileUrlPath": "packages/logging/src/utilities/log-serializer.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "createErrorSerializer",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@storm-stack/logging!getLogLevel:var",
          "docComment": "/**\n * Convert the log level label to a log level\n *\n * @param label - The log level label to convert\n *\n * @returns The log level\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "getLogLevel: "
            },
            {
              "kind": "Content",
              "text": "(label: string) => "
            },
            {
              "kind": "Reference",
              "text": "LogLevel",
              "canonicalReference": "@storm-stack/logging!LogLevel:type"
            }
          ],
          "fileUrlPath": "packages/logging/src/utilities/get-log-level.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "getLogLevel",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@storm-stack/logging!getLogLevelLabel:var",
          "docComment": "/**\n * Convert the log level to a log level label\n *\n * @param logLevel - The log level to convert\n *\n * @returns The log level label\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "getLogLevelLabel: "
            },
            {
              "kind": "Content",
              "text": "(logLevel: number) => "
            },
            {
              "kind": "Reference",
              "text": "LogLevelLabel",
              "canonicalReference": "@storm-stack/logging!LogLevelLabel:type"
            }
          ],
          "fileUrlPath": "packages/logging/src/utilities/get-log-level.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "getLogLevelLabel",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@storm-stack/logging!getPinoLogger:var",
          "docComment": "/**\n * Get the Pino transports for the logger\n *\n * @param config - The workspace config\n *\n * @param name - The name of the logger to get the options for\n *\n * @returns The options for the logger\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "getPinoLogger: "
            },
            {
              "kind": "Content",
              "text": "(config: "
            },
            {
              "kind": "Reference",
              "text": "StormConfig",
              "canonicalReference": "@storm-software/config-tools!StormConfig:type"
            },
            {
              "kind": "Content",
              "text": "<\"logging\", "
            },
            {
              "kind": "Reference",
              "text": "LoggingConfig",
              "canonicalReference": "@storm-stack/logging!LoggingConfig:type"
            },
            {
              "kind": "Content",
              "text": ">, name?: string) => import(\"pino\").Logger<"
            },
            {
              "kind": "Reference",
              "text": "PinoLoggerOptions",
              "canonicalReference": "!unknown"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "fileUrlPath": "packages/logging/src/utilities/pino-logger.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "getPinoLogger",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 8
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@storm-stack/logging!ILogger:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ILogger "
            }
          ],
          "fileUrlPath": "packages/logging/src/types.ts",
          "releaseTag": "Public",
          "name": "ILogger",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/logging!ILogger#debug:member",
              "docComment": "/**\n * Write a debug message to the logs.\n *\n * @param message - The message to be printed.\n *\n * @returns Either a promise that resolves to void or void.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "debug?: "
                },
                {
                  "kind": "Content",
                  "text": "(message: string) => "
                },
                {
                  "kind": "Reference",
                  "text": "MaybePromise",
                  "canonicalReference": "@storm-stack/logging!~MaybePromise:type"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "debug",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/logging!ILogger#error:member",
              "docComment": "/**\n * Write an error message to the logs.\n *\n * @param message - The message to be displayed.\n *\n * @returns Either a promise that resolves to void or void.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "error: "
                },
                {
                  "kind": "Content",
                  "text": "(message: string) => "
                },
                {
                  "kind": "Reference",
                  "text": "MaybePromise",
                  "canonicalReference": "@storm-stack/logging!~MaybePromise:type"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "error",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/logging!ILogger#exception:member",
              "docComment": "/**\n * Write an exception message to the logs.\n *\n * @param message - The message to be displayed.\n *\n * @returns Either a promise that resolves to void or void.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "exception?: "
                },
                {
                  "kind": "Content",
                  "text": "(message: string) => "
                },
                {
                  "kind": "Reference",
                  "text": "MaybePromise",
                  "canonicalReference": "@storm-stack/logging!~MaybePromise:type"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "exception",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/logging!ILogger#fatal:member",
              "docComment": "/**\n * Write a fatal message to the logs.\n *\n * @param message - The fatal message to be displayed.\n *\n * @returns Either a promise that resolves to void or void.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "fatal?: "
                },
                {
                  "kind": "Content",
                  "text": "(message: string) => "
                },
                {
                  "kind": "Reference",
                  "text": "MaybePromise",
                  "canonicalReference": "@storm-stack/logging!~MaybePromise:type"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "fatal",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/logging!ILogger#info:member",
              "docComment": "/**\n * Write an informational message to the logs.\n *\n * @param message - The message to be printed.\n *\n * @returns Either a promise that resolves to void or void.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "info: "
                },
                {
                  "kind": "Content",
                  "text": "(message: string) => "
                },
                {
                  "kind": "Reference",
                  "text": "MaybePromise",
                  "canonicalReference": "@storm-stack/logging!~MaybePromise:type"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "info",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/logging!ILogger#log:member",
              "docComment": "/**\n * Write an informational message to the logs.\n *\n * @param message - The message to be printed.\n *\n * @returns Either a promise that resolves to void or void.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "log?: "
                },
                {
                  "kind": "Content",
                  "text": "(message: string) => "
                },
                {
                  "kind": "Reference",
                  "text": "MaybePromise",
                  "canonicalReference": "@storm-stack/logging!~MaybePromise:type"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "log",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/logging!ILogger#success:member",
              "docComment": "/**\n * Write a success message to the logs.\n *\n * @param message - The message to print.\n *\n * @returns Either a promise that resolves to void or void.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "success?: "
                },
                {
                  "kind": "Content",
                  "text": "(message: string) => "
                },
                {
                  "kind": "Reference",
                  "text": "MaybePromise",
                  "canonicalReference": "@storm-stack/logging!~MaybePromise:type"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "success",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/logging!ILogger#trace:member",
              "docComment": "/**\n * Write a trace message to the logs.\n *\n * @param message - The message to be printed.\n *\n * @returns Either a promise that resolves to void or void.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "trace?: "
                },
                {
                  "kind": "Content",
                  "text": "(message: string) => "
                },
                {
                  "kind": "Reference",
                  "text": "MaybePromise",
                  "canonicalReference": "@storm-stack/logging!~MaybePromise:type"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "trace",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/logging!ILogger#warn:member",
              "docComment": "/**\n * Write a warning message to the logs.\n *\n * @param message - The message to be printed.\n *\n * @returns Either a promise that resolves to void or void.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "warn: "
                },
                {
                  "kind": "Content",
                  "text": "(message: string) => "
                },
                {
                  "kind": "Reference",
                  "text": "MaybePromise",
                  "canonicalReference": "@storm-stack/logging!~MaybePromise:type"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "warn",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@storm-stack/logging!ILoggerWrapper:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ILoggerWrapper "
            }
          ],
          "fileUrlPath": "packages/logging/src/types.ts",
          "releaseTag": "Public",
          "name": "ILoggerWrapper",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/logging!ILoggerWrapper#debug:member",
              "docComment": "/**\n * Write a debug message to the logs.\n *\n * @param message - The message to be printed.\n *\n * @returns Either a promise that resolves to void or void.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "debug: "
                },
                {
                  "kind": "Content",
                  "text": "(message: any) => "
                },
                {
                  "kind": "Reference",
                  "text": "MaybePromise",
                  "canonicalReference": "@storm-stack/logging!~MaybePromise:type"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "debug",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/logging!ILoggerWrapper#error:member",
              "docComment": "/**\n * Write an error message to the logs.\n *\n * @param message - The message to be displayed.\n *\n * @returns Either a promise that resolves to void or void.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "error: "
                },
                {
                  "kind": "Content",
                  "text": "(error: string | "
                },
                {
                  "kind": "Reference",
                  "text": "Error",
                  "canonicalReference": "!Error:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "MaybePromise",
                  "canonicalReference": "@storm-stack/logging!~MaybePromise:type"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "error",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/logging!ILoggerWrapper#exception:member",
              "docComment": "/**\n * Write an exception message to the logs.\n *\n * @param message - The message to be displayed.\n *\n * @returns Either a promise that resolves to void or void.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "exception: "
                },
                {
                  "kind": "Content",
                  "text": "(error: string | "
                },
                {
                  "kind": "Reference",
                  "text": "Error",
                  "canonicalReference": "!Error:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "MaybePromise",
                  "canonicalReference": "@storm-stack/logging!~MaybePromise:type"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "exception",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/logging!ILoggerWrapper#fatal:member",
              "docComment": "/**\n * Write a fatal message to the logs.\n *\n * @param message - The fatal message to be displayed.\n *\n * @returns Either a promise that resolves to void or void.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "fatal: "
                },
                {
                  "kind": "Content",
                  "text": "(error: string | "
                },
                {
                  "kind": "Reference",
                  "text": "Error",
                  "canonicalReference": "!Error:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "MaybePromise",
                  "canonicalReference": "@storm-stack/logging!~MaybePromise:type"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "fatal",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/logging!ILoggerWrapper#info:member",
              "docComment": "/**\n * Write an informational message to the logs.\n *\n * @param message - The message to be printed.\n *\n * @returns Either a promise that resolves to void or void.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "info: "
                },
                {
                  "kind": "Content",
                  "text": "(message: any) => "
                },
                {
                  "kind": "Reference",
                  "text": "MaybePromise",
                  "canonicalReference": "@storm-stack/logging!~MaybePromise:type"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "info",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/logging!ILoggerWrapper#log:member",
              "docComment": "/**\n * Write an informational message to the logs.\n *\n * @param message - The message to be printed.\n *\n * @returns Either a promise that resolves to void or void.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "log: "
                },
                {
                  "kind": "Content",
                  "text": "(message: any) => "
                },
                {
                  "kind": "Reference",
                  "text": "MaybePromise",
                  "canonicalReference": "@storm-stack/logging!~MaybePromise:type"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "log",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/logging!ILoggerWrapper#success:member",
              "docComment": "/**\n * Write a success message to the logs.\n *\n * @param message - The message to print.\n *\n * @returns Either a promise that resolves to void or void.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "success: "
                },
                {
                  "kind": "Content",
                  "text": "(message: any) => "
                },
                {
                  "kind": "Reference",
                  "text": "MaybePromise",
                  "canonicalReference": "@storm-stack/logging!~MaybePromise:type"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "success",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/logging!ILoggerWrapper#trace:member",
              "docComment": "/**\n * Write a trace message to the logs.\n *\n * @param message - The message to be printed.\n *\n * @returns Either a promise that resolves to void or void.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "trace: "
                },
                {
                  "kind": "Content",
                  "text": "(message: any) => "
                },
                {
                  "kind": "Reference",
                  "text": "MaybePromise",
                  "canonicalReference": "@storm-stack/logging!~MaybePromise:type"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "trace",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/logging!ILoggerWrapper#warn:member",
              "docComment": "/**\n * Write a warning message to the logs.\n *\n * @param message - The message to be printed.\n *\n * @returns Either a promise that resolves to void or void.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "warn: "
                },
                {
                  "kind": "Content",
                  "text": "(message: any) => "
                },
                {
                  "kind": "Reference",
                  "text": "MaybePromise",
                  "canonicalReference": "@storm-stack/logging!~MaybePromise:type"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "warn",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@storm-stack/logging!IStormLog:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IStormLog "
            }
          ],
          "fileUrlPath": "packages/logging/src/types.ts",
          "releaseTag": "Public",
          "name": "IStormLog",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/logging!IStormLog#debug:member",
              "docComment": "/**\n * Write a debug message to the logs.\n *\n * @param message - The message to be printed.\n *\n * @returns Either a promise that resolves to void or void.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "debug: "
                },
                {
                  "kind": "Content",
                  "text": "(...message: any[]) => "
                },
                {
                  "kind": "Reference",
                  "text": "MaybePromise",
                  "canonicalReference": "@storm-stack/logging!~MaybePromise:type"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "debug",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/logging!IStormLog#error:member",
              "docComment": "/**\n * Write an error message to the logs.\n *\n * @param message - The message to be displayed.\n *\n * @returns Either a promise that resolves to void or void.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "error: "
                },
                {
                  "kind": "Content",
                  "text": "(...message: any[]) => "
                },
                {
                  "kind": "Reference",
                  "text": "MaybePromise",
                  "canonicalReference": "@storm-stack/logging!~MaybePromise:type"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "error",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/logging!IStormLog#exception:member",
              "docComment": "/**\n * Write an exception message to the logs.\n *\n * @param message - The message to be displayed.\n *\n * @returns Either a promise that resolves to void or void.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "exception: "
                },
                {
                  "kind": "Content",
                  "text": "(...message: any[]) => "
                },
                {
                  "kind": "Reference",
                  "text": "MaybePromise",
                  "canonicalReference": "@storm-stack/logging!~MaybePromise:type"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "exception",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/logging!IStormLog#fatal:member",
              "docComment": "/**\n * Write a fatal message to the logs.\n *\n * @param message - The fatal message to be displayed.\n *\n * @returns Either a promise that resolves to void or void.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "fatal: "
                },
                {
                  "kind": "Content",
                  "text": "(...message: any[]) => "
                },
                {
                  "kind": "Reference",
                  "text": "MaybePromise",
                  "canonicalReference": "@storm-stack/logging!~MaybePromise:type"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "fatal",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/logging!IStormLog#info:member",
              "docComment": "/**\n * Write an informational message to the logs.\n *\n * @param message - The message to be printed.\n *\n * @returns Either a promise that resolves to void or void.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "info: "
                },
                {
                  "kind": "Content",
                  "text": "(...message: any[]) => "
                },
                {
                  "kind": "Reference",
                  "text": "MaybePromise",
                  "canonicalReference": "@storm-stack/logging!~MaybePromise:type"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "info",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/logging!IStormLog#log:member",
              "docComment": "/**\n * Write an informational message to the logs.\n *\n * @param message - The message to be printed.\n *\n * @returns Either a promise that resolves to void or void.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "log: "
                },
                {
                  "kind": "Content",
                  "text": "(...message: any[]) => "
                },
                {
                  "kind": "Reference",
                  "text": "MaybePromise",
                  "canonicalReference": "@storm-stack/logging!~MaybePromise:type"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "log",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/logging!IStormLog#success:member",
              "docComment": "/**\n * Write a success message to the logs.\n *\n * @param message - The message to print.\n *\n * @returns Either a promise that resolves to void or void.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "success: "
                },
                {
                  "kind": "Content",
                  "text": "(...message: any[]) => "
                },
                {
                  "kind": "Reference",
                  "text": "MaybePromise",
                  "canonicalReference": "@storm-stack/logging!~MaybePromise:type"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "success",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/logging!IStormLog#trace:member",
              "docComment": "/**\n * Write a trace message to the logs.\n *\n * @param message - The message to be printed.\n *\n * @returns Either a promise that resolves to void or void.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "trace: "
                },
                {
                  "kind": "Content",
                  "text": "(...message: any[]) => "
                },
                {
                  "kind": "Reference",
                  "text": "MaybePromise",
                  "canonicalReference": "@storm-stack/logging!~MaybePromise:type"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "trace",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/logging!IStormLog#warn:member",
              "docComment": "/**\n * Write a warning message to the logs.\n *\n * @param message - The message to be printed.\n *\n * @returns Either a promise that resolves to void or void.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "warn: "
                },
                {
                  "kind": "Content",
                  "text": "(...message: any[]) => "
                },
                {
                  "kind": "Reference",
                  "text": "MaybePromise",
                  "canonicalReference": "@storm-stack/logging!~MaybePromise:type"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "warn",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/logging!LoggerOptions:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type LoggerOptions = "
            },
            {
              "kind": "Content",
              "text": "{\n    options: "
            },
            {
              "kind": "Reference",
              "text": "PinoLoggerOptions",
              "canonicalReference": "!unknown"
            },
            {
              "kind": "Content",
              "text": ";\n    stream?: "
            },
            {
              "kind": "Reference",
              "text": "DestinationStream",
              "canonicalReference": "!unknown"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/logging/src/utilities/pino-logger.ts",
          "releaseTag": "Public",
          "name": "LoggerOptions",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "@storm-stack/logging!LoggerWrapper:class",
          "docComment": "/**\n * A wrapper for a logger class.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class LoggerWrapper implements "
            },
            {
              "kind": "Reference",
              "text": "ILoggerWrapper",
              "canonicalReference": "@storm-stack/logging!ILoggerWrapper:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "packages/logging/src/composition/logger-wrapper.ts",
          "releaseTag": "Public",
          "isAbstract": false,
          "name": "LoggerWrapper",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Property",
              "canonicalReference": "@storm-stack/logging!LoggerWrapper#debug:member",
              "docComment": "/**\n * Write a debug message to the logs.\n *\n * @param message - The message to be printed.\n *\n * @returns Either a promise that resolves to void or void.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "debug: "
                },
                {
                  "kind": "Content",
                  "text": "(message: string) => "
                },
                {
                  "kind": "Reference",
                  "text": "MaybePromise",
                  "canonicalReference": "@storm-stack/logging!~MaybePromise:type"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "debug",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@storm-stack/logging!LoggerWrapper#error:member",
              "docComment": "/**\n * Write an error message to the logs.\n *\n * @param error - The message to be displayed.\n *\n * @returns Either a promise that resolves to void or void.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "error: "
                },
                {
                  "kind": "Content",
                  "text": "(error: string | "
                },
                {
                  "kind": "Reference",
                  "text": "Error",
                  "canonicalReference": "!Error:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "MaybePromise",
                  "canonicalReference": "@storm-stack/logging!~MaybePromise:type"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "error",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@storm-stack/logging!LoggerWrapper#exception:member",
              "docComment": "/**\n * Write an error message to the logs.\n *\n * @param error - The message to be displayed.\n *\n * @returns Either a promise that resolves to void or void.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "exception: "
                },
                {
                  "kind": "Content",
                  "text": "(error: string | "
                },
                {
                  "kind": "Reference",
                  "text": "Error",
                  "canonicalReference": "!Error:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "MaybePromise",
                  "canonicalReference": "@storm-stack/logging!~MaybePromise:type"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "exception",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@storm-stack/logging!LoggerWrapper#fatal:member",
              "docComment": "/**\n * Write a fatal message to the logs.\n *\n * @param error - The fatal message to be displayed.\n *\n * @returns Either a promise that resolves to void or void.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "fatal: "
                },
                {
                  "kind": "Content",
                  "text": "(error: string | "
                },
                {
                  "kind": "Reference",
                  "text": "Error",
                  "canonicalReference": "!Error:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "MaybePromise",
                  "canonicalReference": "@storm-stack/logging!~MaybePromise:type"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "fatal",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@storm-stack/logging!LoggerWrapper#getErrorMessage:member",
              "docComment": "/**\n * Format an error message.\n *\n * @param obj - The error to format.\n *\n * @returns The formatted error message.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected getErrorMessage: "
                },
                {
                  "kind": "Content",
                  "text": "(obj?: string | "
                },
                {
                  "kind": "Reference",
                  "text": "Error",
                  "canonicalReference": "!Error:interface"
                },
                {
                  "kind": "Content",
                  "text": " | null) => string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "getErrorMessage",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "isStatic": false,
              "isProtected": true,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@storm-stack/logging!LoggerWrapper#info:member",
              "docComment": "/**\n * Write an informational message to the logs.\n *\n * @param message - The message to be printed.\n *\n * @returns Either a promise that resolves to void or void.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "info: "
                },
                {
                  "kind": "Content",
                  "text": "(message: string) => "
                },
                {
                  "kind": "Reference",
                  "text": "MaybePromise",
                  "canonicalReference": "@storm-stack/logging!~MaybePromise:type"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "info",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@storm-stack/logging!LoggerWrapper#log:member",
              "docComment": "/**\n * Write a log message to the logs.\n *\n * @param message - The message to be printed.\n *\n * @returns Either a promise that resolves to void or void.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "log: "
                },
                {
                  "kind": "Content",
                  "text": "(message: string) => "
                },
                {
                  "kind": "Reference",
                  "text": "MaybePromise",
                  "canonicalReference": "@storm-stack/logging!~MaybePromise:type"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "log",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@storm-stack/logging!LoggerWrapper#success:member",
              "docComment": "/**\n * Write a success message to the logs.\n *\n * @param message - The message to print.\n *\n * @returns Either a promise that resolves to void or void.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "success: "
                },
                {
                  "kind": "Content",
                  "text": "(message: string) => "
                },
                {
                  "kind": "Reference",
                  "text": "MaybePromise",
                  "canonicalReference": "@storm-stack/logging!~MaybePromise:type"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "success",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@storm-stack/logging!LoggerWrapper#trace:member",
              "docComment": "/**\n * Write a trace message to the logs.\n *\n * @param message - The message to be printed.\n *\n * @returns Either a promise that resolves to void or void.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "trace: "
                },
                {
                  "kind": "Content",
                  "text": "(message: string) => "
                },
                {
                  "kind": "Reference",
                  "text": "MaybePromise",
                  "canonicalReference": "@storm-stack/logging!~MaybePromise:type"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "trace",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@storm-stack/logging!LoggerWrapper#warn:member",
              "docComment": "/**\n * Write a warning message to the logs.\n *\n * @param message - The message to be printed.\n *\n * @returns Either a promise that resolves to void or void.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "warn: "
                },
                {
                  "kind": "Content",
                  "text": "(message: string) => "
                },
                {
                  "kind": "Reference",
                  "text": "MaybePromise",
                  "canonicalReference": "@storm-stack/logging!~MaybePromise:type"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "warn",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@storm-stack/logging!LoggerWrapper.wrap:member",
              "docComment": "/**\n * Wrap a logger.\n *\n * @param logger - The logger to wrap.\n *\n * @param config - The logging configuration.\n *\n * @param name - The logger's name.\n *\n * @returns The wrapped logger.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static wrap: "
                },
                {
                  "kind": "Content",
                  "text": "(logger: "
                },
                {
                  "kind": "Reference",
                  "text": "ILogger",
                  "canonicalReference": "@storm-stack/logging!ILogger:interface"
                },
                {
                  "kind": "Content",
                  "text": ", config: "
                },
                {
                  "kind": "Reference",
                  "text": "LoggingConfig",
                  "canonicalReference": "@storm-stack/logging!LoggingConfig:type"
                },
                {
                  "kind": "Content",
                  "text": ", name?: string) => "
                },
                {
                  "kind": "Reference",
                  "text": "LoggerWrapper",
                  "canonicalReference": "@storm-stack/logging!LoggerWrapper:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "wrap",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              },
              "isStatic": true,
              "isProtected": false,
              "isAbstract": false
            }
          ],
          "implementsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/logging!LoggingConfig:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type LoggingConfig = "
            },
            {
              "kind": "Reference",
              "text": "z.infer",
              "canonicalReference": "!z.infer:type"
            },
            {
              "kind": "Content",
              "text": "<typeof "
            },
            {
              "kind": "Reference",
              "text": "LoggingConfigSchema",
              "canonicalReference": "@storm-stack/logging!LoggingConfigSchema:var"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/logging/src/types.ts",
          "releaseTag": "Public",
          "name": "LoggingConfig",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@storm-stack/logging!LoggingConfigSchema:var",
          "docComment": "/**\n * Storm base schema used to represent a package's config (either workspace or project)\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "LoggingConfigSchema: "
            },
            {
              "kind": "Reference",
              "text": "z.ZodObject",
              "canonicalReference": "!z.ZodObject:type"
            },
            {
              "kind": "Content",
              "text": "<{\n    stacktrace: "
            },
            {
              "kind": "Reference",
              "text": "z.ZodOptional",
              "canonicalReference": "!z.ZodOptional:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "z.ZodBoolean",
              "canonicalReference": "!z.ZodBoolean:type"
            },
            {
              "kind": "Content",
              "text": ">;\n    fileName: "
            },
            {
              "kind": "Reference",
              "text": "z.ZodDefault",
              "canonicalReference": "!z.ZodDefault:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "z.ZodOptional",
              "canonicalReference": "!z.ZodOptional:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "z.ZodString",
              "canonicalReference": "!z.ZodString:type"
            },
            {
              "kind": "Content",
              "text": ">>;\n    fileExtension: "
            },
            {
              "kind": "Reference",
              "text": "z.ZodDefault",
              "canonicalReference": "!z.ZodDefault:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "z.ZodString",
              "canonicalReference": "!z.ZodString:type"
            },
            {
              "kind": "Content",
              "text": ">;\n    path: "
            },
            {
              "kind": "Reference",
              "text": "z.ZodOptional",
              "canonicalReference": "!z.ZodOptional:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "z.ZodString",
              "canonicalReference": "!z.ZodString:type"
            },
            {
              "kind": "Content",
              "text": ">;\n    loki: "
            },
            {
              "kind": "Reference",
              "text": "z.ZodOptional",
              "canonicalReference": "!z.ZodOptional:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "z.ZodObject",
              "canonicalReference": "!z.ZodObject:type"
            },
            {
              "kind": "Content",
              "text": "<{\n        host: "
            },
            {
              "kind": "Reference",
              "text": "z.ZodDefault",
              "canonicalReference": "!z.ZodDefault:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "z.ZodString",
              "canonicalReference": "!z.ZodString:type"
            },
            {
              "kind": "Content",
              "text": ">;\n        username: "
            },
            {
              "kind": "Reference",
              "text": "z.ZodString",
              "canonicalReference": "!z.ZodString:type"
            },
            {
              "kind": "Content",
              "text": ";\n        password: "
            },
            {
              "kind": "Reference",
              "text": "z.ZodString",
              "canonicalReference": "!z.ZodString:type"
            },
            {
              "kind": "Content",
              "text": ";\n    }, \"strip\", "
            },
            {
              "kind": "Reference",
              "text": "z.ZodTypeAny",
              "canonicalReference": "!z.ZodTypeAny:type"
            },
            {
              "kind": "Content",
              "text": ", {\n        host: string;\n        username: string;\n        password: string;\n    }, {\n        username: string;\n        password: string;\n        host?: string | undefined;\n    }>>;\n}, \"strip\", "
            },
            {
              "kind": "Reference",
              "text": "z.ZodTypeAny",
              "canonicalReference": "!z.ZodTypeAny:type"
            },
            {
              "kind": "Content",
              "text": ", {\n    fileName: string;\n    fileExtension: string;\n    stacktrace?: boolean | undefined;\n    path?: string | undefined;\n    loki?: {\n        host: string;\n        username: string;\n        password: string;\n    } | undefined;\n}, {\n    stacktrace?: boolean | undefined;\n    fileName?: string | undefined;\n    fileExtension?: string | undefined;\n    path?: string | undefined;\n    loki?: {\n        username: string;\n        password: string;\n        host?: string | undefined;\n    } | undefined;\n}>"
            }
          ],
          "fileUrlPath": "packages/logging/src/schema.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "LoggingConfigSchema",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 37
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/logging!LogLevel:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type LogLevel = "
            },
            {
              "kind": "Content",
              "text": "0 | 10 | 20 | 30 | 40 | 60 | 70"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/logging/src/utilities/get-log-level.ts",
          "releaseTag": "Public",
          "name": "LogLevel",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@storm-stack/logging!LogLevel:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "LogLevel: "
            },
            {
              "kind": "Content",
              "text": "{\n    SILENT: "
            },
            {
              "kind": "Reference",
              "text": "LogLevel",
              "canonicalReference": "@storm-stack/logging!LogLevel:type"
            },
            {
              "kind": "Content",
              "text": ";\n    FATAL: "
            },
            {
              "kind": "Reference",
              "text": "LogLevel",
              "canonicalReference": "@storm-stack/logging!LogLevel:type"
            },
            {
              "kind": "Content",
              "text": ";\n    ERROR: "
            },
            {
              "kind": "Reference",
              "text": "LogLevel",
              "canonicalReference": "@storm-stack/logging!LogLevel:type"
            },
            {
              "kind": "Content",
              "text": ";\n    WARN: "
            },
            {
              "kind": "Reference",
              "text": "LogLevel",
              "canonicalReference": "@storm-stack/logging!LogLevel:type"
            },
            {
              "kind": "Content",
              "text": ";\n    INFO: "
            },
            {
              "kind": "Reference",
              "text": "LogLevel",
              "canonicalReference": "@storm-stack/logging!LogLevel:type"
            },
            {
              "kind": "Content",
              "text": ";\n    DEBUG: "
            },
            {
              "kind": "Reference",
              "text": "LogLevel",
              "canonicalReference": "@storm-stack/logging!LogLevel:type"
            },
            {
              "kind": "Content",
              "text": ";\n    TRACE: "
            },
            {
              "kind": "Reference",
              "text": "LogLevel",
              "canonicalReference": "@storm-stack/logging!LogLevel:type"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            }
          ],
          "fileUrlPath": "packages/logging/src/utilities/get-log-level.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "LogLevel",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 16
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/logging!LogLevelLabel:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type LogLevelLabel = "
            },
            {
              "kind": "Content",
              "text": "\"silent\" | \"fatal\" | \"error\" | \"warn\" | \"info\" | \"debug\" | \"trace\""
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/logging/src/utilities/get-log-level.ts",
          "releaseTag": "Public",
          "name": "LogLevelLabel",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@storm-stack/logging!LogLevelLabel:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "LogLevelLabel: "
            },
            {
              "kind": "Content",
              "text": "{\n    SILENT: "
            },
            {
              "kind": "Reference",
              "text": "LogLevelLabel",
              "canonicalReference": "@storm-stack/logging!LogLevelLabel:type"
            },
            {
              "kind": "Content",
              "text": ";\n    FATAL: "
            },
            {
              "kind": "Reference",
              "text": "LogLevelLabel",
              "canonicalReference": "@storm-stack/logging!LogLevelLabel:type"
            },
            {
              "kind": "Content",
              "text": ";\n    ERROR: "
            },
            {
              "kind": "Reference",
              "text": "LogLevelLabel",
              "canonicalReference": "@storm-stack/logging!LogLevelLabel:type"
            },
            {
              "kind": "Content",
              "text": ";\n    WARN: "
            },
            {
              "kind": "Reference",
              "text": "LogLevelLabel",
              "canonicalReference": "@storm-stack/logging!LogLevelLabel:type"
            },
            {
              "kind": "Content",
              "text": ";\n    INFO: "
            },
            {
              "kind": "Reference",
              "text": "LogLevelLabel",
              "canonicalReference": "@storm-stack/logging!LogLevelLabel:type"
            },
            {
              "kind": "Content",
              "text": ";\n    DEBUG: "
            },
            {
              "kind": "Reference",
              "text": "LogLevelLabel",
              "canonicalReference": "@storm-stack/logging!LogLevelLabel:type"
            },
            {
              "kind": "Content",
              "text": ";\n    TRACE: "
            },
            {
              "kind": "Reference",
              "text": "LogLevelLabel",
              "canonicalReference": "@storm-stack/logging!LogLevelLabel:type"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            }
          ],
          "fileUrlPath": "packages/logging/src/utilities/get-log-level.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "LogLevelLabel",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 16
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@storm-stack/logging!LokiConfigSchema:var",
          "docComment": "/**\n * Storm schema used to represent a the required config needed to use Loki\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "LokiConfigSchema: "
            },
            {
              "kind": "Reference",
              "text": "z.ZodObject",
              "canonicalReference": "!z.ZodObject:type"
            },
            {
              "kind": "Content",
              "text": "<{\n    host: "
            },
            {
              "kind": "Reference",
              "text": "z.ZodDefault",
              "canonicalReference": "!z.ZodDefault:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "z.ZodString",
              "canonicalReference": "!z.ZodString:type"
            },
            {
              "kind": "Content",
              "text": ">;\n    username: "
            },
            {
              "kind": "Reference",
              "text": "z.ZodString",
              "canonicalReference": "!z.ZodString:type"
            },
            {
              "kind": "Content",
              "text": ";\n    password: "
            },
            {
              "kind": "Reference",
              "text": "z.ZodString",
              "canonicalReference": "!z.ZodString:type"
            },
            {
              "kind": "Content",
              "text": ";\n}, \"strip\", "
            },
            {
              "kind": "Reference",
              "text": "z.ZodTypeAny",
              "canonicalReference": "!z.ZodTypeAny:type"
            },
            {
              "kind": "Content",
              "text": ", {\n    host: string;\n    username: string;\n    password: string;\n}, {\n    username: string;\n    password: string;\n    host?: string | undefined;\n}>"
            }
          ],
          "fileUrlPath": "packages/logging/src/schema.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "LokiConfigSchema",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 13
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "@storm-stack/logging!StormLog:class",
          "docComment": "/**\n * The default logger class.\n *\n * @remarks\n *\n * This logger writes to the console.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class StormLog implements "
            },
            {
              "kind": "Reference",
              "text": "IStormLog",
              "canonicalReference": "@storm-stack/logging!IStormLog:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "packages/logging/src/storm-log.ts",
          "releaseTag": "Public",
          "isAbstract": false,
          "name": "StormLog",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@storm-stack/logging!StormLog#addLogger:member(1)",
              "docComment": "/**\n * Add a logger to the internal loggers list\n *\n * @param logger - The logger to add\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "addLogger(logger: "
                },
                {
                  "kind": "Reference",
                  "text": "ILogger",
                  "canonicalReference": "@storm-stack/logging!ILogger:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "logger",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "addLogger"
            },
            {
              "kind": "Method",
              "canonicalReference": "@storm-stack/logging!StormLog#addWrappedLogger:member(1)",
              "docComment": "/**\n * Add a logger wrapper to the internal loggers list\n *\n * @param wrapper - The logger wrapper to use\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "addWrappedLogger(wrapper: "
                },
                {
                  "kind": "Reference",
                  "text": "ILoggerWrapper",
                  "canonicalReference": "@storm-stack/logging!ILoggerWrapper:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "wrapper",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "addWrappedLogger"
            },
            {
              "kind": "Method",
              "canonicalReference": "@storm-stack/logging!StormLog.create:member(1)",
              "docComment": "/**\n * Create a new instance of the logger\n *\n * @param config - The Storm config\n *\n * @param name - The name of the project to initialized the loggers for\n *\n * @param additionalLoggers - Additional loggers to use\n *\n * @returns The initialized logger\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static create(config: "
                },
                {
                  "kind": "Reference",
                  "text": "StormConfig",
                  "canonicalReference": "@storm-software/config-tools!StormConfig:type"
                },
                {
                  "kind": "Content",
                  "text": "<\"logging\", "
                },
                {
                  "kind": "Reference",
                  "text": "LoggingConfig",
                  "canonicalReference": "@storm-stack/logging!LoggingConfig:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ", name?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", additionalLoggers?: "
                },
                {
                  "kind": "Reference",
                  "text": "ILoggerWrapper",
                  "canonicalReference": "@storm-stack/logging!ILoggerWrapper:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "StormLog",
                  "canonicalReference": "@storm-stack/logging!StormLog:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 11,
                "endIndex": 12
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "config",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 5
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "name",
                  "parameterTypeTokenRange": {
                    "startIndex": 6,
                    "endIndex": 7
                  },
                  "isOptional": true
                },
                {
                  "parameterName": "additionalLoggers",
                  "parameterTypeTokenRange": {
                    "startIndex": 8,
                    "endIndex": 10
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "create"
            },
            {
              "kind": "Method",
              "canonicalReference": "@storm-stack/logging!StormLog#debug:member(1)",
              "docComment": "/**\n * Write a debug message to the logs.\n *\n * @param message - The message to be printed.\n *\n * @returns Either a promise that resolves to void or void.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "debug(message: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "message",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "debug"
            },
            {
              "kind": "Method",
              "canonicalReference": "@storm-stack/logging!StormLog.debug:member(1)",
              "docComment": "/**\n * Write a debug message to the logs.\n *\n * @param message - The message to be printed.\n *\n * @returns Either a promise that resolves to void or void.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static debug(message: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "message",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "debug"
            },
            {
              "kind": "Method",
              "canonicalReference": "@storm-stack/logging!StormLog#error:member(1)",
              "docComment": "/**\n * Write an error message to the logs.\n *\n * @param message - The message to be displayed.\n *\n * @returns Either a promise that resolves to void or void.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "error(message: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "message",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "error"
            },
            {
              "kind": "Method",
              "canonicalReference": "@storm-stack/logging!StormLog.error:member(1)",
              "docComment": "/**\n * Write an error message to the logs.\n *\n * @param message - The message to be displayed.\n *\n * @returns Either a promise that resolves to void or void.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static error(message: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "message",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "error"
            },
            {
              "kind": "Method",
              "canonicalReference": "@storm-stack/logging!StormLog#exception:member(1)",
              "docComment": "/**\n * Write an exception message to the logs.\n *\n * @param message - The message to be displayed.\n *\n * @returns Either a promise that resolves to void or void.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "exception(message: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "message",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "exception"
            },
            {
              "kind": "Method",
              "canonicalReference": "@storm-stack/logging!StormLog.exception:member(1)",
              "docComment": "/**\n * Write an exception message to the logs.\n *\n * @param message - The message to be displayed.\n *\n * @returns Either a promise that resolves to void or void.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static exception(message: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "message",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "exception"
            },
            {
              "kind": "Method",
              "canonicalReference": "@storm-stack/logging!StormLog#fatal:member(1)",
              "docComment": "/**\n * Write a fatal message to the logs.\n *\n * @param message - The fatal message to be displayed.\n *\n * @returns Either a promise that resolves to void or void.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "fatal(message: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "message",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "fatal"
            },
            {
              "kind": "Method",
              "canonicalReference": "@storm-stack/logging!StormLog.fatal:member(1)",
              "docComment": "/**\n * Write a fatal message to the logs.\n *\n * @param message - The fatal message to be displayed.\n *\n * @returns Either a promise that resolves to void or void.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static fatal(message: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "message",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "fatal"
            },
            {
              "kind": "Method",
              "canonicalReference": "@storm-stack/logging!StormLog#info:member(1)",
              "docComment": "/**\n * Write an informational message to the logs.\n *\n * @param message - The message to be printed.\n *\n * @returns Either a promise that resolves to void or void.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "info(message: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "message",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "info"
            },
            {
              "kind": "Method",
              "canonicalReference": "@storm-stack/logging!StormLog.info:member(1)",
              "docComment": "/**\n * Write an informational message to the logs.\n *\n * @param message - The message to be printed.\n *\n * @returns Either a promise that resolves to void or void.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static info(message: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "message",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "info"
            },
            {
              "kind": "Method",
              "canonicalReference": "@storm-stack/logging!StormLog#log:member(1)",
              "docComment": "/**\n * Write an informational message to the logs.\n *\n * @param message - The message to be printed.\n *\n * @returns Either a promise that resolves to void or void.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "log(message: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "message",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "log"
            },
            {
              "kind": "Method",
              "canonicalReference": "@storm-stack/logging!StormLog.log:member(1)",
              "docComment": "/**\n * Write an informational message to the logs.\n *\n * @param message - The message to be printed.\n *\n * @returns Either a promise that resolves to void or void.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static log(message: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "message",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "log"
            },
            {
              "kind": "Method",
              "canonicalReference": "@storm-stack/logging!StormLog#start:member(1)",
              "docComment": "/**\n * Start a process\n *\n * @param name - The name of the process\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "start(name: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "name",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "start"
            },
            {
              "kind": "Method",
              "canonicalReference": "@storm-stack/logging!StormLog#stopwatch:member(1)",
              "docComment": "/**\n * Write an message to the logs specifying how long it took to complete a process\n *\n * @param name - The name of the process\n *\n * @param startTime - The start time of the process\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "stopwatch(name?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", startTime?: "
                },
                {
                  "kind": "Reference",
                  "text": "StormTime",
                  "canonicalReference": "@storm-stack/logging!~StormTime:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "name",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": true
                },
                {
                  "parameterName": "startTime",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "stopwatch"
            },
            {
              "kind": "Method",
              "canonicalReference": "@storm-stack/logging!StormLog.stopwatch:member(1)",
              "docComment": "/**\n * Write an message to the logs specifying how long it took to complete a process\n *\n * @param startTime - The start time of the process\n *\n * @param name - The name of the process\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static stopwatch(startTime: "
                },
                {
                  "kind": "Reference",
                  "text": "StormTime",
                  "canonicalReference": "@storm-stack/logging!~StormTime:class"
                },
                {
                  "kind": "Content",
                  "text": ", name?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "startTime",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "name",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "stopwatch"
            },
            {
              "kind": "Method",
              "canonicalReference": "@storm-stack/logging!StormLog#success:member(1)",
              "docComment": "/**\n * Write a success message to the logs.\n *\n * @param message - The message to print.\n *\n * @returns Either a promise that resolves to void or void.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "success(message: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "message",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "success"
            },
            {
              "kind": "Method",
              "canonicalReference": "@storm-stack/logging!StormLog.success:member(1)",
              "docComment": "/**\n * Write a success message to the logs.\n *\n * @param message - The message to print.\n *\n * @returns Either a promise that resolves to void or void.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static success(message: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "message",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "success"
            },
            {
              "kind": "Method",
              "canonicalReference": "@storm-stack/logging!StormLog#trace:member(1)",
              "docComment": "/**\n * Write a trace message to the logs.\n *\n * @param message - The message to be printed.\n *\n * @returns Either a promise that resolves to void or void.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "trace(message: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "message",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "trace"
            },
            {
              "kind": "Method",
              "canonicalReference": "@storm-stack/logging!StormLog.trace:member(1)",
              "docComment": "/**\n * Write a trace message to the logs.\n *\n * @param message - The message to be printed.\n *\n * @returns Either a promise that resolves to void or void.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static trace(message: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "message",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "trace"
            },
            {
              "kind": "Method",
              "canonicalReference": "@storm-stack/logging!StormLog#warn:member(1)",
              "docComment": "/**\n * Write a warning message to the logs.\n *\n * @param message - The message to be printed.\n *\n * @returns Either a promise that resolves to void or void.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "warn(message: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "message",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "warn"
            },
            {
              "kind": "Method",
              "canonicalReference": "@storm-stack/logging!StormLog.warn:member(1)",
              "docComment": "/**\n * Write a warning message to the logs.\n *\n * @param message - The message to be printed.\n *\n * @returns Either a promise that resolves to void or void.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static warn(message: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "message",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "warn"
            }
          ],
          "implementsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            }
          ]
        }
      ]
    }
  ]
}
