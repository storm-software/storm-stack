{
  "metadata": {
    "toolPackage": "@microsoft/api-extractor",
    "toolVersion": "7.38.5",
    "schemaVersion": 1011,
    "oldestForwardsCompatibleVersion": 1001,
    "tsdocConfig": {
      "$schema": "https://developer.microsoft.com/json-schemas/tsdoc/v0/tsdoc.schema.json",
      "noStandardTags": true,
      "tagDefinitions": [
        {
          "tagName": "@alpha",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@beta",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@defaultValue",
          "syntaxKind": "block"
        },
        {
          "tagName": "@decorator",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@deprecated",
          "syntaxKind": "block"
        },
        {
          "tagName": "@eventProperty",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@example",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@experimental",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@inheritDoc",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@internal",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@label",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@link",
          "syntaxKind": "inline",
          "allowMultiple": true
        },
        {
          "tagName": "@override",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@packageDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@param",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@privateRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@public",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@readonly",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@remarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@returns",
          "syntaxKind": "block"
        },
        {
          "tagName": "@sealed",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@see",
          "syntaxKind": "block"
        },
        {
          "tagName": "@throws",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@typeParam",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@virtual",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@betaDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@internalRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@preapproved",
          "syntaxKind": "modifier"
        }
      ],
      "supportForTags": {
        "@alpha": true,
        "@beta": true,
        "@defaultValue": true,
        "@decorator": true,
        "@deprecated": true,
        "@eventProperty": true,
        "@example": true,
        "@experimental": true,
        "@inheritDoc": true,
        "@internal": true,
        "@label": true,
        "@link": true,
        "@override": true,
        "@packageDocumentation": true,
        "@param": true,
        "@privateRemarks": true,
        "@public": true,
        "@readonly": true,
        "@remarks": true,
        "@returns": true,
        "@sealed": true,
        "@see": true,
        "@throws": true,
        "@typeParam": true,
        "@virtual": true,
        "@betaDocumentation": true,
        "@internalRemarks": true,
        "@preapproved": true
      },
      "reportUnsupportedHtmlElements": false
    }
  },
  "kind": "Package",
  "canonicalReference": "@storm-stack/telemetry!",
  "docComment": "",
  "name": "@storm-stack/telemetry",
  "preserveMemberOrder": false,
  "members": [
    {
      "kind": "EntryPoint",
      "canonicalReference": "@storm-stack/telemetry!",
      "name": "",
      "preserveMemberOrder": false,
      "members": [
        {
          "kind": "Variable",
          "canonicalReference": "@storm-stack/telemetry!createFileStreamLogs:var",
          "docComment": "/**\n * Get the Pino transports for the logger\n *\n * @param config - The workspace config\n *\n * @param name - The name of the logger to get the options for\n *\n * @returns The options for the logger\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "createFileStreamLogs: "
            },
            {
              "kind": "Content",
              "text": "(config: "
            },
            {
              "kind": "Reference",
              "text": "StormConfig",
              "canonicalReference": "@storm-software/config!StormConfig:type"
            },
            {
              "kind": "Content",
              "text": "<\"telemetry\", "
            },
            {
              "kind": "Reference",
              "text": "TelemetryConfig",
              "canonicalReference": "@storm-stack/telemetry!TelemetryConfig:type"
            },
            {
              "kind": "Content",
              "text": ">) => "
            },
            {
              "kind": "Reference",
              "text": "Array",
              "canonicalReference": "!Array:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "pino.DestinationStream",
              "canonicalReference": "!pino.DestinationStream:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "pino.StreamEntry",
              "canonicalReference": "!pino.StreamEntry:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "pino.Level",
              "canonicalReference": "!pino.Level:type"
            },
            {
              "kind": "Content",
              "text": ">>"
            }
          ],
          "fileUrlPath": "tmp/.tsup/declaration/packages/telemetry/src/logging/create-file-stream-logs.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "createFileStreamLogs",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 14
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@storm-stack/telemetry!getPinoLogger:var",
          "docComment": "/**\n * Get the Pino transports for the logger\n *\n * @param config - The workspace config\n *\n * @param name - The name of the logger to get the options for\n *\n * @returns The options for the logger\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "getPinoLogger: "
            },
            {
              "kind": "Content",
              "text": "(config: "
            },
            {
              "kind": "Reference",
              "text": "StormConfig",
              "canonicalReference": "@storm-software/config!StormConfig:type"
            },
            {
              "kind": "Content",
              "text": ", name?: string, extraStreams?: ("
            },
            {
              "kind": "Reference",
              "text": "pino.DestinationStream",
              "canonicalReference": "!pino.DestinationStream:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "pino.StreamEntry",
              "canonicalReference": "!pino.StreamEntry:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "pino.Level",
              "canonicalReference": "!pino.Level:type"
            },
            {
              "kind": "Content",
              "text": ">)[], stacktrace?: boolean) => "
            },
            {
              "kind": "Reference",
              "text": "Logger",
              "canonicalReference": "!unknown"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "PinoLoggerOptions",
              "canonicalReference": "!unknown"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "fileUrlPath": "tmp/.tsup/declaration/packages/telemetry/src/logging/get-pino-logger.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "getPinoLogger",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 14
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/telemetry!LoggerOptions:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type LoggerOptions = "
            },
            {
              "kind": "Content",
              "text": "{\n    options: "
            },
            {
              "kind": "Reference",
              "text": "PinoLoggerOptions",
              "canonicalReference": "!unknown"
            },
            {
              "kind": "Content",
              "text": ";\n    stream?: "
            },
            {
              "kind": "Reference",
              "text": "DestinationStream",
              "canonicalReference": "!unknown"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "tmp/.tsup/declaration/packages/telemetry/src/logging/get-pino-logger.d.ts",
          "releaseTag": "Public",
          "name": "LoggerOptions",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@storm-stack/telemetry!LokiConfigSchema:var",
          "docComment": "/**\n * Storm schema used to represent a the required config needed to use Loki\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "LokiConfigSchema: "
            },
            {
              "kind": "Reference",
              "text": "z.ZodObject",
              "canonicalReference": "!z.ZodObject:type"
            },
            {
              "kind": "Content",
              "text": "<{\n    host: "
            },
            {
              "kind": "Reference",
              "text": "z.ZodDefault",
              "canonicalReference": "!z.ZodDefault:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "z.ZodString",
              "canonicalReference": "!z.ZodString:type"
            },
            {
              "kind": "Content",
              "text": ">;\n    username: "
            },
            {
              "kind": "Reference",
              "text": "z.ZodString",
              "canonicalReference": "!z.ZodString:type"
            },
            {
              "kind": "Content",
              "text": ";\n    password: "
            },
            {
              "kind": "Reference",
              "text": "z.ZodString",
              "canonicalReference": "!z.ZodString:type"
            },
            {
              "kind": "Content",
              "text": ";\n}, \"strip\", "
            },
            {
              "kind": "Reference",
              "text": "z.ZodTypeAny",
              "canonicalReference": "!z.ZodTypeAny:type"
            },
            {
              "kind": "Content",
              "text": ", {\n    host: string;\n    username: string;\n    password: string;\n}, {\n    username: string;\n    password: string;\n    host?: string | undefined;\n}>"
            }
          ],
          "fileUrlPath": "tmp/.tsup/declaration/packages/telemetry/src/schema.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "LokiConfigSchema",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 13
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "@storm-stack/telemetry!StormTrace:class",
          "docComment": "/**\n * The default Storm-Stack telemetry class, responsible for logging and tracing system processing.\n *\n * @remarks\n *\n * This logger writes to stdio and to a file and/or [Loki streams](https://grafana.com/oss/loki/).\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class StormTrace extends "
            },
            {
              "kind": "Reference",
              "text": "StormLog",
              "canonicalReference": "@storm-stack/telemetry!~StormLog:class"
            },
            {
              "kind": "Content",
              "text": " implements "
            },
            {
              "kind": "Reference",
              "text": "IStormLog",
              "canonicalReference": "@storm-stack/telemetry!~IStormLog:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "tmp/.tsup/declaration/packages/telemetry/src/storm-trace.d.ts",
          "releaseTag": "Public",
          "isAbstract": false,
          "name": "StormTrace",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@storm-stack/telemetry!StormTrace:constructor(1)",
              "docComment": "/**\n * The Singleton's constructor should always be private to prevent direct construction calls with the `new` operator.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected constructor(config: "
                },
                {
                  "kind": "Reference",
                  "text": "StormConfig",
                  "canonicalReference": "@storm-software/config!StormConfig:type"
                },
                {
                  "kind": "Content",
                  "text": "<\"telemetry\", "
                },
                {
                  "kind": "Reference",
                  "text": "TelemetryConfig",
                  "canonicalReference": "@storm-stack/telemetry!TelemetryConfig:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ", name?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", additionalLoggers?: "
                },
                {
                  "kind": "Reference",
                  "text": "ILoggerWrapper",
                  "canonicalReference": "@storm-stack/telemetry!~ILoggerWrapper:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "isProtected": true,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "config",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 5
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "name",
                  "parameterTypeTokenRange": {
                    "startIndex": 6,
                    "endIndex": 7
                  },
                  "isOptional": true
                },
                {
                  "parameterName": "additionalLoggers",
                  "parameterTypeTokenRange": {
                    "startIndex": 8,
                    "endIndex": 10
                  },
                  "isOptional": true
                }
              ]
            },
            {
              "kind": "Property",
              "canonicalReference": "@storm-stack/telemetry!StormTrace#config:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected config: "
                },
                {
                  "kind": "Reference",
                  "text": "StormConfig",
                  "canonicalReference": "@storm-software/config!StormConfig:type"
                },
                {
                  "kind": "Content",
                  "text": "<\"telemetry\", "
                },
                {
                  "kind": "Reference",
                  "text": "TelemetryConfig",
                  "canonicalReference": "@storm-stack/telemetry!TelemetryConfig:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "config",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "isStatic": false,
              "isProtected": true,
              "isAbstract": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@storm-stack/telemetry!StormTrace.create:member(1)",
              "docComment": "/**\n * Create a new instance of the logger\n *\n * @param config - The Storm config\n *\n * @param name - The name of the project to initialized the loggers for\n *\n * @param additionalLoggers - Additional loggers to use\n *\n * @returns The initialized logger\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static create(config: "
                },
                {
                  "kind": "Reference",
                  "text": "StormConfig",
                  "canonicalReference": "@storm-software/config!StormConfig:type"
                },
                {
                  "kind": "Content",
                  "text": "<\"telemetry\", "
                },
                {
                  "kind": "Reference",
                  "text": "TelemetryConfig",
                  "canonicalReference": "@storm-stack/telemetry!TelemetryConfig:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ", name?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", additionalLoggers?: "
                },
                {
                  "kind": "Reference",
                  "text": "ILoggerWrapper",
                  "canonicalReference": "@storm-stack/telemetry!~ILoggerWrapper:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "StormTrace",
                  "canonicalReference": "@storm-stack/telemetry!StormTrace:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 11,
                "endIndex": 12
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "config",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 5
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "name",
                  "parameterTypeTokenRange": {
                    "startIndex": 6,
                    "endIndex": 7
                  },
                  "isOptional": true
                },
                {
                  "parameterName": "additionalLoggers",
                  "parameterTypeTokenRange": {
                    "startIndex": 8,
                    "endIndex": 10
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "create"
            },
            {
              "kind": "Method",
              "canonicalReference": "@storm-stack/telemetry!StormTrace.debug:member(1)",
              "docComment": "/**\n * Write a debug message to the logs.\n *\n * @param message - The message to be printed.\n *\n * @returns Either a promise that resolves to void or void.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static debug(message: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "message",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "debug"
            },
            {
              "kind": "Method",
              "canonicalReference": "@storm-stack/telemetry!StormTrace.error:member(1)",
              "docComment": "/**\n * Write an error message to the logs.\n *\n * @param message - The message to be displayed.\n *\n * @returns Either a promise that resolves to void or void.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static error(message: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "message",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "error"
            },
            {
              "kind": "Method",
              "canonicalReference": "@storm-stack/telemetry!StormTrace.exception:member(1)",
              "docComment": "/**\n * Write an exception message to the logs.\n *\n * @param message - The message to be displayed.\n *\n * @returns Either a promise that resolves to void or void.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static exception(message: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "message",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "exception"
            },
            {
              "kind": "Method",
              "canonicalReference": "@storm-stack/telemetry!StormTrace.fatal:member(1)",
              "docComment": "/**\n * Write a fatal message to the logs.\n *\n * @param message - The fatal message to be displayed.\n *\n * @returns Either a promise that resolves to void or void.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static fatal(message: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "message",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "fatal"
            },
            {
              "kind": "Property",
              "canonicalReference": "@storm-stack/telemetry!StormTrace.getLoggers:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected static getLoggers: "
                },
                {
                  "kind": "Content",
                  "text": "() => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "GetLoggersResult",
                  "canonicalReference": "@storm-stack/telemetry!~GetLoggersResult:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "getLoggers",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              },
              "isStatic": true,
              "isProtected": true,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@storm-stack/telemetry!StormTrace#getStreams:member",
              "docComment": "/**\n * Allow child classes to specify additional pino log streams\n *\n * @returns Additional log streams to use during initialization\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected getStreams: "
                },
                {
                  "kind": "Content",
                  "text": "() => "
                },
                {
                  "kind": "Reference",
                  "text": "Array",
                  "canonicalReference": "!Array:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "pino.DestinationStream",
                  "canonicalReference": "!pino.DestinationStream:type"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "pino.StreamEntry",
                  "canonicalReference": "!pino.StreamEntry:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "pino.Level",
                  "canonicalReference": "!pino.Level:type"
                },
                {
                  "kind": "Content",
                  "text": ">>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "getStreams",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 10
              },
              "isStatic": false,
              "isProtected": true,
              "isAbstract": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@storm-stack/telemetry!StormTrace.info:member(1)",
              "docComment": "/**\n * Write an informational message to the logs.\n *\n * @param message - The message to be printed.\n *\n * @returns Either a promise that resolves to void or void.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static info(message: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "message",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "info"
            },
            {
              "kind": "Property",
              "canonicalReference": "@storm-stack/telemetry!StormTrace.initialize:member",
              "docComment": "/**\n * Initialize the logger.\n *\n * @param config - The Storm config\n *\n * @param name - The name of the project to initialized the loggers for\n *\n * @returns The initialized loggers\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected static initialize: "
                },
                {
                  "kind": "Content",
                  "text": "(config: "
                },
                {
                  "kind": "Reference",
                  "text": "StormConfig",
                  "canonicalReference": "@storm-software/config!StormConfig:type"
                },
                {
                  "kind": "Content",
                  "text": "<\"telemetry\", "
                },
                {
                  "kind": "Reference",
                  "text": "TelemetryConfig",
                  "canonicalReference": "@storm-stack/telemetry!TelemetryConfig:type"
                },
                {
                  "kind": "Content",
                  "text": ">, name?: string, streams?: ("
                },
                {
                  "kind": "Reference",
                  "text": "pino.DestinationStream",
                  "canonicalReference": "!pino.DestinationStream:type"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "pino.StreamEntry",
                  "canonicalReference": "!pino.StreamEntry:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "pino.Level",
                  "canonicalReference": "!pino.Level:type"
                },
                {
                  "kind": "Content",
                  "text": ">)[]) => "
                },
                {
                  "kind": "Reference",
                  "text": "Logger",
                  "canonicalReference": "!unknown"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "PinoLoggerOptions",
                  "canonicalReference": "!unknown"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "initialize",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 16
              },
              "isStatic": true,
              "isProtected": true,
              "isAbstract": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@storm-stack/telemetry!StormTrace.log:member(1)",
              "docComment": "/**\n * Write an informational message to the logs.\n *\n * @param message - The message to be printed.\n *\n * @returns Either a promise that resolves to void or void.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static log(message: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "message",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "log"
            },
            {
              "kind": "Method",
              "canonicalReference": "@storm-stack/telemetry!StormTrace.stopwatch:member(1)",
              "docComment": "/**\n * Write an message to the logs specifying how long it took to complete a process\n *\n * @param startTime - The start time of the process\n *\n * @param name - The name of the process\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static stopwatch(startTime: "
                },
                {
                  "kind": "Reference",
                  "text": "StormTime",
                  "canonicalReference": "@storm-stack/telemetry!~StormTime:class"
                },
                {
                  "kind": "Content",
                  "text": ", name?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "startTime",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "name",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "stopwatch"
            },
            {
              "kind": "Method",
              "canonicalReference": "@storm-stack/telemetry!StormTrace.success:member(1)",
              "docComment": "/**\n * Write a success message to the logs.\n *\n * @param message - The message to print.\n *\n * @returns Either a promise that resolves to void or void.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static success(message: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "message",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "success"
            },
            {
              "kind": "Method",
              "canonicalReference": "@storm-stack/telemetry!StormTrace.trace:member(1)",
              "docComment": "/**\n * Write a trace message to the logs.\n *\n * @param message - The message to be printed.\n *\n * @returns Either a promise that resolves to void or void.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static trace(message: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "message",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "trace"
            },
            {
              "kind": "Method",
              "canonicalReference": "@storm-stack/telemetry!StormTrace.warn:member(1)",
              "docComment": "/**\n * Write a warning message to the logs.\n *\n * @param message - The message to be printed.\n *\n * @returns Either a promise that resolves to void or void.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static warn(message: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "message",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "warn"
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "implementsTokenRanges": [
            {
              "startIndex": 3,
              "endIndex": 4
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/telemetry!TelemetryConfig:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type TelemetryConfig = "
            },
            {
              "kind": "Reference",
              "text": "z.infer",
              "canonicalReference": "!z.infer:type"
            },
            {
              "kind": "Content",
              "text": "<typeof "
            },
            {
              "kind": "Reference",
              "text": "TelemetryConfigSchema",
              "canonicalReference": "@storm-stack/telemetry!TelemetryConfigSchema:var"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "tmp/.tsup/declaration/packages/telemetry/src/types.d.ts",
          "releaseTag": "Public",
          "name": "TelemetryConfig",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@storm-stack/telemetry!TelemetryConfigSchema:var",
          "docComment": "/**\n * Storm base schema used to represent a package's config (either workspace or project)\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "TelemetryConfigSchema: "
            },
            {
              "kind": "Reference",
              "text": "z.ZodObject",
              "canonicalReference": "!z.ZodObject:type"
            },
            {
              "kind": "Content",
              "text": "<{\n    stacktrace: "
            },
            {
              "kind": "Reference",
              "text": "z.ZodOptional",
              "canonicalReference": "!z.ZodOptional:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "z.ZodBoolean",
              "canonicalReference": "!z.ZodBoolean:type"
            },
            {
              "kind": "Content",
              "text": ">;\n    fileLoggingDisabled: "
            },
            {
              "kind": "Reference",
              "text": "z.ZodDefault",
              "canonicalReference": "!z.ZodDefault:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "z.ZodBoolean",
              "canonicalReference": "!z.ZodBoolean:type"
            },
            {
              "kind": "Content",
              "text": ">;\n    fileName: "
            },
            {
              "kind": "Reference",
              "text": "z.ZodDefault",
              "canonicalReference": "!z.ZodDefault:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "z.ZodOptional",
              "canonicalReference": "!z.ZodOptional:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "z.ZodString",
              "canonicalReference": "!z.ZodString:type"
            },
            {
              "kind": "Content",
              "text": ">>;\n    fileExtension: "
            },
            {
              "kind": "Reference",
              "text": "z.ZodDefault",
              "canonicalReference": "!z.ZodDefault:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "z.ZodString",
              "canonicalReference": "!z.ZodString:type"
            },
            {
              "kind": "Content",
              "text": ">;\n    path: "
            },
            {
              "kind": "Reference",
              "text": "z.ZodOptional",
              "canonicalReference": "!z.ZodOptional:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "z.ZodString",
              "canonicalReference": "!z.ZodString:type"
            },
            {
              "kind": "Content",
              "text": ">;\n    loki: "
            },
            {
              "kind": "Reference",
              "text": "z.ZodOptional",
              "canonicalReference": "!z.ZodOptional:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "z.ZodObject",
              "canonicalReference": "!z.ZodObject:type"
            },
            {
              "kind": "Content",
              "text": "<{\n        host: "
            },
            {
              "kind": "Reference",
              "text": "z.ZodDefault",
              "canonicalReference": "!z.ZodDefault:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "z.ZodString",
              "canonicalReference": "!z.ZodString:type"
            },
            {
              "kind": "Content",
              "text": ">;\n        username: "
            },
            {
              "kind": "Reference",
              "text": "z.ZodString",
              "canonicalReference": "!z.ZodString:type"
            },
            {
              "kind": "Content",
              "text": ";\n        password: "
            },
            {
              "kind": "Reference",
              "text": "z.ZodString",
              "canonicalReference": "!z.ZodString:type"
            },
            {
              "kind": "Content",
              "text": ";\n    }, \"strip\", "
            },
            {
              "kind": "Reference",
              "text": "z.ZodTypeAny",
              "canonicalReference": "!z.ZodTypeAny:type"
            },
            {
              "kind": "Content",
              "text": ", {\n        host: string;\n        username: string;\n        password: string;\n    }, {\n        username: string;\n        password: string;\n        host?: string | undefined;\n    }>>;\n}, \"strip\", "
            },
            {
              "kind": "Reference",
              "text": "z.ZodTypeAny",
              "canonicalReference": "!z.ZodTypeAny:type"
            },
            {
              "kind": "Content",
              "text": ", {\n    fileLoggingDisabled: boolean;\n    fileName: string;\n    fileExtension: string;\n    stacktrace?: boolean | undefined;\n    path?: string | undefined;\n    loki?: {\n        host: string;\n        username: string;\n        password: string;\n    } | undefined;\n}, {\n    stacktrace?: boolean | undefined;\n    fileLoggingDisabled?: boolean | undefined;\n    fileName?: string | undefined;\n    fileExtension?: string | undefined;\n    path?: string | undefined;\n    loki?: {\n        username: string;\n        password: string;\n        host?: string | undefined;\n    } | undefined;\n}>"
            }
          ],
          "fileUrlPath": "tmp/.tsup/declaration/packages/telemetry/src/schema.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "TelemetryConfigSchema",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 41
          }
        }
      ]
    }
  ]
}
