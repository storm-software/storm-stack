{
  "metadata": {
    "toolPackage": "@microsoft/api-extractor",
    "toolVersion": "7.38.4",
    "schemaVersion": 1011,
    "oldestForwardsCompatibleVersion": 1001,
    "tsdocConfig": {
      "$schema": "https://developer.microsoft.com/json-schemas/tsdoc/v0/tsdoc.schema.json",
      "noStandardTags": true,
      "tagDefinitions": [
        {
          "tagName": "@alpha",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@beta",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@defaultValue",
          "syntaxKind": "block"
        },
        {
          "tagName": "@decorator",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@deprecated",
          "syntaxKind": "block"
        },
        {
          "tagName": "@eventProperty",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@example",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@experimental",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@inheritDoc",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@internal",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@label",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@link",
          "syntaxKind": "inline",
          "allowMultiple": true
        },
        {
          "tagName": "@override",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@packageDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@param",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@privateRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@public",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@readonly",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@remarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@returns",
          "syntaxKind": "block"
        },
        {
          "tagName": "@sealed",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@see",
          "syntaxKind": "block"
        },
        {
          "tagName": "@throws",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@typeParam",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@virtual",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@betaDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@internalRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@preapproved",
          "syntaxKind": "modifier"
        }
      ],
      "supportForTags": {
        "@alpha": true,
        "@beta": true,
        "@defaultValue": true,
        "@decorator": true,
        "@deprecated": true,
        "@eventProperty": true,
        "@example": true,
        "@experimental": true,
        "@inheritDoc": true,
        "@internal": true,
        "@label": true,
        "@link": true,
        "@override": true,
        "@packageDocumentation": true,
        "@param": true,
        "@privateRemarks": true,
        "@public": true,
        "@readonly": true,
        "@remarks": true,
        "@returns": true,
        "@sealed": true,
        "@see": true,
        "@throws": true,
        "@typeParam": true,
        "@virtual": true,
        "@betaDocumentation": true,
        "@internalRemarks": true,
        "@preapproved": true
      },
      "reportUnsupportedHtmlElements": false
    }
  },
  "kind": "Package",
  "canonicalReference": "@storm-stack/unique-identifier!",
  "docComment": "",
  "name": "@storm-stack/unique-identifier",
  "preserveMemberOrder": false,
  "members": [
    {
      "kind": "EntryPoint",
      "canonicalReference": "@storm-stack/unique-identifier!",
      "name": "",
      "preserveMemberOrder": false,
      "members": [
        {
          "kind": "Variable",
          "canonicalReference": "@storm-stack/unique-identifier!Crypto_2:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "Crypto: "
            },
            {
              "kind": "Reference",
              "text": "Crypto",
              "canonicalReference": "!Crypto:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            }
          ],
          "fileUrlPath": "packages/unique-identifier/src/crypto.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "Crypto_2",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@storm-stack/unique-identifier!cuid:function(1)",
          "docComment": "/**\n * Generate a random CUID\n *\n * @returns A random CUID string\n *\n * @example\n * ```typescript\n *\n * // Generate a random CUID\n * const id = cuid();\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function cuid(): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/unique-identifier/src/cuid.ts",
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "cuid"
        },
        {
          "kind": "Interface",
          "canonicalReference": "@storm-stack/unique-identifier!DeconstructedSnowflake:interface",
          "docComment": "/**\n * A deconstructed snowflake and the details around it's creation.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface DeconstructedSnowflake "
            }
          ],
          "fileUrlPath": "packages/unique-identifier/src/snowflake.ts",
          "releaseTag": "Public",
          "name": "DeconstructedSnowflake",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/unique-identifier!DeconstructedSnowflake#binary:member",
              "docComment": "/**\n * The 64Bit snowflake binary string\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "binary: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "binary",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/unique-identifier!DeconstructedSnowflake#sequence:member",
              "docComment": "/**\n * The increment of this snowflake\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "sequence: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "sequence",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/unique-identifier!DeconstructedSnowflake#shard_id:member",
              "docComment": "/**\n * The shard_id used when generating\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "shard_id: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "shard_id",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/unique-identifier!DeconstructedSnowflake#snowflake:member",
              "docComment": "/**\n * Snowflake deconstructed from\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "snowflake: "
                },
                {
                  "kind": "Reference",
                  "text": "SnowflakeResolvable",
                  "canonicalReference": "@storm-stack/unique-identifier!SnowflakeResolvable:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "snowflake",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/unique-identifier!DeconstructedSnowflake#timestamp:member",
              "docComment": "/**\n * The timestamp the snowflake was generated\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "timestamp: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "timestamp",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "@storm-stack/unique-identifier!deconstructSnowflake:function(1)",
          "docComment": "/**\n * Deconstruct a snowflake to its values using the `epoch`.\n *\n * @param snowflake - Snowflake to deconstruct\n *\n * @returns Either the DeconstructedSnowflake object\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function deconstructSnowflake(snowflake: "
            },
            {
              "kind": "Reference",
              "text": "SnowflakeResolvable",
              "canonicalReference": "@storm-stack/unique-identifier!SnowflakeResolvable:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "DeconstructedSnowflake",
              "canonicalReference": "@storm-stack/unique-identifier!DeconstructedSnowflake:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/unique-identifier/src/snowflake.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "snowflake",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "deconstructSnowflake"
        },
        {
          "kind": "Function",
          "canonicalReference": "@storm-stack/unique-identifier!hash:function(1)",
          "docComment": "/**\n * Create a hash from a string.\n *\n * @param input - String to hash\n *\n * @returns The hashed string\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function hash(input?: "
            },
            {
              "kind": "Content",
              "text": "string | object"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/unique-identifier/src/hash.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "input",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            }
          ],
          "name": "hash"
        },
        {
          "kind": "Interface",
          "canonicalReference": "@storm-stack/unique-identifier!ISnowflakeGeneratorOptions:interface",
          "docComment": "/**\n * Options passed to the `generate` function to create a snowflake identifier.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ISnowflakeGeneratorOptions "
            }
          ],
          "fileUrlPath": "packages/unique-identifier/src/snowflake.ts",
          "releaseTag": "Public",
          "name": "ISnowflakeGeneratorOptions",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/unique-identifier!ISnowflakeGeneratorOptions#epoch:member",
              "docComment": "/**\n * The epoch to use for the snowflake.\n *\n * @remarks\n *\n * This is the time in milliseconds since 1 January 1970 00:00:00 UTC.\n *\n * @default 1420070400000 (Date.UTC(1970, 0, 1).valueOf())\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "epoch: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "epoch",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/unique-identifier!ISnowflakeGeneratorOptions#shardId:member",
              "docComment": "/**\n * The id of the shard running this generator.\n *\n * @default 1\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "shardId: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "shardId",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@storm-stack/unique-identifier!ISnowflakeGeneratorOptions#timestamp:member",
              "docComment": "/**\n * The current timestamp to use for the snowflake.\n *\n * @default Date.now()\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "timestamp: "
                },
                {
                  "kind": "Content",
                  "text": "number | "
                },
                {
                  "kind": "Reference",
                  "text": "Date",
                  "canonicalReference": "!Date:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "timestamp",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "@storm-stack/unique-identifier!isValidSnowflake:function(1)",
          "docComment": "/**\n * Check if a snowflake string Id is valid.\n *\n * @param snowflake - Snowflake to check\n *\n * @returns Whether the snowflake is valid\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isValidSnowflake(snowflake: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/unique-identifier/src/snowflake.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "snowflake",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isValidSnowflake"
        },
        {
          "kind": "Variable",
          "canonicalReference": "@storm-stack/unique-identifier!randomInteger:var",
          "docComment": "/**\n * Generate a random integer\n *\n * @param maximum - The maximum value (inclusive)\n *\n * @param minimum - The minimum value (inclusive)\n *\n * @returns A random integer\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "randomInteger: "
            },
            {
              "kind": "Content",
              "text": "(maximum: number, minimum?: number) => number"
            }
          ],
          "fileUrlPath": "packages/unique-identifier/src/random.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "randomInteger",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@storm-stack/unique-identifier!randomLetter:var",
          "docComment": "/**\n * Generate a random letter\n *\n * @param random - The random number generator\n *\n * @returns A random letter\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "randomLetter: "
            },
            {
              "kind": "Content",
              "text": "(random?: () => number) => string | undefined"
            }
          ],
          "fileUrlPath": "packages/unique-identifier/src/random.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "randomLetter",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@storm-stack/unique-identifier!snowflake:function(1)",
          "docComment": "/**\n * Generate a snowflake identifier.\n *\n * @remarks\n *\n * Snowflakes are 64-bit unsigned integers that are roughly time-ordered.\n *\n * @param timestamp - The timestamp to use\n *\n * @param shardId - The shard id to use\n *\n * @returns A snowflake\n *\n * @example\n * ```typescript\n *\n * // Generate a snowflake with the default options\n * const id1 = snowflake();\n *\n * // Generate a snowflake with a custom shard id\n * const id2 = snowflake({ shardId: 2 });\n *\n * // Generate a snowflake with a custom shard id and timestamp\n * const id3 = snowflake({ shardId: 3, timestamp: new Date(\"2021-01-01\") });\n *\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function snowflake({ shardId, epoch, timestamp }?: "
            },
            {
              "kind": "Reference",
              "text": "ISnowflakeGeneratorOptions",
              "canonicalReference": "@storm-stack/unique-identifier!ISnowflakeGeneratorOptions:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/unique-identifier/src/snowflake.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "{ shardId, epoch, timestamp }",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            }
          ],
          "name": "snowflake"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@storm-stack/unique-identifier!SnowflakeResolvable:type",
          "docComment": "/**\n * Resolvable value types for a valid Snowflake: * string * number * bigint\n *\n * @type {SnowflakeResolvable}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type SnowflakeResolvable = "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/unique-identifier/src/snowflake.ts",
          "releaseTag": "Public",
          "name": "SnowflakeResolvable",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@storm-stack/unique-identifier!uuid:function(1)",
          "docComment": "/**\n * Generate a random UUID\n *\n * @remarks\n *\n * This helper function is a wrapper around the `crypto.randomUUID` function. You can find more information about this type of identifier in this {@link https://en.wikipedia.org/wiki/Universally_unique_identifier article}\n *\n * @returns A random UUID string\n *\n * @example\n * ```typescript\n *\n * // Generate a random UUID\n * const id = uuid();\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function uuid(): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "packages/unique-identifier/src/uuid.ts",
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "uuid"
        }
      ]
    }
  ]
}
