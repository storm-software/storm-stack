/* eslint-disable */
// biome-ignore lint: disable
// prettier-ignore

/// <reference types="../../../../dist/packages/types" />

// Generated by Storm Stack
// Note: Do not edit this file manually - it will be overwritten automatically

declare global {
  const StormLog: (typeof import("../runtime/log"))["StormLog"];
  type StormLog = import("../runtime/log").StormLog;

  const uniqueId: (typeof import("../runtime/id"))["uniqueId"];
  const getRandom: (typeof import("../runtime/id"))["getRandom"];

  const _StormError: (typeof import("../runtime/error"))["StormError"];
  class StormError extends _StormError {
    /**
     * The StormError constructor
     *
     * @param options - The options for the error
     * @param type - The type of error
     */
    public constructor(
      optionsOrMessage: StormErrorOptions | string,
      type: ErrorType = "general"
    ) {
      super(optionsOrMessage, type);
    }
  }

  const createStormError: (typeof import("../runtime/error"))["createStormError"];
  const isStormError: (typeof import("../runtime/error"))["isStormError"];

  const _StormPayload: (typeof import("../runtime/payload"))["StormPayload"];
  class StormPayload<
    TData = any
  > extends _StormPayload<TData> {
    /**
     * Create a new payload object.
     *
     * @param data - The payload data.
     */
    public constructor(
      data: TData
    ) {
      super(data);
    }
  }

  const _StormResult: (typeof import("../runtime/result"))["StormResult"];
  class StormResult<
    TData extends any | StormError = any | StormError
  > extends _StormResult<TData> {
    /**
     * Create a new result.
     *
     * @param payloadId - The payload identifier.
     * @param meta - The current context's metadata.
     * @param data - The result data
     */
    public constructor(
      payloadId: string,
      meta: Record<string, any>,
      data: TData
    ) {
      super(payloadId, meta, data);
    }
  }
}

export {};
