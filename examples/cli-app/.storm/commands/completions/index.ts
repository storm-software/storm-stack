/* eslint-disable */
// biome-ignore lint: disable
// prettier-ignore

// Generated by Storm Stack
// Note: Do not edit this file manually - it will be overwritten automatically

import { colors,parseArgs,renderBanner,renderFooter } from "../../runtime/cli";
import { isMinimal } from "../../runtime/env";
import { renderUsage as renderBashUsage } from "./bash/usage";
import { renderUsage as renderZshUsage } from "./zsh/usage";

export interface CompletionsPayload {
  help: boolean;
  version: boolean;
  noBanner: boolean;
}

/**
 * Renders the CLI Completions virtual command usage information.
 *
 * @param mode - The render mode to use when displaying the usage information (either "full" or "minimal").
 * @returns The rendered string displaying usage information.
 */
export function renderUsage(mode: "full" | "minimal" = "full"): string {
  return `${colors.whiteBright(colors.bold("CLI Completions Commands"))} 

  ${colors.gray("Commands for generating shell completion scripts for the Examples CLI App.")}

  ${colors.whiteBright(colors.bold("Usage:"))}
    examples-cli completions zsh [options]
    examples-cli completions bash [options]${
      mode === "full"
        ? `

  ${colors.whiteBright(colors.bold("Commands:"))}
${renderZshUsage("minimal")
  .split("\n")
  .map(line => `    ${line}`)
  .join("\n")}

${renderBashUsage("minimal")
  .split("\n")
  .map(line => `    ${line}`)
  .join("\n")}`
        : ""
    }

  ${colors.whiteBright(colors.bold("Options:"))}
    --help, -h, -?      ${colors.gray("Show help information. [default: false]")} 
    --version, -v       ${colors.gray("Show the version of the application. [default: false]")} 
    --no-banner         ${colors.gray("Hide the banner displayed while running the CLI application (will be set to true if running in a CI pipeline). [default: false]")}
`;
}

/**
 * The entry point for the CLI Completions virtual command.
 */
async function handler() {
  try {
    if (process.argv.length > 3) {
      const command = process.argv[2];
      if (command && !command.startsWith("-")) {
        if (command.toLowerCase() === "zsh") {
          const handle = await import("./zsh").then(m => m.default);
          return handle();
        } else if (command.toLowerCase() === "bash") {
          const handle = await import("./bash").then(m => m.default);
          return handle();
        }

        console.error(
          ` ${colors.red("✘")} ${colors.white(`Unknown command: ${colors.bold(command || "<none>")}`)}`
        );
        console.log("");
        console.log(renderUsage("full"));
        console.log("");
        console.log(renderFooter());
        console.log("");

        return;
      }
    }

    const args = parseArgs(process.argv.slice(2), {
      boolean: ["help", "h", "?", "version", "v", "no-banner", ""],
      alias: {
        help: ["help", "HELP", "h", "H", "?", "?"],
        version: ["version", "VERSION", "v", "V"],
        noBanner: ["no-banner", "NO-BANNER"]
      }
    });

    if (args["version"] || args["v"]) {
      console.log($storm.vars.APP_VERSION);
    } else {
      if (args["no-banner"] !== true && !isMinimal) {
        console.log(
          renderBanner(
            "CLI Completions Commands",
            "Commands for generating shell completion scripts for the Examples CLI App."
          )
        );
        console.log("");
      }

      console.log(renderUsage("full"));
      console.log("");
      console.log(renderFooter());
      console.log("");
    }
  } catch (err) {
    console.error(
      ` ${colors.red("✘")} ${colors.white(`Error occurred while processing CLI Completions command.`)}`
    );
  }
}

export default handler;
