/* eslint-disable */
// biome-ignore lint: disable
// prettier-ignore

// Generated by Storm Stack
// Note: Do not edit this file manually - it will be overwritten automatically

import { existsSync } from "node:fs";
import { readFile, writeFile } from "node:fs/promises";
import os from "node:os";
import { join } from "node:path";
import { colors, stripAnsi } from "../../../runtime/cli";
import { StormPayload } from "../../../runtime/payload";

const homedir = os.homedir();

export interface CompletionsZshPayload {
  /**
   * The path to write the completion script to.
   *
   * @remarks
   * If no extension is provided, the `.zsh` extension will be used.
   */
  script?: string | true;

  /**
   * The configuration file to append the completion script to.
   *
   * @remarks
   * The generated completion script will be appended to the specified configuration file. Possible values for the configuration file include:
   * - `~/.zshrc`
   * - `~/.zprofile`
   */
  config?: string | true;
}

/**
 * Generates a Zsh shell completion script for the Examples CLI App CLI application.
 *
 * @param payload - The payload object optionally containing a script output file or a config file.
 */
async function handler(payload: StormPayload<CompletionsZshPayload>) {
  const executablePath = process.argv[1] || "examples-cli";
  const script = colors.white(`
${colors.dim("#compdef")} ${colors.bold("examples-cli")}
${colors.dim("###-begin-examples-cli-completions-###")}

${colors.dim(`# ${colors.bold("Examples CLI App Zsh CLI command completion script")}
#
# ${colors.bold("Installation:")} ${executablePath} completions zsh --config ~/.zshrc or ${executablePath} completions zsh --script or ${executablePath} completions zsh >> ~/.zshrc or ${executablePath} completions zsh >> ~/.zprofile on OSX. `)}
${colors.bold("_examples-cli_completions()")}
{
  local reply
  local si=$IFS
  IFS=$'\n' reply=($(COMP_CWORD="$((CURRENT-1))" COMP_LINE="$BUFFER" COMP_POINT="$CURSOR" ${executablePath} --get-completions "\${words[@]}"))
  IFS=$si
  if [[ \${#reply} -gt 0 ]]; then
    _describe 'values' reply
  else
    _default
  fi
}

if [[ "'\${zsh_eval_context[-1]}" == "loadautofunc" ]]; then
  _examples-cli_completions "$@"
else
  compdef _examples-cli_completions examples-cli
fi
complete -o bashdefault -o default -F _examples-cli_completions examples-cli

${colors.dim("###-end-examples-cli-completions-###")}
`);

  console.log("");
  if (payload.data.config) {
    let configFile =
      payload.data.config === true ? "~/.zshrc" : payload.data.config;
    if (configFile.startsWith("~")) {
      configFile = join(homedir, configFile.replace("~", ""));
    }

    let configFileContent = "";
    if (existsSync(configFile)) {
      configFileContent = await readFile(configFile, "utf8");
    }

    await writeFile(
      configFile,
      configFileContent + "\n\n" + stripAnsi(script),
      "utf8"
    );

    console.log(colors.dim(` > Zsh completion script added to ${configFile}`));
  } else if (payload.data.script) {
    const scriptFile =
      typeof payload.data.script === "string"
        ? payload.data.script
        : "examples-cli-completions.zsh";
    await writeFile(scriptFile, stripAnsi(script), "utf8");

    console.log(
      colors.dim(` > Zsh completion script written to ${scriptFile}`)
    );
  } else {
    console.log(script);
  }

  console.log("");
}

export default handler;
