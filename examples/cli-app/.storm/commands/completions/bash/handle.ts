/* eslint-disable */
// biome-ignore lint: disable
// prettier-ignore

// Generated by Storm Stack
// Note: Do not edit this file manually - it will be overwritten automatically

import { existsSync } from "node:fs";
import { readFile, writeFile } from "node:fs/promises";
import os from "node:os";
import { join } from "node:path";
import { colors, stripAnsi } from "../../../runtime/cli";
import { StormPayload } from "../../../runtime/payload";

const homedir = os.homedir();

export interface CompletionsBashPayload {
  /**
   * The path to write the completion script to.
   *
   * @remarks
   * If no extension is provided, the `.bash` extension will be used.
   */
  script?: string | true;

  /**
   * The configuration file to append the completion script to.
   *
   * @remarks
   * The generated completion script will be appended to the specified configuration file. Possible values for the configuration file include:
   * - `~/.bashrc`
   * - `~/.bash_profile`
   */
  config?: string | true;
}

/**
 * Generates a Bash shell completion script for the Examples CLI App CLI application.
 *
 * @param payload - The payload object optionally containing a script output file or a config file.
 */
async function handler(payload: StormPayload<CompletionsBashPayload>) {
  const executablePath = process.argv[1] || "examples-cli";
  const script = colors.white(`
${colors.dim("###-begin-examples-cli-completions-###")}

${colors.dim(`# ${colors.bold("Examples CLI App Bash CLI command completion script")}
#
# ${colors.bold("Installation:")} ${executablePath} completions bash --config ~/.bashrc or ${executablePath} completions bash --script or  ${executablePath} completions bash >> ~/.bashrc or ${executablePath} completions bash >> ~/.bash_profile on OSX. `)}
${colors.bold("_examples-cli_completions()")}
{
    local cur_word args type_list

    cur_word="\${COMP_WORDS[COMP_CWORD]}"
    args=("\${COMP_WORDS[@]}")

    ${colors.dim("# Ask Examples CLI App CLI to generate completions.")}
    mapfile -t type_list < <(${executablePath} --get-completions "\${args[@]}")
    mapfile -t COMPREPLY < <(compgen -W "$( printf '%q ' "\${type_list[@]}" )" -- "\${cur_word}" |
        awk '/ / { print "\\""$0"\\"" } /^[^ ]+$/ { print $0 }')

    ${colors.dim("# if no match was found, fall back to filename completion")}
    if [ \${#COMPREPLY[@]} -eq 0 ]; then
      COMPREPLY=()
    fi

    return 0
}
complete -o bashdefault -o default -F _examples-cli_completions examples-cli

${colors.dim("###-end-examples-cli-completions-###")}
`);

  console.log("");
  if (payload.data.config) {
    let configFile =
      payload.data.config === true ? "~/.bashrc" : payload.data.config;
    if (configFile.startsWith("~")) {
      configFile = join(homedir, configFile.replace("~", ""));
    }

    let configFileContent = "";
    if (existsSync(configFile)) {
      configFileContent = await readFile(configFile, "utf8");
    }

    await writeFile(
      configFile,
      configFileContent + "\n\n" + stripAnsi(script),
      "utf8"
    );

    console.log(
      colors.dim(
        ` > Bash completion script appended to ${configFile} configuration`
      )
    );
  } else if (payload.data.script) {
    const scriptFile =
      typeof payload.data.script === "string"
        ? payload.data.script
        : "examples-cli-completions.sh";
    await writeFile(scriptFile, stripAnsi(script), "utf8");

    console.log(
      colors.dim(` > Bash completion script written to ${scriptFile}`)
    );
  } else {
    console.log(script);
  }

  console.log("");
}

export default handler;
