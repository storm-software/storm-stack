/* eslint-disable */
// biome-ignore lint: disable
// prettier-ignore

// Generated by Storm Stack
// Note: Do not edit this file manually - it will be overwritten automatically

import { deserialize } from "@deepkit/type";
import handle from "../../../src/commands/add/index";
import { AddPayload } from "../../../src/types";
import { withContext } from "../../runtime/app";
import { colors, prompt, renderBanner } from "../../runtime/cli";
import { getRuntimeInfo } from "../../runtime/env";
import handlePage from "./page";

/**
 * Renders the Add command usage information.
 *
 * @param includeCommands - Whether to include rendering sub-commands.
 * @returns The rendered string displaying usage information.
 */
export function renderUsage(includeCommands = true) {
  return `${colors.bold("Add")}

${colors.dim("Add an item to the file system.")}

  ${colors.bold("Usage:")}
    examples-cli add [options] 
    examples-cli add page [options]${
      includeCommands !== false
        ? `
  ${colors.bold("Commands:")}
    Add - Page (page)                ${colors.dim("Add a page to the file system.")}`
        : ""
    }

  ${colors.bold("Options:")}
    --help, -h, -?                   ${colors.dim("Show help information. [default: false]")} 
    --version, -v                    ${colors.dim("Show the version of the application. [default: false]")} 
    --interactive, -i, --interact    ${colors.dim("Enable interactive mode (will be set to false if running in a CI pipeline). [default: true]")} 
    --no-interactive, --no-interact  ${colors.dim("Disable interactive mode (will be set to true if running in a CI pipeline). [default: false]")} 
    --no-banner                      ${colors.dim("Hide the banner displayed while running the CLI application (will be set to true if running in a CI pipeline). [default: false]")} 
    --verbose, -v                    ${colors.dim("Enable verbose output. [default: false]")} 
    --file <file>, -f <file>         ${colors.dim('The file to add to the file system. [default: "server.ts"]')} 
    --type <type>, -t <type>         ${colors.dim('The type of the file. [default: "server"]')}
`;
}

const handleCommand = withContext<AddPayload>(handle);

/**
 * The entry point for the Add command.
 */
async function handler() {
  try {
    if (process.argv.length > 3) {
      const command = process.argv[2];
      if (command && !command.startsWith("-")) {
        if (command.toLowerCase() === "page") {
          return handlePage();
        }

        console.error(
          ` ${colors.red("✖")} ${colors.redBright(`Unknown command: ${colors.bold(command || "")}`)}`
        );
        console.log("");
        console.log(renderUsage(true));
        console.log("");

        return;
      }
    }

    const args = parseArgs(process.argv.slice(2), {
      boolean: [
        "help",
        "h",
        "?",
        "version",
        "v",
        "interactive",
        "i",
        "interact",
        "no-interactive",
        "no-interact",
        "no-banner",
        "",
        "verbose",
        "v"
      ],
      alias: {
        help: ["help", "HELP", "h", "H", "?", "?"],
        version: ["version", "VERSION", "v", "V"],
        interactive: [
          "interactive",
          "INTERACTIVE",
          "i",
          "I",
          "interact",
          "INTERACT"
        ],
        noInteractive: [
          "no-interactive",
          "NO-INTERACTIVE",
          "no-interact",
          "NO-INTERACT"
        ],
        noBanner: ["no-banner", "NO-BANNER"],
        verbose: ["verbose", "VERBOSE", "v", "V"],
        file: ["file", "FILE", "f", "F"],
        type: ["type", "TYPE", "t", "T"]
      }
    });

    if (args["version"] || args["v"]) {
      console.log($storm.vars.APP_VERSION);
    } else {
      const runtimeInfo = getRuntimeInfo();
      const isVerbose =
        args["verbose"] ?? Boolean(process.env.EXAMPLES_CLI_VERBOSE);
      const isInteractive =
        args["interactive"] !== false &&
        args["no-interactive"] !== true &&
        Boolean(process.env.EXAMPLES_CLI_INTERACTIVE) &&
        runtimeInfo.isInteractive &&
        !runtimeInfo.isCI;

      if (args["no-banner"] !== true && !runtimeInfo.isCI) {
        console.log(renderBanner("Add", "Add an item to the file system."));
        console.log("");
      }

      if (args["help"] || args["h"] || args["?"]) {
        console.log(renderUsage(true));
        console.log("");
      } else {
        if (isVerbose) {
          console.log(
            colors.dim(
              ` > Writing verbose output to console - as a result of the ${args["verbose"] ? 'user provided "verbose" option' : "EXAMPLES_CLI_VERBOSE environment variable"} `
            )
          );
          console.log("");

          if (isInteractive) {
            console.log(colors.dim(" > Running in interactive mode..."));
          } else {
            console.log(colors.dim(" > Running in non-interactive mode..."));
          }
          console.log("");
        }

        if (args["file"] === undefined && process.env.EXAMPLES_CLI_FILE) {
          args["file"] = process.env.EXAMPLES_CLI_FILE;
          if (isVerbose) {
            console.log(
              colors.dim(
                ` > Setting the file option to ${process.env.EXAMPLES_CLI_FILE} (via the EXAMPLES_CLI_FILE environment variable) `
              )
            );
          }
        }

        if (args["type"] === undefined && process.env.EXAMPLES_CLI_TYPE) {
          args["type"] = process.env.EXAMPLES_CLI_TYPE;
          if (isVerbose) {
            console.log(
              colors.dim(
                ` > Setting the type option to ${process.env.EXAMPLES_CLI_TYPE} (via the EXAMPLES_CLI_TYPE environment variable) `
              )
            );
          }
        }

        if (args["file"] === undefined) {
          if (isInteractive) {
            args["file"] = await prompt<string>(
              "The file to add to the file system",
              {
                type: "text",
                initial: "server.ts",
                default: "server.ts"
              }
            );
          } else {
            args["file"] = "server.ts";
            if (isVerbose) {
              console.log(
                colors.dim(
                  ` > Setting the file option to "server.ts" (via it's default value) `
                )
              );
            }
          }
        }

        if (args["type"] === undefined) {
          if (isInteractive) {
            args["type"] = await prompt<string>("The type of the file", {
              type: "text",
              initial: "server",
              default: "server"
            });
          } else {
            args["type"] = "server";
            if (isVerbose) {
              console.log(
                colors.dim(
                  ` > Setting the type option to "server" (via it's default value) `
                )
              );
            }
          }
        }

        await handleCommand(deserialize<AddPayload>(args));
      }
    }
  } catch (err) {
    console.error(
      ` ${colors.red("✖")} ${colors.redBright(`Error occurred while processing Add command.`)}`
    );
  }
}

export default handler;
