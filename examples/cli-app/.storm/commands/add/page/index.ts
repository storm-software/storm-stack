/* eslint-disable */
// biome-ignore lint: disable
// prettier-ignore

// Generated by Storm Stack
// Note: Do not edit this file manually - it will be overwritten automatically

import { deserialize } from "@deepkit/type";
import { AddPagePayload } from "../../../../src/types";
import { withContext } from "../../../runtime/app";
import {
  colors,
  parseArgs,
  prompt,
  renderBanner,
  renderFooter
} from "../../../runtime/cli";
import { getRuntimeInfo } from "../../../runtime/env";
import handle from "./../../../../src/commands/add/page";
import { renderUsage } from "./usage";

const handleCommand = withContext<AddPagePayload>(handle);

/**
 * The entry point for the Add - Page command.
 */
async function handler() {
  try {
    const args = parseArgs(process.argv.slice(3), {
      boolean: [
        "help",
        "h",
        "?",
        "version",
        "v",
        "interactive",
        "i",
        "interact",
        "no-interactive",
        "no-interact",
        "no-banner",
        "",
        "verbose",
        "v"
      ],
      alias: {
        help: ["help", "HELP", "h", "H", "?", "?"],
        version: ["version", "VERSION", "v", "V"],
        interactive: [
          "interactive",
          "INTERACTIVE",
          "i",
          "I",
          "interact",
          "INTERACT"
        ],
        noInteractive: [
          "no-interactive",
          "NO-INTERACTIVE",
          "no-interact",
          "NO-INTERACT"
        ],
        noBanner: ["no-banner", "NO-BANNER"],
        verbose: ["verbose", "VERBOSE", "v", "V"],
        file: ["file", "FILE", "f", "F"]
      }
    });

    if (args["version"] || args["v"]) {
      console.log($storm.vars.APP_VERSION);
    } else {
      const runtimeInfo = getRuntimeInfo();
      const isVerbose =
        args["verbose"] ?? Boolean(process.env.EXAMPLES_CLI_VERBOSE);
      const isInteractive =
        args["interactive"] !== false &&
        args["no-interactive"] !== true &&
        Boolean(process.env.EXAMPLES_CLI_INTERACTIVE) &&
        runtimeInfo.isInteractive &&
        !runtimeInfo.isCI;

      if (args["no-banner"] !== true && !runtimeInfo.isCI) {
        console.log(
          renderBanner("Add - Page", "Add a page to the file system.")
        );
        console.log("");
      }

      if (args["help"] || args["h"] || args["?"]) {
        console.log(renderUsage(true));
        console.log("");
        console.log(renderFooter());
        console.log("");
      } else {
        if (isVerbose) {
          console.log(
            colors.dim(
              ` > Writing verbose output to console - as a result of the ${args["verbose"] ? 'user provided "verbose" option' : "EXAMPLES_CLI_VERBOSE environment variable"} `
            )
          );
          console.log("");

          if (isInteractive) {
            console.log(colors.dim(" > Running in interactive mode..."));
          } else {
            console.log(colors.dim(" > Running in non-interactive mode..."));
          }
          console.log("");
        }

        if (args["file"] === undefined && process.env.EXAMPLES_CLI_FILE) {
          args["file"] = process.env.EXAMPLES_CLI_FILE;
          if (isVerbose) {
            console.log(
              colors.dim(
                ` > Setting the file option to ${process.env.EXAMPLES_CLI_FILE} (via the EXAMPLES_CLI_FILE environment variable) `
              )
            );
          }
        }

        if (args["file"] === undefined) {
          if (isInteractive) {
            args["file"] = await prompt<string>(`Please provide a File value`, {
              type: "text",
              initial: "page.ts",
              default: "page.ts",
              placeholder: "The file to add to the file system"
            });
          }

          if (args["file"] === undefined) {
            args["file"] = "page.ts";
            if (isVerbose) {
              console.log(
                colors.dim(
                  ` > Setting the file option to "page.ts" (via it's default value) `
                )
              );
            }
          }
        }

        await handleCommand(deserialize<AddPagePayload>(args));
      }
    }
  } catch (err) {
    console.error(
      ` ${colors.red("âœ–")} ${colors.redBright(`Error occurred while processing Add - Page command.`)}`
    );
  }
}

export default handler;
