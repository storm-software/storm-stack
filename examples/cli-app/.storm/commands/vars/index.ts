/* eslint-disable */
// biome-ignore lint: disable
// prettier-ignore

// Generated by Storm Stack
// Note: Do not edit this file manually - it will be overwritten automatically

import { colors,renderBanner } from "../../runtime/cli";
import { getRuntimeInfo } from "../../runtime/env";
import handleDelete, { renderUsage as renderDeleteUsage } from "./delete";
import handleGet, { renderUsage as renderGetUsage } from "./get";
import handleList, { renderUsage as renderListUsage } from "./list";
import handleSet, { renderUsage as renderSetUsage } from "./set";

export interface VarsPayload {
  help: boolean;
  version: boolean;
  noBanner: boolean;
}

/**
 * Renders the Variable Management virtual command usage information.
 *
 * @param includeCommands - Whether to include rendering sub-commands.
 * @returns The rendered string displaying usage information.
 */
export function renderUsage(includeCommands = true) {
  return `${colors.bold("Variable Management Commands")} 

${colors.dim("Commands for managing the configuration parameters in the variables store.")}

  ${colors.bold("Usage:")}
    examples-cli vars set <key> <value> [options]
    examples-cli vars list [options]
    examples-cli vars get <key> [options]
    examples-cli vars delete <key> [options]${
      includeCommands !== false
        ? `
  ${colors.bold("Commands:")}
${renderSetUsage(false)
  .split("\n")
  .map(line => `    ${line}`)
  .join("\n")}

${renderListUsage(false)
  .split("\n")
  .map(line => `    ${line}`)
  .join("\n")}

${renderGetUsage(false)
  .split("\n")
  .map(line => `    ${line}`)
  .join("\n")}

${renderDeleteUsage(false)
  .split("\n")
  .map(line => `    ${line}`)
  .join("\n")}`
        : ""
    }

  ${colors.bold("Options:")}
    --help, -h, -?  ${colors.dim("Show help information. [default: false]")} 
    --version, -v   ${colors.dim("Show the version of the application. [default: false]")} 
    --no-banner     ${colors.dim("Hide the banner displayed while running the CLI application (will be set to true if running in a CI pipeline). [default: false]")}
`;
}

/**
 * The entry point for the Variable Management virtual command.
 */
async function handler() {
  try {
    if (process.argv.length > 3) {
      const command = process.argv[2];
      if (command && !command.startsWith("-")) {
        if (command.toLowerCase() === "set") {
          return handleSet();
        } else if (command.toLowerCase() === "list") {
          return handleList();
        } else if (command.toLowerCase() === "get") {
          return handleGet();
        } else if (command.toLowerCase() === "delete") {
          return handleDelete();
        }

        console.error(
          ` ${colors.red("✖")} ${colors.redBright(`Unknown command: ${colors.bold(command || "")}`)}`
        );
        console.log("");
        console.log(renderUsage(true));
        console.log("");

        return;
      }
    }

    const args = parseArgs(process.argv.slice(2), {
      boolean: ["help", "h", "?", "version", "v", "no-banner", ""],
      alias: {
        help: ["help", "HELP", "h", "H", "?", "?"],
        version: ["version", "VERSION", "v", "V"],
        noBanner: ["no-banner", "NO-BANNER"]
      }
    });

    if (args["version"] || args["v"]) {
      console.log($storm.vars.APP_VERSION);
    } else {
      const runtimeInfo = getRuntimeInfo();
      if (args["no-banner"] !== true && !runtimeInfo.isCI) {
        console.log(
          renderBanner(
            "Variable Management Commands",
            "Commands for managing the configuration parameters in the variables store."
          )
        );
        console.log("");
      }

      console.log(renderUsage(true));
      console.log("");
    }
  } catch (err) {
    console.error(
      ` ${colors.red("✖")} ${colors.redBright(`Error occurred while processing Variable Management command.`)}`
    );
  }
}

export default handler;
