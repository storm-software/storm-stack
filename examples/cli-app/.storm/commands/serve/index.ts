/* eslint-disable */
// biome-ignore lint: disable
// prettier-ignore

// Generated by Storm Stack
// Note: Do not edit this file manually - it will be overwritten automatically

import { deserialize } from "@deepkit/type";
import { getSink as getSentrySink } from "@storm-stack/log-sentry";
import { getSink as getStorageSink } from "@storm-stack/log-storage";
import { defineCommand } from "@stryke/cli/define-command";
import type { CommandContext } from "@stryke/cli/types";
import { builder } from "storm:app";
import { StormRequest } from "storm:request";
import { StormResponse } from "storm:response";
import { storage } from "storm:storage";
import handle from "../../../src/commands/serve";
import { ServePayload } from "../../../src/types";

const handleCommand = builder<
  StormRequest<ServePayload>,
  StormResponse<any>,
  CommandContext<any>,
  any
>({
  name: "examples-cli-app",
  log: [
    { handle: await getStorageSink({ storage }), logLevel: "debug" },
    { handle: getSentrySink(), logLevel: "error" }
  ],
  storage
})
  .handler(handle)
  .deserializer(
    payload => new StormRequest(deserialize<ServePayload>(payload.args))
  )
  .build();

export default defineCommand({
  meta: {
    name: "serve",
    displayName: "Serve",
    description: "Start a server and serve the application"
  },
  args: {
    host: {
      description: "The host to bind the server to.",
      type: "string",
      required: false,
      default: "localhost"
    },
    port: {
      description: "The port to bind the server to.",
      type: "number",
      required: false,
      default: 3000
    },
    compress: {
      description: "Should the server serve compressed files?",
      type: "boolean",
      required: false,
      default: false,
      negativeDescription: 'The inverse of the "compress" argument.'
    },
    platform: {
      description: "Should the server serve compressed files?",
      type: "enum",
      options: ["node", "browser"],
      required: false,
      default: "node"
    },
    loadEnv: {
      description:
        "Should the server load environment variables from the .env file?",
      type: "boolean",
      required: false,
      default: true,
      negativeDescription: 'The inverse of the "loadEnv" argument.'
    }
  },
  handle: handleCommand
});
