/* eslint-disable */
// biome-ignore lint: disable
// prettier-ignore

// Generated by Storm Stack
// Note: Do not edit this file manually - it will be overwritten automatically

import { deserialize } from "@deepkit/type";
import { withContext } from "../../runtime/app";
import {
  colors,
  parseArgs,
  prompt,
  renderBanner,
  renderFooter
} from "../../runtime/cli";
import { isInteractive, isMinimal } from "../../runtime/env";
import handle from "./../../../src/commands/serve";
import { renderUsage } from "./usage";

export interface ServePayload {
  help: boolean;
  version: boolean;
  interactive: boolean;
  noInteractive: boolean;
  noBanner: boolean;
  verbose: boolean;
  host: string;
  port: number;
  compress: boolean;
  noCompress: boolean;
  platform: "node" | "browser";
  loadEnv: boolean;
  noLoadEnv: boolean;
}

const handleCommand = withContext<ServePayload>(handle);

/**
 * The entry point for the Serve command.
 */
async function handler() {
  try {
    const args = parseArgs(process.argv.slice(2), {
      boolean: [
        "help",
        "h",
        "?",
        "version",
        "v",
        "interactive",
        "i",
        "interact",
        "no-interactive",
        "no-interact",
        "no-banner",
        "",
        "verbose",
        "v",
        "compress",
        "c",
        "no-compress",
        "",
        "load-env",
        "l",
        "no-load-env",
        ""
      ],
      alias: {
        help: ["help", "HELP", "h", "H", "?", "?"],
        version: ["version", "VERSION", "v", "V"],
        interactive: [
          "interactive",
          "INTERACTIVE",
          "i",
          "I",
          "interact",
          "INTERACT"
        ],
        noInteractive: [
          "no-interactive",
          "NO-INTERACTIVE",
          "no-interact",
          "NO-INTERACT"
        ],
        noBanner: ["no-banner", "NO-BANNER"],
        verbose: ["verbose", "VERBOSE", "v", "V"],
        host: ["host", "HOST"],
        port: ["port", "PORT", "p", "P"],
        compress: ["compress", "COMPRESS", "c", "C"],
        noCompress: ["no-compress", "NO-COMPRESS"],
        platform: ["platform", "PLATFORM"],
        loadEnv: ["load-env", "LOAD-ENV", "l", "L"],
        noLoadEnv: ["no-load-env", "NO-LOAD-ENV"]
      }
    });

    if (args["version"] || args["v"]) {
      console.log($storm.vars.APP_VERSION);
    } else {
      const isVerbose =
        args["verbose"] ?? Boolean(process.env.EXAMPLES_CLI_VERBOSE);
      const isPromptEnabled =
        args["interactive"] !== false &&
        args["no-interactive"] !== true &&
        Boolean(process.env.EXAMPLES_CLI_INTERACTIVE) &&
        isInteractive &&
        !isMinimal;

      if (args["no-banner"] !== true && !isMinimal) {
        console.log(
          renderBanner("Serve", "Start a server and serve the application.")
        );
        console.log("");
      }

      if (args["help"] || args["h"] || args["?"]) {
        console.log(renderUsage(true));
        console.log("");
        console.log(renderFooter());
        console.log("");
      } else {
        if (isVerbose) {
          console.log(
            colors.dim(
              ` > Writing verbose output to console - as a result of the ${args["verbose"] ? 'user provided "verbose" option' : "EXAMPLES_CLI_VERBOSE environment variable"} `
            )
          );
          console.log("");

          if (isPromptEnabled) {
            console.log(colors.dim(" > Running in interactive mode..."));
          } else {
            console.log(colors.dim(" > Running in non-interactive mode..."));
          }
          console.log("");
        }

        if (args["host"] === undefined && process.env.EXAMPLES_CLI_HOST) {
          args["host"] = process.env.EXAMPLES_CLI_HOST;
          if (isVerbose) {
            console.log(
              colors.dim(
                ` > Setting the host option to ${process.env.EXAMPLES_CLI_HOST} (via the EXAMPLES_CLI_HOST environment variable) `
              )
            );
          }
        }

        if (args["port"] === undefined && process.env.EXAMPLES_CLI_PORT) {
          args["port"] = process.env.EXAMPLES_CLI_PORT;
          if (isVerbose) {
            console.log(
              colors.dim(
                ` > Setting the port option to ${process.env.EXAMPLES_CLI_PORT} (via the EXAMPLES_CLI_PORT environment variable) `
              )
            );
          }
        }

        if (
          args["compress"] === undefined &&
          process.env.EXAMPLES_CLI_COMPRESS
        ) {
          args["compress"] = process.env.EXAMPLES_CLI_COMPRESS;
          if (isVerbose) {
            console.log(
              colors.dim(
                ` > Setting the compress option to ${process.env.EXAMPLES_CLI_COMPRESS} (via the EXAMPLES_CLI_COMPRESS environment variable) `
              )
            );
          }
        }

        if (
          args["no-compress"] === undefined &&
          process.env.EXAMPLES_CLI_NO_COMPRESS
        ) {
          args["no-compress"] = process.env.EXAMPLES_CLI_NO_COMPRESS;
          if (isVerbose) {
            console.log(
              colors.dim(
                ` > Setting the no-compress option to ${process.env.EXAMPLES_CLI_NO_COMPRESS} (via the EXAMPLES_CLI_NO_COMPRESS environment variable) `
              )
            );
          }
        }

        if (
          args["platform"] === undefined &&
          process.env.EXAMPLES_CLI_PLATFORM
        ) {
          args["platform"] = process.env.EXAMPLES_CLI_PLATFORM;
          if (isVerbose) {
            console.log(
              colors.dim(
                ` > Setting the platform option to ${process.env.EXAMPLES_CLI_PLATFORM} (via the EXAMPLES_CLI_PLATFORM environment variable) `
              )
            );
          }
        }

        if (
          args["load-env"] === undefined &&
          process.env.EXAMPLES_CLI_LOAD_ENV
        ) {
          args["load-env"] = process.env.EXAMPLES_CLI_LOAD_ENV;
          if (isVerbose) {
            console.log(
              colors.dim(
                ` > Setting the load-env option to ${process.env.EXAMPLES_CLI_LOAD_ENV} (via the EXAMPLES_CLI_LOAD_ENV environment variable) `
              )
            );
          }
        }

        if (
          args["no-load-env"] === undefined &&
          process.env.EXAMPLES_CLI_NO_LOAD_ENV
        ) {
          args["no-load-env"] = process.env.EXAMPLES_CLI_NO_LOAD_ENV;
          if (isVerbose) {
            console.log(
              colors.dim(
                ` > Setting the no-load-env option to ${process.env.EXAMPLES_CLI_NO_LOAD_ENV} (via the EXAMPLES_CLI_NO_LOAD_ENV environment variable) `
              )
            );
          }
        }

        if (args["host"] === undefined) {
          if (isPromptEnabled) {
            args["host"] = await prompt<string>(`Please provide a Host value`, {
              type: "text",
              initial: "localhost",
              default: "localhost",
              placeholder: "The host to bind the server to"
            });
          }

          if (args["host"] === undefined) {
            args["host"] = "localhost";
            if (isVerbose) {
              console.log(
                colors.dim(
                  ` > Setting the host option to "localhost" (via it's default value) `
                )
              );
            }
          }
        }

        if (args["port"] === undefined) {
          if (isPromptEnabled) {
            args["port"] = await prompt<number>(`Please provide a Port value`, {
              type: "text",
              initial: "3000",
              default: "3000",
              placeholder: "The port to bind the server to"
            });
          }

          if (args["port"] === undefined) {
            args["port"] = 3000;
            if (isVerbose) {
              console.log(
                colors.dim(
                  ` > Setting the port option to 3000 (via it's default value) `
                )
              );
            }
          }
        }

        if (args["compress"] === undefined) {
          if (isPromptEnabled) {
            args["compress"] = await prompt<boolean>(
              `Please confirm the Compress value ${colors.dim("(Should the server serve compressed files?)")}`,
              {
                type: "confirm"
              }
            );
          }
        }

        if (args["no-compress"] === undefined) {
          args["no-compress"] = false;
          if (isVerbose) {
            console.log(
              colors.dim(
                ` > Setting the no-compress option to false (via it's default value) `
              )
            );
          }
        }

        if (args["platform"] === undefined) {
          if (isPromptEnabled) {
            args["platform"] = await prompt<"node" | "browser">(
              `Please select a Platform value ${colors.dim("(Should the server serve compressed files?)")}`,
              {
                type: "select",
                initial: "node",
                options: ["node", "browser"]
              }
            );
          }

          if (args["platform"] === undefined) {
            args["platform"] = "node";
            if (isVerbose) {
              console.log(
                colors.dim(
                  ` > Setting the platform option to "node" (via it's default value) `
                )
              );
            }
          }
        }

        if (args["load-env"] === undefined) {
          if (isPromptEnabled) {
            args["load-env"] = await prompt<boolean>(
              `Please confirm the Load Env value ${colors.dim("(Should the server load environment variables from the .env file?)")}`,
              {
                type: "confirm",
                initial: true
              }
            );
          }

          if (args["load-env"] === undefined) {
            args["load-env"] = true;
            if (isVerbose) {
              console.log(
                colors.dim(
                  ` > Setting the load-env option to true (via it's default value) `
                )
              );
            }
          }
        }

        if (args["no-load-env"] === undefined) {
          args["no-load-env"] = false;
          if (isVerbose) {
            console.log(
              colors.dim(
                ` > Setting the no-load-env option to false (via it's default value) `
              )
            );
          }
        }

        await handleCommand(deserialize<ServePayload>(args));
      }
    }
  } catch (err) {
    console.error(
      ` ${colors.red("✖")} ${colors.redBright(`Error occurred while processing Serve command.`)}`
    );
  }
}

export default handler;
