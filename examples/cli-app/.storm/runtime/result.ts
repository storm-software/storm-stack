/* eslint-disable */
// biome-ignore lint: disable
// prettier-ignore

// Generated by Storm Stack
// Note: Do not edit this file manually - it will be overwritten automatically

import { IStormResult } from "@storm-stack/types/result";
import { useStorm } from "./context";
import { isStormError, StormError } from "./error";

/**
 * A base result class used by the Storm Stack runtime.
 */
export class StormResult<TData extends any | StormError = any | StormError>
  implements IStormResult<TData>
{
  /**
   * Create a new result.
   *
   * @remarks
   * **IMPORTANT:** This function uses the `$storm` context object - never use this function outside of the context wrapper/tree since the context will not be available.
   *
   * @param data - The result data
   */
  public static create<TData>(data: TData): StormResult<TData> {
    return new StormResult(useStorm().payload.id, useStorm().meta, data);
  }

  /**
   * The result meta.
   */
  public readonly meta: Record<string, any>;

  /**
   * The result data.
   */
  public data: TData;

  /**
   * The payload identifier.
   */
  public readonly payloadId: string;

  /**
   * The response created timestamp.
   */
  public readonly timestamp = Date.now();

  /**
   * An indicator of whether the response was successful.
   */
  public get success() {
    return !isStormError(this.data);
  }

  /**
   * Create a new result.
   *
   * @param payloadId - The payload identifier.
   * @param meta - The current context's metadata.
   * @param data - The result data
   */
  public constructor(
    payloadId: string,
    meta: Record<string, any>,
    data: TData
  ) {
    this.payloadId = payloadId;
    this.meta = meta;
    this.data = data;
  }
}
