/* eslint-disable */
// biome-ignore lint: disable
// prettier-ignore

// Generated by Storm Stack
// Note: Do not edit this file manually - it will be overwritten automatically

import type {
StormBuildInfo,
StormEnvPaths,
StormRuntimeInfo
} from "@storm-stack/types/node/env";
import os from "node:os";
import { basename, join } from "node:path";

/** Detect if stdout.TTY is available */
export const hasTTY = Boolean(process.stdout && process.stdout.isTTY);

/** Detect if the application is running in a CI environment */
export const isCI = Boolean(
  process.env.STORM_CI ||
    process.env.CI ||
    process.env.CONTINUOUS_INTEGRATION ||
    process.env.RUN_ID ||
    process.env.AGOLA_GIT_REF ||
    process.env.AC_APPCIRCLE ||
    process.env.APPVEYOR ||
    process.env.CODEBUILD ||
    process.env.TF_BUILD ||
    process.env.bamboo_planKey ||
    process.env.BITBUCKET_COMMIT ||
    process.env.BITRISE_IO ||
    process.env.BUDDY_WORKSPACE_ID ||
    process.env.BUILDKITE ||
    process.env.CIRCLECI ||
    process.env.CIRRUS_CI ||
    process.env.CF_BUILD_ID ||
    process.env.CM_BUILD_ID ||
    process.env.CI_NAME ||
    process.env.DRONE ||
    process.env.DSARI ||
    process.env.EARTHLY_CI ||
    process.env.EAS_BUILD ||
    process.env.GERRIT_PROJECT ||
    process.env.GITEA_ACTIONS ||
    process.env.GITHUB_ACTIONS ||
    process.env.GITLAB_CI ||
    process.env.GOCD ||
    process.env.BUILDER_OUTPUT ||
    process.env.HARNESS_BUILD_ID ||
    process.env.JENKINS_URL ||
    process.env.LAYERCI ||
    process.env.MAGNUM ||
    process.env.NETLIFY ||
    process.env.NEVERCODE ||
    process.env.PROW_JOB_ID ||
    process.env.RELEASE_BUILD_ID ||
    process.env.RENDER ||
    process.env.SAILCI ||
    process.env.HUDSON ||
    process.env.SCREWDRIVER ||
    process.env.SEMAPHORE ||
    process.env.SOURCEHUT ||
    process.env.STRIDER ||
    process.env.TASK_ID ||
    process.env.RUN_ID ||
    process.env.TEAMCITY_VERSION ||
    process.env.TRAVIS ||
    process.env.VELA ||
    process.env.NOW_BUILDER ||
    process.env.APPCENTER_BUILD_ID ||
    process.env.CI_XCODE_PROJECT ||
    process.env.XCS ||
    false
);

/** Detect the `NODE_ENV` environment variable */
export const mode = String(
  $storm.vars.MODE ||
    process.env.NEXT_PUBLIC_VERCEL_ENV ||
    process.env.NODE_ENV ||
    "production"
);

/** Detect if the application is running in production mode */
export const isProduction = ["prd", "prod", "production"].includes(
  mode.toLowerCase()
);

/** Detect if the application is running in staging mode */
export const isStaging = ["stg", "stage", "staging"].includes(
  mode.toLowerCase()
);

/** Detect if the application is running in development mode */
export const isDevelopment = ["dev", "development"].includes(
  mode.toLowerCase()
);

/** Detect if the application is running in debug mode */
export const isDebug = isDevelopment && Boolean(process.env.DEBUG);

/** Detect if the application is running in test mode */
export const isTest =
  isDevelopment ||
  isStaging ||
  ["tst", "test", "testing"].includes(mode.toLowerCase()) ||
  Boolean(process.env.TEST);

/** Detect if MINIMAL environment variable is set, running in CI or test or TTY is unavailable */
export const isMinimal =
  Boolean(process.env.MINIMAL) || isCI || isTest || !hasTTY;

/** Detect if the runtime platform is Windows */
export const isWindows = /^win/i.test(process.platform);

/** Detect if the runtime platform is Linux */
export const isLinux = /^linux/i.test(process.platform);

/** Detect if the runtime platform is macOS (darwin kernel) */
export const isMacOS = /^darwin/i.test(process.platform);

/** Detect if the runtime platform is interactive */
export const isInteractive =
  !isMinimal && Boolean(process.stdin?.isTTY && process.env.TERM !== "dumb");

/** Detect if Unicode characters are supported */
export const isUnicodeSupported =
  process.platform !== "win32"
    ? process.env.TERM !== "linux"
    : Boolean(process.env.WT_SESSION) ||
      Boolean(process.env.TERMINUS_SUBLIME) ||
      process.env.ConEmuTask === "{cmd::Cmder}" ||
      process.env.TERM_PROGRAM === "Terminus-Sublime" ||
      process.env.TERM_PROGRAM === "vscode" ||
      process.env.TERM === "xterm-256color" ||
      process.env.TERM === "alacritty" ||
      process.env.TERM === "rxvt-unicode" ||
      process.env.TERM === "rxvt-unicode-256color" ||
      process.env.TERMINAL_EMULATOR === "JetBrains-JediTerm";

/** Detect if color is supported */
export const isColorSupported =
  !process.env.NO_COLOR &&
  (Boolean(process.env.FORCE_COLOR) ||
    ((hasTTY || isWindows) && process.env.TERM !== "dumb"));

/**
 * Indicates if running in Node.js or a Node.js compatible runtime.
 *
 * @remarks
 * When running code in Bun and Deno with Node.js compatibility mode, `isNode` flag will be also `true`, indicating running in a Node.js compatible runtime.
 */
export const isNode = globalThis.process?.release?.name === "node";

/** The organization that maintains the application */
export const organization = "storm-software";

/** The current application */
export const name = "examples-cli-app";
/** The current application */
export const version = "0.0.1";

const homedir = os.homedir();
const tmpdir = os.tmpdir();

/**
 * The environment paths for storing things like data, config, logs, and cache in the current runtime environment.
 *
 * @remarks
 * On macOS, directories are generally created in `~/Library/Application Support/<name>`.
 * On Windows, directories are generally created in `%AppData%/<name>`.
 * On Linux, directories are generally created in `~/.config/<name>` - this is determined via the [XDG Base Directory spec](https://specifications.freedesktop.org/basedir-spec/latest/).
 *
 * If the `STORM_DATA_DIR`, `STORM_CONFIG_DIR`, `STORM_CACHE_DIR`, `STORM_LOG_DIR`, or `STORM_TEMP_DIR` environment variables are set, they will be used instead of the default paths.
 */
export const paths = isMacOS
  ? {
      data: process.env.STORM_DATA_DIR
        ? join(process.env.STORM_DATA_DIR, name)
        : join(homedir, "Library", "Application Support", organization, name),
      config: process.env.STORM_CONFIG_DIR
        ? join(process.env.STORM_CONFIG_DIR, name)
        : join(homedir, "Library", "Preferences", organization, name),
      cache: process.env.STORM_CACHE_DIR
        ? join(process.env.STORM_CACHE_DIR, name)
        : join(homedir, "Library", "Caches", organization, name),
      log: process.env.STORM_LOG_DIR
        ? join(process.env.STORM_LOG_DIR, name)
        : join(homedir, "Library", "Logs", organization, name),
      temp: process.env.STORM_TEMP_DIR
        ? join(process.env.STORM_TEMP_DIR, name)
        : join(tmpdir, organization, name)
    }
  : isWindows
    ? {
        data: process.env.STORM_DATA_DIR
          ? join(process.env.STORM_DATA_DIR, name)
          : join(
              process.env.LOCALAPPDATA || join(homedir, "AppData", "Local"),
              "StormSoftware",
              "ExamplesCLIApp",
              "Data"
            ),
        config: process.env.STORM_CONFIG_DIR
          ? join(process.env.STORM_CONFIG_DIR, name)
          : join(
              process.env.APPDATA || join(homedir, "AppData", "Roaming"),
              "StormSoftware",
              "ExamplesCLIApp",
              "Config"
            ),
        cache: process.env.STORM_CACHE_DIR
          ? join(process.env.STORM_CACHE_DIR, name)
          : join(
              process.env.LOCALAPPDATA || join(homedir, "AppData", "Local"),
              "Cache",
              "StormSoftware"
            ),
        log: process.env.STORM_LOG_DIR
          ? join(process.env.STORM_LOG_DIR, name)
          : join(
              process.env.LOCALAPPDATA || join(homedir, "AppData", "Local"),
              "StormSoftware",
              "ExamplesCLIApp",
              "Log"
            ),
        temp: process.env.STORM_TEMP_DIR
          ? join(process.env.STORM_TEMP_DIR, name)
          : join(tmpdir, "StormSoftware", "ExamplesCLIApp")
      }
    : ({
        data: process.env.STORM_DATA_DIR
          ? join(process.env.STORM_DATA_DIR, name)
          : join(
              process.env.XDG_DATA_HOME || join(homedir, ".local", "share"),
              organization,
              name
            ),
        config: process.env.STORM_CONFIG_DIR
          ? join(process.env.STORM_CONFIG_DIR, name)
          : join(
              process.env.XDG_CONFIG_HOME || join(homedir, ".config"),
              organization,
              name
            ),
        cache: process.env.STORM_CACHE_DIR
          ? join(process.env.STORM_CACHE_DIR, name)
          : join(
              process.env.XDG_CACHE_HOME || join(homedir, ".cache"),
              organization,
              name
            ),
        log: join(
          process.env.XDG_STATE_HOME || join(homedir, ".local", "state"),
          organization,
          name
        ),
        temp: process.env.STORM_TEMP_DIR
          ? join(process.env.STORM_TEMP_DIR, name)
          : process.env.DEVENV_RUNTIME || process.env.XDG_RUNTIME_DIR
            ? join(
                (process.env.DEVENV_RUNTIME || process.env.XDG_RUNTIME_DIR)!,
                organization,
                name
              )
            : join(tmpdir, basename(homedir), organization, name)
      } as StormEnvPaths);

/** The static build information collection */
export const build = {
  packageName: "@storm-stack/examples-cli-app",
  organization,
  buildId: $storm.vars.BUILD_ID!,
  timestamp: $storm.vars.BUILD_TIMESTAMP
    ? Number($storm.vars.BUILD_TIMESTAMP)
    : 0,
  releaseId: $storm.vars.RELEASE_ID!,
  releaseTag: $storm.vars.RELEASE_TAG!,
  mode,
  platform: ($storm.vars.PLATFORM || "node") as StormBuildInfo["platform"],
  isProduction,
  isStaging,
  isDevelopment
} as StormBuildInfo;

/** The dynamic runtime information collection */
export const runtime = {
  isTest,
  isDebug,
  isNode,
  hasTTY,
  isWindows,
  isLinux,
  isMacOS,
  isCI,
  isInteractive,
  isMinimal,
  isColorSupported,
  isUnicodeSupported,
  isServer: isNode || build.platform === "node"
} as StormRuntimeInfo;

export type StormVariables = {
  /**
   * The appcircle build ID. This value is set by certain CI/CD systems.
   */
  AC_APPCIRCLE?: string;

  /**
   * The agola git reference. This value is set by certain CI/CD systems.
   */
  AGOLA_GIT_REF?: string;

  /**
   * The name of the application.
   */
  APP_NAME: string;

  /**
   * The version of the application.
   */
  APP_VERSION: string;

  /**
   * The appcenter build ID. This value is set by certain CI/CD systems.
   */
  APPCENTER_BUILD_ID?: string;

  /**
   * A variable that specifies the application data directory on Windows.
   */
  APPDATA?: string;

  /**
   * The appveyor build ID. This value is set by certain CI/CD systems.
   */
  APPVEYOR?: string;

  /**
   * The bamboo plan key. This value is set by certain CI/CD systems.
   */
  bamboo_planKey?: string;

  /**
   * The bitbucket commit. This value is set by certain CI/CD systems.
   */
  BITBUCKET_COMMIT?: string;

  /**
   * The bitrise build ID. This value is set by certain CI/CD systems.
   */
  BITRISE_IO?: string;

  /**
   * The buddy workspace ID. This value is set by certain CI/CD systems.
   */
  BUDDY_WORKSPACE_ID?: string;

  /**
   * A checksum hash created during the build.
   */
  BUILD_CHECKSUM: string;

  /**
   * The unique identifier for the build.
   */
  BUILD_ID: string;

  /**
   * The timestamp the build was ran at.
   */
  BUILD_TIMESTAMP: number;

  /**
   * The builder output build ID. This value is set by certain CI/CD systems.
   */
  BUILDER_OUTPUT?: string;

  /**
   * The buildkite build ID. This value is set by certain CI/CD systems.
   */
  BUILDKITE?: string;

  /**
   * The cf build ID. This value is set by certain CI/CD systems.
   */
  CF_BUILD_ID?: string;

  /**
   * An indicator that specifies the current runtime is a continuous integration environment.
   */
  CI: boolean;

  /**
   * The ci name. This value is set by certain CI/CD systems.
   */
  CI_NAME?: string;

  /**
   * The xcode project build ID. This value is set by certain CI/CD systems.
   */
  CI_XCODE_PROJECT?: string;

  /**
   * The circleci build ID. This value is set by certain CI/CD systems.
   */
  CIRCLECI?: string;

  /**
   * The cirrusci build ID. This value is set by certain CI/CD systems.
   */
  CIRRUS_CI?: string;

  /**
   * The cm build ID. This value is set by certain CI/CD systems.
   */
  CM_BUILD_ID?: string;

  /**
   * The codebuild build ID. This value is set by certain CI/CD systems.
   */
  CODEBUILD?: string;

  /**
   * The ConEmu task name. This variable is set by certain terminal emulators.
   */
  ConEmuTask?: string;

  /**
   * An indicator that specifies the current runtime is a continuous integration environment.
   */
  CONTINUOUS_INTEGRATION: boolean;

  /**
   * The cursor trace ID. This variable is set by certain terminal emulators.
   */
  CURSOR_TRACE_ID?: string;

  /**
   * Indicates if the application is running in debug mode.
   */
  DEBUG: boolean;

  /**
   * The default locale for the application.
   */
  DEFAULT_LOCALE: string;

  /**
   * The default timezone for the application.
   */
  DEFAULT_TIMEZONE: string;

  /**
   * A variable that specifies the [Devenv](https://devenv.sh/) runtime directory.
   */
  DEVENV_RUNTIME?: string;

  /**
   * The drone build ID. This value is set by certain CI/CD systems.
   */
  DRONE?: string;

  /**
   * The dsari build ID. This value is set by certain CI/CD systems.
   */
  DSARI?: string;

  /**
   * The earthly build ID. This value is set by certain CI/CD systems.
   */
  EARTHLY_CI?: string;

  /**
   * The eas build ID. This value is set by certain CI/CD systems.
   */
  EAS_BUILD?: string;

  /**
   * The environment the application is running in. This value will be populated with the value of `MODE` if not provided.
   */
  ENVIRONMENT: string;

  /**
   * An API end point to lookup error messages given an error code.
   */
  ERROR_URL: string;

  /**
   * An indicator that specifies the current runtime is a force color environment.
   */
  FORCE_COLOR: boolean;

  /**
   * An indicator that specifies the current runtime should force hyperlinks in terminal output.
   */
  FORCE_HYPERLINK: boolean;

  /**
   * The gerrit project. This value is set by certain CI/CD systems.
   */
  GERRIT_PROJECT?: string;

  /**
   * The gitea actions build ID. This value is set by certain CI/CD systems.
   */
  GITEA_ACTIONS?: string;

  /**
   * The github actions build ID. This value is set by certain CI/CD systems.
   */
  GITHUB_ACTIONS?: string;

  /**
   * The gitlab ci build ID. This value is set by certain CI/CD systems.
   */
  GITLAB_CI?: string;

  /**
   * The go cd build ID. This value is set by certain CI/CD systems.
   */
  GOCD?: string;

  /**
   * The harness build ID. This value is set by certain CI/CD systems.
   */
  HARNESS_BUILD_ID?: string;

  /**
   * The hudson build ID. This value is set by certain CI/CD systems.
   */
  HUDSON?: string;

  /**
   * Indicates if error data should be included.
   */
  INCLUDE_ERROR_DATA: boolean;

  /**
   * The jenkins url. This value is set by certain CI/CD systems.
   */
  JENKINS_URL?: string;

  /**
   * The layerci build ID. This value is set by certain CI/CD systems.
   */
  LAYERCI?: string;

  /**
   * A variable that specifies the current user's local application data directory on Windows.
   */
  LOCALAPPDATA?: string;

  /**
   * The default lowest log level to accept. If `null`, the logger will reject all records. This value only applies if `lowestLogLevel` is not provided to the `logs` configuration.
   */
  LOG_LEVEL?: "debug" | "info" | "warning" | "error" | "fatal" | null;

  /**
   * The magnum build ID. This value is set by certain CI/CD systems.
   */
  MAGNUM?: string;

  /**
   * An indicator that specifies the current runtime is a minimal environment.
   */
  MINIMAL: boolean;

  /**
   * The mode in which the application is running.
   */
  MODE: "development" | "staging" | "production";

  /**
   * The netlify build ID. This value is set by certain CI/CD systems.
   */
  NETLIFY?: string;

  /**
   * The nevercode build ID. This value is set by certain CI/CD systems.
   */
  NEVERCODE?: string;

  /**
   * An indicator that specifies the current runtime is a no color environment.
   */
  NO_COLOR: boolean;

  /**
   * The environment the application is running in. This variable is a duplicate of `ENVIRONMENT` to support use in external packages.
   */
  NODE_ENV: "development" | "staging" | "production";

  /**
   * The now builder build ID. This value is set by certain CI/CD systems.
   */
  NOW_BUILDER?: string;

  /**
   * The name of the organization that maintains the application.
   */
  ORGANIZATION: string;

  /**
   * The platform for which the application was built.
   */
  PLATFORM: "node" | "browser";

  /**
   * The prow job ID. This value is set by certain CI/CD systems.
   */
  PROW_JOB_ID?: string;

  /**
   * The release build ID. This value is set by certain CI/CD systems.
   */
  RELEASE_BUILD_ID?: string;

  /**
   * The unique identifier for the release.
   */
  RELEASE_ID: string;

  /**
   * The tag for the release. This is generally in the format of "\<APP_NAME\>\@\<APP_VERSION\>".
   */
  RELEASE_TAG: string;

  /**
   * The render build ID. This value is set by certain CI/CD systems.
   */
  RENDER?: string;

  /**
   * The unique identifier for the current run. This value is set by certain CI/CD systems.
   */
  RUN_ID?: string;

  /**
   * The sailci build ID. This value is set by certain CI/CD systems.
   */
  SAILCI?: string;

  /**
   * The screwdriver build ID. This value is set by certain CI/CD systems.
   */
  SCREWDRIVER?: string;

  /**
   * The semaphore build ID. This value is set by certain CI/CD systems.
   */
  SEMAPHORE?: string;

  /**
   * The DSN for Sentry
   */
  SENTRY_DSN: string;

  /**
   * The sourcehut build ID. This value is set by certain CI/CD systems.
   */
  SOURCEHUT?: string;

  /**
   * Indicates if error stack traces should be captured.
   */
  STACKTRACE: boolean;

  /**
   * The Storm Stack application's cached data directory.
   */
  STORM_CACHE_DIR?: string;

  /**
   * The Storm Stack application's configuration data directory.
   */
  STORM_CONFIG_DIR?: string;

  /**
   * The Storm Stack application's runtime data directory.
   */
  STORM_DATA_DIR?: string;

  /**
   * The Storm Stack application's logging directory.
   */
  STORM_LOG_DIR?: string;

  /**
   * An indicator that specifies the application is running in the local Storm Stack development environment.
   */
  STORM_STACK_LOCAL: boolean;

  /**
   * The Storm Stack application's temporary data directory.
   */
  STORM_TEMP_DIR?: string;

  /**
   * The strider build ID. This value is set by certain CI/CD systems.
   */
  STRIDER?: string;

  /**
   * The task ID. This value is set by certain CI/CD systems.
   */
  TASK_ID?: string;

  /**
   * The teamcity version. This value is set by certain CI/CD systems.
   */
  TEAMCITY_VERSION?: string;

  /**
   * The terminal type. This variable is set by certain CI/CD systems.
   */
  TERM?: string;

  /**
   * The terminal program name. This variable is set by certain terminal emulators.
   */
  TERM_PROGRAM: string;

  /**
   * The terminal program version. This variable is set by certain terminal emulators.
   */
  TERM_PROGRAM_VERSION: string;

  /**
   * The terminal emulator name. This variable is set by certain terminal emulators.
   */
  TERMINAL_EMULATOR?: string;

  /**
   * An indicator that specifies the current terminal is running Terminus Sublime. This variable is set by certain terminal emulators.
   */
  TERMINUS_SUBLIME?: boolean;

  /**
   * An indicator that specifies the current runtime is a test environment.
   */
  TEST: boolean;

  /**
   * The task force build ID. This value is set by certain CI/CD systems.
   */
  TF_BUILD?: string;

  /**
   * The travis build ID. This value is set by certain CI/CD systems.
   */
  TRAVIS?: string;

  /**
   * The vela build ID. This value is set by certain CI/CD systems.
   */
  VELA?: string;

  /**
   * The Vercel environment. This variable is set by Vercel when the application is running in a Vercel environment.
   */
  VERCEL_ENV?: string;

  /**
   * The VTE version. This variable is set by certain terminal emulators.
   */
  VTE_VERSION?: string;

  /**
   * The terminal emulator session ID. This variable is set by certain terminal emulators.
   */
  WT_SESSION?: string;

  /**
   * The xcode server build ID. This value is set by certain CI/CD systems.
   */
  XCS?: string;

  /**
   * A variable that specifies the cache path in the home directory on Linux systems using the XDG base directory specification.
   */
  XDG_CACHE_HOME?: string;

  /**
   * A variable that specifies the configuration path in the home directory on Linux systems using the XDG base directory specification.
   */
  XDG_CONFIG_HOME?: string;

  /**
   * A variable that specifies the data path in the home directory on Linux systems using the XDG base directory specification.
   */
  XDG_DATA_HOME?: string;

  /**
   * A variable that specifies the runtime directory on Linux systems using the XDG base directory specification.
   */
  XDG_RUNTIME_DIR?: string;

  /**
   * A variable that specifies the state directory on Linux systems using the XDG base directory specification.
   */
  XDG_STATE_HOME?: string;

  [key: string]: any;
};
