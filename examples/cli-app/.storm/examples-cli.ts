#!/usr/bin/env node
/* eslint-disable */
// biome-ignore lint: disable
// prettier-ignore

// Generated by Storm Stack
// Note: Do not edit this file manually - it will be overwritten automatically

import "storm:init";

import { alignText, alignTextCenter } from "@stryke/cli/align-text";
import { renderLicense, renderUrls } from "@stryke/cli/meta";
import { resolveCommand } from "@stryke/cli/parse";
import { runCommand } from "@stryke/cli/run";
import { registerShutdown } from "@stryke/cli/shutdown";
import { renderUsage } from "@stryke/cli/usage";
import consola from "consola";
import { colors } from "consola/utils";
import { isStormError } from "storm:error";

const shutdown = await registerShutdown();

try {
  const rawArgs = process.argv.slice(2);
  const command = await resolveCommand(
    {
      meta: {
        name: "examples-cli-app",
        displayName: "Examples CLI App",
        version: $storm.env.APP_VERSION,
        description: "An example Storm Stack commandline application",
        homepage: "https://stormsoftware.com",
        license: "Apache-2.0",
        licensing: "https://stormsoftware.com/license",
        docs: "https://stormsoftware.com/docs",
        repository: "https://github.com/storm-software/storm-stack",
        contact: "https://stormsoftware.com/contact"
      },
      subCommands: {
        add: () => import("./commands/add").then(m => m.default),
        serve: () => import("./commands/serve").then(m => m.default)
      }
    },
    rawArgs
  );

  const meta =
    typeof command.meta === "function"
      ? await command.meta()
      : await command.meta;
  if (meta) {
    const renderedUrls = renderUrls(meta);
    const renderedDescription = `${colors.dim(meta.description)}`;

    const titleText = `${colors.bold(`${meta.displayName} v${meta.version}`)}`;
    const renderedTitle = alignText(titleText, lineLength =>
      alignTextCenter(
        lineLength,
        Math.max(
          ...[titleText, renderedDescription, renderedUrls]
            .join("\n")
            .split("\n")
            .map(line => line.length)
        )
      )
    );

    consola.box(
      `${renderedTitle}\n\n${renderedDescription}\n\n${renderedUrls}`,
      {
        padding: 1
      }
    );
    consola.log(`\n\n${renderLicense(meta)}\n\n`);
  }

  if (
    rawArgs.includes("--help") ||
    rawArgs.includes("-h") ||
    rawArgs.includes("-?")
  ) {
    consola.log(`${await renderUsage(command)}\n\n`);
    consola.log(`${await renderLicense(meta)}\n\n`);
  } else if (
    rawArgs.length === 1 &&
    (rawArgs[0] === "--version" || rawArgs[0] === "-v")
  ) {
    const meta =
      typeof command.meta === "function"
        ? await command.meta()
        : await command.meta;
    if (!meta?.version) {
      throw new StormError({ code: 8 });
    }

    consola.log(meta.version);
  } else {
    await runCommand(command, { rawArgs });
  }
} catch (error) {
  consola.error(error, "An unexpected error occurred");
  await shutdown(isStormError(error) ? error.code : 1);
}
