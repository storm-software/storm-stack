#!/usr/bin/env node

/* eslint-disable */
// biome-ignore lint: disable
// prettier-ignore

// Generated by Storm Stack
// Note: Do not edit this file manually - it will be overwritten automatically

import { isError } from "@stryke/type-checks/is-error";
import handleAdd, { renderUsage as renderAddUsage } from "./commands/add";
import handleServe, { renderUsage as renderServeUsage } from "./commands/serve";
import handleVars, { renderUsage as renderVarsUsage } from "./commands/vars";
import { colors, renderBanner } from "./runtime/cli";
import { getRuntimeInfo } from "./runtime/env";

async function main() {
  try {
    if (process.argv.includes("--version") || process.argv.includes("-v")) {
      console.log($storm.vars.APP_VERSION);
    } else {
      let command = "";
      if (process.argv.length > 2 && process.argv[2]) {
        command = process.argv[2];
      }

      if (command.toLowerCase() === "vars") {
        return handleVars();
      } else if (command.toLowerCase() === "serve") {
        return handleServe();
      } else if (command.toLowerCase() === "add") {
        return handleAdd();
      } else {
        console.error(
          ` ${colors.red("✖")} ${colors.redBright(`Unknown command: ${colors.bold(command || "")}`)}`
        );
      }

      const runtimeInfo = getRuntimeInfo();
      if (!runtimeInfo.isCI) {
        console.log(
          renderBanner(
            "Help Information",
            "Display usage details, commands, and support information for the examples-cli-app application"
          )
        );
        console.log("");
      }

      console.log("");
      console.log("An example Storm Stack commandline application");
      console.log("");
      console.log(
        "The following commands are available as part of the examples-cli-app application: "
      );
      console.log("");
      console.log(
        renderVarsUsage(false)
          .split("\n")
          .map(line => `  ${line}`)
          .join("\n")
      );
      console.log(
        renderServeUsage(false)
          .split("\n")
          .map(line => `  ${line}`)
          .join("\n")
      );
      console.log(
        renderAddUsage(false)
          .split("\n")
          .map(line => `  ${line}`)
          .join("\n")
      );
      console.log("");
    }
  } catch (err) {
    if (isError(err)) {
      console.error(
        colors.red(
          ` ${colors.red("✖")} ${colors.redBright(`An error occurred while running the examples-cli-app application: ${err.message}`)}`
        )
      );
    } else {
      console.error(
        colors.red(
          ` ${colors.red("✖")} ${colors.redBright(`An error occurred while running the examples-cli-app application`)}`
        )
      );
    }
  }
}

await main();
