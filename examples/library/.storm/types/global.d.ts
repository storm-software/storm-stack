/* eslint-disable */
// biome-ignore lint: disable
// prettier-ignore

/// <reference types="@storm-stack/types" />

// Generated by Storm Stack
// Note: Do not edit this file manually - it will be overwritten automatically

declare global {
  const StormJSON: (typeof import("@stryke/json"))["StormJSON"];
  type StormJSON = import("@stryke/json").StormJSON;

  const StormURL: (typeof import("@stryke/url"))["StormURL"];
  type StormURL = import("@stryke/url").StormURL;

  const parseCookie: (typeof import("@stryke/http"))["parseCookie"];
  type parseCookie = import("@stryke/http").parseCookie;

  const parseSetCookie: (typeof import("@stryke/http"))["parseSetCookie"];
  type parseSetCookie = import("@stryke/http").parseSetCookie;

  const serializeCookie: (typeof import("@stryke/http"))["serializeCookie"];
  type serializeCookie = import("@stryke/http").serializeCookie;

  const splitSetCookieString: (typeof import("@stryke/http"))[
    "splitSetCookieString"
  ];
  type splitSetCookieString = import("@stryke/http").splitSetCookieString;

  const StormLog: (typeof import("../runtime/log"))["StormLog"];
  type StormLog = import("../runtime/log").StormLog;

  const uniqueId: (typeof import("../runtime/id"))["uniqueId"];
  const getRandom: (typeof import("../runtime/id"))["getRandom"];

  const _StormError: (typeof import("../runtime/error"))["StormError"];
  class StormError extends _StormError {
    /**
     * The StormError constructor
     *
     * @param options - The options for the error
     * @param type - The type of error
     */
    public constructor(
      optionsOrMessage: StormErrorOptions | string,
      type: ErrorType = "general"
    ) {
      super(optionsOrMessage, type);
    }
  }

  const createStormError: (typeof import("../runtime/error"))["createStormError"];
  const isStormError: (typeof import("../runtime/error"))["isStormError"];
  const getErrorFromUnknown: (typeof import("../runtime/error"))[
    "getErrorFromUnknown"
  ];

  const _StormRequest: (typeof import("../runtime/request"))["StormRequest"];
  class StormRequest<
    TData = any,
    TIdentifiers extends Record<string, any> = Record<string, any>,
    TParams extends Record<string, any> = Record<string, any>,
    TMeta extends Record<string, any> = Record<string, any>
  > extends _StormRequest<TData, TIdentifiers, TParams, TMeta> {
    /**
     * Create a new request object.
     *
     * @param data - The request data.
     * @param meta - The request metadata.
     * @param params - The request parameters.
     * @param identifiers - The request identifiers.
     */
    public constructor(
      data: TData,
      meta = {},
      params?: TParams,
      identifiers?: TIdentifiers
    ) {
      super(data, meta, params, identifiers);
    }
  }

  const _StormResponse: (typeof import("../runtime/response"))["StormResponse"];
  class StormResponse<
    TData extends any | StormError = any | StormError
  > extends _StormResponse<TData> {
    /**
     * Create a new response.
     *
     * @param requestId - The request identifier.
     * @param meta - The current context's metadata.
     * @param data - The response data
     */
    public constructor(
      requestId: string,
      meta: Record<string, any>,
      data: TData
    ) {
      super(requestId, meta, data);
    }
  }
}

export {};
