/* eslint-disable */
// biome-ignore lint: disable

// Generated with Storm Stack
// Note: Do not edit this file manually - it will be overwritten automatically

/**
 * The various types of date formats used in Storm Stack applications.
 */
interface DateFormats<TFormatToken = string> {
  /**
   * Localized full date
   *
   * @example "Jan 1, 2019"
   */
  fullDate: TFormatToken;
  /**
   * Partially localized full date with weekday, useful for text-to-speech accessibility
   *
   * @example "Tuesday, January 1, 2019"
   */
  fullDateWithWeekday: TFormatToken;
  /**
   * Date format string with month and day of month
   *
   * @example "1 January"
   */
  normalDate: TFormatToken;
  /**
   * Date format string with weekday, month and day of month
   *
   * @example "Wed, Jan 1"
   */
  normalDateWithWeekday: TFormatToken;
  /**
   * Shorter day format
   *
   * @example "Jan 1"
   */
  shortDate: TFormatToken;
  /**
   * Year format string
   *
   * @example "2019"
   */
  year: TFormatToken;
  /**
   * Month format string
   *
   * @example "January"
   */
  month: TFormatToken;
  /**
   * Short month format string
   *
   * @example "Jan"
   */
  monthShort: TFormatToken;
  /**
   * Month with year format string
   *
   * @example "January 2018"
   */
  monthAndYear: TFormatToken;
  /**
   * Month with date format string
   *
   * @example "January 1"
   */
  monthAndDate: TFormatToken;
  /**
   * Weekday format string
   *
   * @example "Wednesday"
   */
  weekday: TFormatToken;
  /**
   * Short weekday format string
   *
   * @example "Wed"
   */
  weekdayShort: TFormatToken;
  /**
   * Day format string
   *
   * @example "1"
   */
  dayOfMonth: TFormatToken;
  /**
   * Hours format string
   *
   * @example "11"
   */
  hours12h: TFormatToken;
  /**
   * Hours format string
   *
   * @example "23"
   */
  hours24h: TFormatToken;
  /**
   * Minutes format string
   *
   * @example "44"
   */
  minutes: TFormatToken;
  /**
   * Seconds format string
   *
   * @example "00"
   */
  seconds: TFormatToken;
  /**
   * Full time localized format string
   *
   * @example "11:44 PM" for US, "23:44" for Europe
   */
  fullTime: TFormatToken;
  /**
   * Not localized full time format string
   *
   * @example "11:44 PM"
   */
  fullTime12h: TFormatToken;
  /**
   * Not localized full time format string
   *
   * @example "23:44"
   */
  fullTime24h: TFormatToken;
  /**
   * Date & time format string with localized time
   *
   * @example "Jan 1, 2018 11:44 PM"
   */
  fullDateTime: TFormatToken;
  /**
   * Not localized date & Time format 12h
   *
   * @example "Jan 1, 2018 11:44 PM"
   */
  fullDateTime12h: TFormatToken;
  /**
   * Not localized date & Time format 24h
   *
   * @example "Jan 1, 2018 23:44"
   */
  fullDateTime24h: TFormatToken;
  /**
   * Localized keyboard input friendly date format
   *
   * @example "02/13/2020"
   */
  keyboardDate: TFormatToken;
  /**
   * Localized keyboard input friendly date/time format
   *
   * @example "02/13/2020 23:44"
   */
  keyboardDateTime: TFormatToken;
  /**
   * Partially localized keyboard input friendly date/time 12h format
   *
   * @example "02/13/2020 11:44 PM"
   */
  keyboardDateTime12h: TFormatToken;
  /**
   * Partially localized keyboard input friendly date/time 24h format
   *
   * @example "02/13/2020 23:44"
   */
  keyboardDateTime24h: TFormatToken;
}

type ErrorMessageDetails = MessageDetails<"error">;

/**
 * The type of error response message/event
 */
type ErrorType =
  | "general"
  | "not_found"
  | "validation"
  | "service_unavailable"
  | "action_unsupported"
  | "security"
  | "unknown";

/**
 * The formatted values for a log record.
 */
interface FormattedValues {
  /**
   * The formatted timestamp.
   */
  timestamp: string;
  /**
   * The formatted log level.
   */
  level: string;
  /**
   * The formatted message.
   */
  message: string;
  /**
   * The unformatted log record.
   */
  record: LogRecord;
}

type HandlerFunction<
  TInput extends Record<string, any> = Record<string, any>,
  TOutput = any
> = (
  payload: StormPayloadInterface<TInput>
) => MaybePromise<TOutput | StormErrorInterface>;

type HelpMessageDetails = MessageDetails<"help">;

type InfoMessageDetails = MessageDetails<"info">;

/**
 * A store that exists on the {@link StormContextInterface} for internal use.
 *
 * @remarks
 * Please do not use this in application code as it is likely to change
 *
 * @internal
 */
declare interface Internal_StormContextStore {
  /**
   * List of events that have been emitted
   *
   * @internal
   */
  events: StormEventInterface[];
}

/**
 * A adapter is a function that accepts a log record and prints it somewhere.
 *
 * @param record - The log record to adapter.
 */
type LogAdapter = (record: LogRecord) => void;

/**
 * A factory function that creates a log adapter.
 *
 * @remarks
 * The created log adapter will be used to log messages in the application. This function is expected to be the default export of the log plugin's module.
 *
 * @returns The created {@link LogAdapter}.
 */
type LogAdapterFactory = () => LogAdapter;

interface LogAdapterInstance {
  /**
   * The log adapter function.
   */
  handle: LogAdapter;
  /**
   * The lowest log level for the adapter to accept.
   */
  logLevel: LogLevel;
}

/**
 * A logging callback function.  It is used to defer the computation of a
 * message template until it is actually logged.
 * @param prefix - The message template prefix.
 * @returns The rendered message array.
 */
type LogCallback = (prefix: LogTemplatePrefix) => unknown[];

/**
 * A filter is a function that accepts a log record and returns `true` if the
 * record should be passed to the adapter.
 *
 * @param record - The log record to filter.
 * @returns `true` if the record should be passed to the adapter.
 */
type LogFilter = (record: LogRecord) => boolean;

/**
 * A filter-like value is either a {@link LogFilter} or a {@link LogLevel}.
 * `null` is also allowed to represent a filter that rejects all records.
 */
type LogFilterLike = LogFilter | LogLevel | null;

/**
 * The severity level of a {@link LogRecord}.
 */
type LogLevel = "debug" | "info" | "warning" | "error" | "fatal";

declare const LogLevel: {
  DEBUG: LogLevel;
  INFO: LogLevel;
  WARNING: LogLevel;
  ERROR: LogLevel;
  FATAL: LogLevel;
};

/**
 * A log record.
 */
interface LogRecord {
  /**
   * The log level.
   */
  readonly level: LogLevel;
  /**
   * The log message.  This is the result of substituting the message template
   * with the values.  The number of elements in this array is always odd,
   * with the message template values interleaved between the substitution
   * values.
   */
  readonly message: readonly unknown[];
  /**
   * The raw log message. This is the original message template without any further processing. It can be either:
   * - A string without any substitutions if the log record was created with a method call syntax, e.g., "Hello, \{name\}!" for logger.info("Hello, \{name\}!", \{ name \}).
   * - A template string array if the log record was created with a tagged template literal syntax, e.g., ["Hello, ", "!"] for logger.info\`Hello, $\{name\}!\`
   */
  readonly rawMessage: string | TemplateStringsArray;
  /**
   * The timestamp of the log record in milliseconds since the Unix epoch.
   */
  readonly timestamp: number;
  /**
   * The extra properties of the log record.
   */
  readonly properties: Record<string, unknown>;
}

/**
 * A logging template prefix function.  It is used to log a message in
 * a {@link LogCallback} function.
 * @param message - The message template strings array.
 * @param values - The message template values.
 * @returns The rendered message array.
 */
type LogTemplatePrefix = (
  message: TemplateStringsArray,
  ...values: unknown[]
) => unknown[];

declare type MaybePromise<T> = T | Promise<T>;

type MessageDetails<TMessageType extends MessageType = MessageType> =
  | {
      code: string;
      message?: string;
      type: TMessageType;
      params?: Record<string, any>;
    }
  | {
      code?: string;
      message: string;
      type: TMessageType;
      params?: Record<string, any>;
    };

type MessageType = "help" | "error" | "warning" | "info" | "success";

interface ParsedStacktrace {
  column?: number;
  function?: string;
  line?: number;
  source: string;
}

/**
 * A storage adapter is an instance of a {@link Driver} used by [Unstorage](https://unstorage.unjs.io/).
 */
type StorageAdapter = Driver & AsyncDisposable;

/**
 * A factory function that creates a storage adapter.
 *
 * @remarks
 * The created storage adapter will be used to interact with the storage layer in the application. This function is expected to be the default export of the storage plugin's module.
 *
 * @returns The created {@link StorageAdapter}.
 */
type StorageAdapterFactory = () => StorageAdapter;

/**
 * Interface representing the static build information for the Storm application.
 */
interface StormBuildInfo {
  /**
   * The package name of the application.
   */
  packageName: string;
  /**
   * The version of the application.
   */
  version: string;
  /**
   * The unique identifier for the build.
   */
  buildId: string;
  /**
   * The timestamp for the build.
   */
  timestamp: number;
  /**
   * The unique identifier for the release.
   */
  releaseId: string;
  /**
   * The tag associated with the release.
   *
   * @remarks
   * This is in the format of "\<APP_NAME\>\@\<APP_VERSION\>".
   */
  releaseTag: string;
  /**
   * The name of the organization that maintains the application.
   */
  organization: string;
  /**
   * The mode in which the application is running (e.g., 'development', 'staging', 'production').
   */
  mode: "development" | "staging" | "production";
  /**
   * The platform for which the application was built.
   */
  platform: "node" | "browser" | "neutral";
  /**
   * The environment in which the application is running.
   */
  environment: string;
  /**
   * Indicates if the application is running in a production environment.
   */
  isProduction: boolean;
  /**
   * Indicates if the application is running in a staging environment.
   */
  isStaging: boolean;
  /**
   * Indicates if the application is running in a development environment.
   */
  isDevelopment: boolean;
  /**
   * Indicates if the application is running in debug mode.
   */
  isDebug: boolean;
  /**
   * Indicates if the application is running in a test environment.
   */
  isTest: boolean;
}

/**
 * The configuration parameters for the Storm application.
 *
 * @internal
 */
type StormConfigContext<
  TConfig extends StormConfigInterface = StormConfigInterface
> = TConfig & {
  /**
   * A virtual object representing the configuration parameters for the Storm application at build time. The Storm Stack build process will inject this object's values with the actual configuration parameters at build time.
   *
   * @example
   * ```typescript
   * // "$storm.config.static.CONFIG_ITEM" will be replaced with the actual value at build time
   * const value = $storm.config.static.CONFIG_ITEM;
   *
   * const someNumber = $storm.config.static.SOME_NUMBER;
   * // const someNumber = 42;
   *
   * const someString = $storm.config.static.SOME_STRING;
   * // const someString = "Hello, World!";
   *
   * const someBoolean = $storm.config.static.SOME_BOOLEAN;
   * // const someBoolean = true;
   * ```
   *
   * @remarks
   * A static representation of the configuration thats used to inject data into the application code at build time. This object will can provide type safety and autocompletion for the configuration values when used in the application code. **The values on this object will not exist at runtime.**
   */
  static: TConfig;
};

/**
 * The base configuration used by Storm Stack applications
 *
 * @remarks
 * This interface is used to define the environment variables, configuration options, and runtime settings used by the Storm Stack applications. It is used to provide type safety, autocompletion, and default values for the environment variables. The comments of each variable are used to provide documentation descriptions when running the \`storm docs\` command.
 *
 * @categoryDescription Platform
 * The name of the platform the configuration parameter is intended for use in.
 *
 * @showCategories
 */
interface StormConfigInterface {
  /**
   * An indicator that specifies the application is running in the local Storm Stack development environment.
   *
   * @defaultValue false
   *
   * @hidden
   * @readonly
   * @category node
   */
  STORM_STACK_LOCAL?: boolean;
  /**
   * The name of the application.
   *
   * @readonly
   * @category neutral
   */
  APP_NAME: string;
  /**
   * The version of the application.
   *
   * @defaultValue "1.0.0"
   *
   * @readonly
   * @category neutral
   */
  APP_VERSION: string;
  /**
   * The unique identifier for the build.
   *
   * @readonly
   * @category neutral
   */
  BUILD_ID: string;
  /**
   * The timestamp the build was ran at.
   *
   * @readonly
   * @category neutral
   */
  BUILD_TIMESTAMP: string;
  /**
   * A checksum hash created during the build.
   *
   * @readonly
   * @category neutral
   */
  BUILD_CHECKSUM: string;
  /**
   * The unique identifier for the release.
   *
   * @readonly
   * @category neutral
   */
  RELEASE_ID: string;
  /**
   * The tag for the release. This is generally in the format of "\<APP_NAME\>\@\<APP_VERSION\>".
   *
   * @readonly
   * @category neutral
   */
  RELEASE_TAG: string;
  /**
   * The name of the organization that maintains the application.
   *
   * @remarks
   * This variable is used to specify the name of the organization that maintains the application. If not provided in an environment, it will try to use the value in {@link @storm-software/config-tools/StormWorkspaceConfig#organization}.
   *
   * @alias ORG
   * @alias ORG_ID
   * @category neutral
   */
  ORGANIZATION: string;
  /**
   * The platform for which the application was built.
   *
   * @defaultValue "neutral"
   *
   * @category neutral
   */
  PLATFORM: "node" | "neutral" | "browser";
  /**
   * The mode in which the application is running.
   *
   * @defaultValue "production"
   *
   * @alias NODE_ENV
   *
   * @category neutral
   */
  MODE: "development" | "staging" | "production";
  /**
   * The environment the application is running in. This value will be populated with the value of `MODE` if not provided.
   *
   * @defaultValue "production"
   *
   * @alias ENV
   * @alias VERCEL_ENV
   * @category neutral
   */
  ENVIRONMENT: string;
  /**
   * Indicates if the application is running in debug mode.
   *
   * @defaultValue false
   *
   * @category neutral
   */
  DEBUG: boolean;
  /**
   * An indicator that specifies the current runtime is a test environment.
   *
   * @defaultValue false
   *
   * @category neutral
   */
  TEST: boolean;
  /**
   * An indicator that specifies the current runtime is a minimal environment.
   *
   * @defaultValue false
   *
   * @category node
   */
  MINIMAL: boolean;
  /**
   * An indicator that specifies the current runtime is a no color environment.
   *
   * @defaultValue false
   *
   * @category node
   */
  NO_COLOR: boolean;
  /**
   * An indicator that specifies the current runtime is a force color environment.
   *
   * @defaultValue false
   *
   * @category node
   */
  FORCE_COLOR: boolean | number;
  /**
   * An indicator that specifies the current runtime should force hyperlinks in terminal output.
   *
   * @remarks
   * This variable is used to force hyperlinks in terminal output, even if the terminal does not support them. This is useful for debugging and development purposes.
   *
   * @defaultValue false
   *
   * @category node
   */
  FORCE_HYPERLINK: boolean | number;
  /**
   * The name of the agent running the application. This variable is set by certain CI/CD systems.
   *
   * @readonly
   * @category neutral
   */
  AGENT_NAME?: string;
  /**
   * The color terminal type. This variable is set by certain terminal emulators.
   *
   * @readonly
   * @category node
   */
  COLORTERM?: string;
  /**
   * The terminal type. This variable is set by certain CI/CD systems.
   *
   * @remarks
   * This variable is used to specify the terminal type that the application is running in. It can be used to determine how to format output for the terminal.
   *
   * @readonly
   * @category node
   */
  TERM?: string;
  /**
   * The terminal program name. This variable is set by certain terminal emulators.
   *
   * @readonly
   * @category node
   */
  TERM_PROGRAM?: string;
  /**
   * The terminal program version. This variable is set by certain terminal emulators.
   *
   * @readonly
   * @category node
   */
  TERM_PROGRAM_VERSION?: string;
  /**
   * The terminal emulator name. This variable is set by certain terminal emulators.
   *
   * @readonly
   * @category node
   */
  TERMINAL_EMULATOR?: string;
  /**
   * The terminal emulator session ID. This variable is set by certain terminal emulators.
   *
   * @readonly
   * @category node
   */
  WT_SESSION?: string;
  /**
   * An indicator that specifies the current terminal is running Terminus Sublime. This variable is set by certain terminal emulators.
   *
   * @readonly
   * @category node
   */
  TERMINUS_SUBLIME?: boolean;
  /**
   * The ConEmu task name. This variable is set by certain terminal emulators.
   *
   * @readonly
   * @category node
   */
  ConEmuTask?: string;
  /**
   * The cursor trace ID. This variable is set by certain terminal emulators.
   *
   * @readonly
   * @category node
   */
  CURSOR_TRACE_ID?: string;
  /**
   * The VTE version. This variable is set by certain terminal emulators.
   *
   * @readonly
   * @category node
   */
  VTE_VERSION?: string;
  /**
   * Indicates if error stack traces should be captured.
   *
   * @defaultValue false
   * @category neutral
   */
  STACKTRACE: boolean;
  /**
   * Indicates if error data should be included.
   *
   * @defaultValue false
   * @category neutral
   */
  INCLUDE_ERROR_DATA: boolean;
  /**
   * A web page to lookup error messages and display additional information given an error code.
   *
   * @remarks
   * This variable is used to provide a URL to a page that can be used to look up error messages given an error code. This is used to provide a more user-friendly error message to the user.
   *
   * @title Error Details URL
   * @category neutral
   */
  ERROR_URL: string;
  /**
   * The default timezone for the application.
   *
   * @defaultValue "America/New_York"
   * @category neutral
   */
  DEFAULT_TIMEZONE: string;
  /**
   * The default locale to be used in the application.
   *
   * @defaultValue "en_US"
   * @readonly
   * @category neutral
   */
  DEFAULT_LOCALE: string;
  /**
   * The default lowest log level to accept. If `null`, the logger will reject all records. This value only applies if `lowestLogLevel` is not provided to the `logs` configuration.
   *
   * @defaultValue "info"
   * @category neutral
   */
  LOG_LEVEL?: LogLevel | null;
  /**
   * An indicator that specifies the current runtime is a continuous integration environment.
   *
   * @defaultValue false
   *
   * @title Continuous Integration
   * @alias CONTINUOUS_INTEGRATION
   * @category neutral
   */
  CI: boolean;
  /**
   * The unique identifier for the current run. This value is set by certain CI/CD systems.
   *
   * @readonly
   * @category node
   */
  RUN_ID?: string;
  /**
   * The agola git reference. This value is set by certain CI/CD systems.
   *
   * @readonly
   * @category node
   */
  AGOLA_GIT_REF?: string;
  /**
   * The appcircle build ID. This value is set by certain CI/CD systems.
   *
   * @readonly
   * @category node
   */
  AC_APPCIRCLE?: string;
  /**
   * The appveyor build ID. This value is set by certain CI/CD systems.
   *
   * @readonly
   * @category node
   */
  APPVEYOR?: string;
  /**
   * The codebuild build ID. This value is set by certain CI/CD systems.
   *
   * @readonly
   * @category node
   */
  CODEBUILD?: string;
  /**
   * The task force build ID. This value is set by certain CI/CD systems.
   *
   * @readonly
   * @category node
   */
  TF_BUILD?: string;
  /**
   * The bamboo plan key. This value is set by certain CI/CD systems.
   *
   * @readonly
   * @category node
   */
  bamboo_planKey?: string;
  /**
   * The bitbucket commit. This value is set by certain CI/CD systems.
   *
   * @readonly
   * @category node
   */
  BITBUCKET_COMMIT?: string;
  /**
   * The bitrise build ID. This value is set by certain CI/CD systems.
   *
   * @readonly
   * @category node
   */
  BITRISE_IO?: string;
  /**
   * The buddy workspace ID. This value is set by certain CI/CD systems.
   *
   * @readonly
   * @category node
   */
  BUDDY_WORKSPACE_ID?: string;
  /**
   * The buildkite build ID. This value is set by certain CI/CD systems.
   *
   * @readonly
   * @category node
   */
  BUILDKITE?: string;
  /**
   * The circleci build ID. This value is set by certain CI/CD systems.
   *
   * @readonly
   * @category node
   */
  CIRCLECI?: string;
  /**
   * The cirrus-ci build ID. This value is set by certain CI/CD systems.
   *
   * @readonly
   * @category node
   */
  CIRRUS_CI?: string;
  /**
   * The cf build ID. This value is set by certain CI/CD systems.
   *
   * @readonly
   * @category node
   */
  CF_BUILD_ID?: string;
  /**
   * The cm build ID. This value is set by certain CI/CD systems.
   *
   * @readonly
   * @category node
   */
  CM_BUILD_ID?: string;
  /**
   * The ci name. This value is set by certain CI/CD systems.
   *
   * @readonly
   * @category node
   */
  CI_NAME?: string;
  /**
   * The drone build ID. This value is set by certain CI/CD systems.
   *
   * @readonly
   * @category node
   */
  DRONE?: string;
  /**
   * The dsari build ID. This value is set by certain CI/CD systems.
   *
   * @readonly
   * @category node
   */
  DSARI?: string;
  /**
   * The earthly build ID. This value is set by certain CI/CD systems.
   *
   * @readonly
   * @category node
   */
  EARTHLY_CI?: string;
  /**
   * The eas build ID. This value is set by certain CI/CD systems.
   *
   * @readonly
   * @category node
   */
  EAS_BUILD?: string;
  /**
   * The gerrit project. This value is set by certain CI/CD systems.
   *
   * @readonly
   * @category node
   */
  GERRIT_PROJECT?: string;
  /**
   * The gitea actions build ID. This value is set by certain CI/CD systems.
   *
   * @readonly
   * @category node
   */
  GITEA_ACTIONS?: string;
  /**
   * The github actions build ID. This value is set by certain CI/CD systems.
   *
   * @readonly
   * @category node
   */
  GITHUB_ACTIONS?: string;
  /**
   * The gitlab ci build ID. This value is set by certain CI/CD systems.
   *
   * @readonly
   * @category node
   */
  GITLAB_CI?: string;
  /**
   * The go cd build ID. This value is set by certain CI/CD systems.
   *
   * @readonly
   * @category node
   */
  GOCD?: string;
  /**
   * The builder output build ID. This value is set by certain CI/CD systems.
   *
   * @readonly
   * @category node
   */
  BUILDER_OUTPUT?: string;
  /**
   * The harness build ID. This value is set by certain CI/CD systems.
   *
   * @readonly
   * @category node
   */
  HARNESS_BUILD_ID?: string;
  /**
   * The jenkins url. This value is set by certain CI/CD systems.
   *
   * @readonly
   * @category node
   */
  JENKINS_URL?: string;
  /**
   * The layerci build ID. This value is set by certain CI/CD systems.
   *
   * @readonly
   * @category node
   */
  LAYERCI?: string;
  /**
   * The magnum build ID. This value is set by certain CI/CD systems.
   *
   * @readonly
   * @category node
   */
  MAGNUM?: string;
  /**
   * The netlify build ID. This value is set by certain CI/CD systems.
   *
   * @readonly
   * @category node
   */
  NETLIFY?: string;
  /**
   * The nevercode build ID. This value is set by certain CI/CD systems.
   *
   * @readonly
   * @category node
   */
  NEVERCODE?: string;
  /**
   * The prow job ID. This value is set by certain CI/CD systems.
   *
   * @readonly
   * @category node
   */
  PROW_JOB_ID?: string;
  /**
   * The release build ID. This value is set by certain CI/CD systems.
   *
   * @readonly
   * @category node
   */
  RELEASE_BUILD_ID?: string;
  /**
   * The render build ID. This value is set by certain CI/CD systems.
   *
   * @readonly
   * @category node
   */
  RENDER?: string;
  /**
   * The sailci build ID. This value is set by certain CI/CD systems.
   *
   * @readonly
   * @category node
   */
  SAILCI?: string;
  /**
   * The hudson build ID. This value is set by certain CI/CD systems.
   *
   * @readonly
   * @category node
   */
  HUDSON?: string;
  /**
   * The screwdriver build ID. This value is set by certain CI/CD systems.
   *
   * @readonly
   * @category node
   */
  SCREWDRIVER?: string;
  /**
   * The semaphore build ID. This value is set by certain CI/CD systems.
   *
   * @readonly
   * @category node
   */
  SEMAPHORE?: string;
  /**
   * The sourcehut build ID. This value is set by certain CI/CD systems.
   *
   * @readonly
   * @category node
   */
  SOURCEHUT?: string;
  /**
   * The strider build ID. This value is set by certain CI/CD systems.
   *
   * @readonly
   * @category node
   */
  STRIDER?: string;
  /**
   * The task ID. This value is set by certain CI/CD systems.
   *
   * @readonly
   * @category node
   */
  TASK_ID?: string;
  /**
   * The teamcity version. This value is set by certain CI/CD systems.
   *
   * @readonly
   * @category node
   */
  TEAMCITY_VERSION?: string;
  /**
   * The travis build ID. This value is set by certain CI/CD systems.
   *
   * @readonly
   * @category node
   */
  TRAVIS?: string;
  /**
   * The vela build ID. This value is set by certain CI/CD systems.
   *
   * @readonly
   * @category node
   */
  VELA?: string;
  /**
   * The now builder build ID. This value is set by certain CI/CD systems.
   *
   * @readonly
   * @category node
   */
  NOW_BUILDER?: string;
  /**
   * The appcenter build ID. This value is set by certain CI/CD systems.
   *
   * @readonly
   * @category node
   */
  APPCENTER_BUILD_ID?: string;
  /**
   * The xcode project build ID. This value is set by certain CI/CD systems.
   *
   * @readonly
   * @category node
   */
  CI_XCODE_PROJECT?: string;
  /**
   * The xcode server build ID. This value is set by certain CI/CD systems.
   *
   * @readonly
   * @category node
   */
  XCS?: string;
  /**
   * The Storm Stack application's runtime data directory.
   *
   * @remarks
   * This variable is used to override the base path of the system's local application data directory. This variable is used to set the \`$storm.paths.data\` property.
   *
   * @title Data Directory
   * @category node
   */
  DATA_DIR?: string;
  /**
   * The Storm Stack application's configuration data directory.
   *
   * @remarks
   * This variable is used to override the base path of the system's local application configuration directory. This variable is used to set the \`$storm.paths.config\` property.
   *
   * @title Configuration Directory
   * @category node
   */
  CONFIG_DIR?: string;
  /**
   * The Storm Stack application's cached data directory.
   *
   * @remarks
   * This variable is used to override the base path of the system's local cache data directory. This variable is used to set the \`$storm.paths.cache\` property.
   *
   * @title Cache Directory
   * @category node
   */
  CACHE_DIR?: string;
  /**
   * The Storm Stack application's logging directory.
   *
   * @remarks
   * This variable is used to override the base path of the system's local application log directory. This variable is used to set the \`$storm.paths.log\` property.
   *
   * @title Log Directory
   * @category node
   */
  LOG_DIR?: string;
  /**
   * The Storm Stack application's temporary data directory.
   *
   * @remarks
   * This variable is used to override the base path of the system's local temporary data directory. This variable is used to set the \`$storm.paths.temp\` property.
   *
   * @title Temporary Directory
   * @category node
   */
  TEMP_DIR?: string;
  /**
   * A variable that specifies the current user's local application data directory on Windows.
   *
   * @see https://www.advancedinstaller.com/appdata-localappdata-programdata.html
   *
   * @remarks
   * This variable is used to specify a path to application data that is specific to the current user. This variable can be used to set the \`$storm.paths.data\`, \`$storm.paths.cache\`, and \`$storm.paths.log\` properties.
   *
   * @readonly
   * @category node
   */
  LOCALAPPDATA?: string;
  /**
   * A variable that specifies the application data directory on Windows.
   *
   * @see https://www.advancedinstaller.com/appdata-localappdata-programdata.html
   *
   * @remarks
   * This variable is used to specify a path to application data that is specific to the current user. This variable can be used to set the \`$storm.paths.config\` property.
   *
   * @readonly
   * @category node
   */
  APPDATA?: string;
  /**
   * A variable that specifies the data path in the home directory on Linux systems using the XDG base directory specification.
   *
   * @see https://gist.github.com/roalcantara/107ba66dfa3b9d023ac9329e639bc58c
   *
   * @remarks
   * This variable is used to specify a path to application data that is specific to the current user. This variable can be used to set the \`$storm.paths.data\` property.
   *
   * @readonly
   * @category node
   */
  XDG_DATA_HOME?: string;
  /**
   * A variable that specifies the configuration path in the home directory on Linux systems using the XDG base directory specification.
   *
   * @see https://gist.github.com/roalcantara/107ba66dfa3b9d023ac9329e639bc58c
   *
   * @remarks
   * This variable is used to specify a path to configuration data that is specific to the current user. This variable can be used to set the \`$storm.paths.config\` property.
   *
   * @readonly
   * @category node
   */
  XDG_CONFIG_HOME?: string;
  /**
   * A variable that specifies the cache path in the home directory on Linux systems using the XDG base directory specification.
   *
   * @see https://gist.github.com/roalcantara/107ba66dfa3b9d023ac9329e639bc58c
   *
   * @remarks
   * This variable is used to specify a path to cache data that is specific to the current user. This variable can be used to set the \`$storm.paths.cache\` property.
   *
   * @readonly
   * @category node
   */
  XDG_CACHE_HOME?: string;
  /**
   * A variable that specifies the state directory on Linux systems using the XDG base directory specification.
   *
   * @see https://gist.github.com/roalcantara/107ba66dfa3b9d023ac9329e639bc58c
   *
   * @remarks
   * This variable is used to specify a path to application state data that is specific to the current user. This variable can be used to set the \`$storm.paths.state\` property.
   *
   * @readonly
   * @category node
   */
  XDG_STATE_HOME?: string;
  /**
   * A variable that specifies the runtime directory on Linux systems using the XDG base directory specification.
   *
   * @see https://gist.github.com/roalcantara/107ba66dfa3b9d023ac9329e639bc58c
   *
   * @remarks
   * This variable is used to specify a path to runtime data that is specific to the current user. This variable can be used to set the \`$storm.paths.temp\` property.
   *
   * @readonly
   * @category node
   */
  XDG_RUNTIME_DIR?: string;
  /**
   * A variable that specifies the [Devenv](https://devenv.sh/) runtime directory.
   *
   * @see https://devenv.sh/files-and-variables/#devenv_dotfile
   * @see https://nixos.org/
   *
   * @remarks
   * This variable is used to specify a path to application data that is specific to the current [Nix](https://nixos.org/) environment. This variable can be used to set the \`$storm.paths.temp\` property.
   *
   * @category node
   */
  DEVENV_RUNTIME?: string;
}

/**
 * The global Storm Stack application context. This object contains information related to the current process's execution.
 *
 * @remarks
 * The Storm Stack application context object is injected into the global scope of the application. It can be accessed using `$storm` or `useStorm()` in the application code.
 */
interface StormContextInterface<
  TConfig extends StormConfigInterface = StormConfigInterface,
  TEnv extends StormEnvInterface = StormEnvInterface,
  TMeta extends Record<string, any> = Record<string, any>
> {
  /**
   * The name of the Storm application.
   */
  readonly name: string;
  /**
   * The version of the Storm application.
   */
  readonly version: string;
  /**
   * The current meta object.
   */
  readonly meta: TMeta;
  /**
   * The unique ID for the current request.
   */
  readonly payload: StormPayloadInterface;
  /**
   * The environment information for the Storm application.
   */
  env: TEnv;
  /**
   * The configuration parameters for the Storm application.
   */
  config: StormConfigContext<TConfig>;
  /**
   * The root application logger for the Storm Stack application.
   */
  log: StormLogInterface;
  /**
   * The {@link StormStorageInterface} instance used by the Storm Stack application.
   */
  storage: StormStorageInterface;
  /**
   * A function to emit an event to a processing queue.
   */
  emit: <TEvent extends StormEventInterface<string, Record<string, any>>>(
    event: TEvent
  ) => void;
  /**
   * A set of disposable resources to clean up when the context is no longer needed.
   */
  disposables: Set<Disposable>;
  /**
   * A set of asynchronous disposable resources to clean up when the context is no longer needed.
   */
  asyncDisposables: Set<AsyncDisposable>;
  /**
   * A store that exists on the StormContext for internal use.
   *
   * @remarks
   * Please do not use this in application code as it is likely to change
   *
   * @internal
   */
  __internal: Internal_StormContextStore;
}

/**
 * Interface for date utility functions used in the Storm Stack.
 *
 * @typeParam TDate - The date object type used by the underlying date library.
 * @typeParam TLocale - The locale type used by the underlying date library.
 *
 * @remarks
 * This interface defines a contract for date manipulation and formatting utilities, abstracting over different date libraries (such as [Moment.js](https://momentjs.com/), [Day.js](https://day.js.org/), etc.). It provides methods for creating, parsing, comparing, and formatting dates, as well as manipulating date components and handling localization.
 */
interface StormDateInterface<TDate, TLocale> {
  /**
   * The set of date formats supported by the utility.
   */
  formats: DateFormats<any>;
  /**
   * The current locale object, if available.
   */
  locale?: TLocale;
  /**
   * The [Moment.js](https://momentjs.com/) instance, if using [Moment.js](https://momentjs.com/) as the underlying library.
   */
  moment?: any;
  /**
   * The [Day.js](https://day.js.org/) instance, if using [Day.js](https://day.js.org/) as the underlying library.
   */
  dayjs?: any;
  /**
   * Name of the currently used date library.
   */
  type: string;
  /**
   * Create a new `Date` object with the underlying library.
   *
   * @remarks
   * This method supports some of the standard input sources like ISO strings so you can pass the string directly as `date("2024-01-10T14:30:00Z")`, and javascript `Date` objects `date(new Date())`. If `null` is passed `null` will be returned.
   *
   * @param value - The value to create a date object from. Can be a string, number, or JavaScript Date object.
   * @returns A date object of type `TDate` or `null` if the input is `null`.
   */
  createDate: <
    TArg = undefined,
    TResultingDate = TArg extends null
      ? null
      : TArg extends undefined
        ? TDate
        : TDate | null
  >(
    value?: TArg
  ) => TResultingDate;
  /**
   * Creates a date object from a JavaScript Date object.
   *
   * @remarks
   * This method is used to create a date object from a JavaScript Date object. It is useful for converting JavaScript Date objects to the date library's date objects.
   */
  toJsDate: (value: TDate) => Date;
  /**
   * Creates a date object from an ISO string.
   *
   * @remarks
   * This method is used to create a date object from an ISO string. It is useful for parsing dates from strings.
   */
  parseISO: (isString: string) => TDate;
  /**
   * Converts a date object to an ISO string.
   *
   * @remarks
   * This method is used to convert a date object to an ISO string. It is useful for serializing dates to strings.
   */
  toISO: (value: TDate) => string;
  /**
   * Creates a date object from a string using the specified format.
   *
   * @remarks
   * This method is used to create a date object from a string using the specified format. It is useful for parsing dates from strings with custom formats.
   */
  parse: (value: string, format: string) => TDate | null;
  /**
   * Returns the current locale code.
   *
   * @returns The current locale code.
   */
  getCurrentLocaleCode: () => string;
  /**
   * Returns an indicator if the current locale is using a 12-hour cycle.
   *
   * @returns `true` if the current locale is using a 12-hour cycle, otherwise `false`.
   */
  is12HourCycleInCurrentLocale: () => boolean;
  /**
   * Returns user readable format (taking into account localized format tokens), useful to render helper text for input (e.g. placeholder). If helper can not be created and for [Luxon](https://moment.github.io/luxon/#/) always returns empty string.
   *
   * @param format - The format string to use.
   * @returns The user readable format string.
   */
  getFormatHelperText: (format: string) => string;
  /**
   * Checks if the value is null.
   *
   * @param value - The value to check.
   * @returns `true` if the value is null, otherwise `false`.
   */
  isNull: (value: TDate | null) => boolean;
  /**
   * Checks if the value is valid.
   *
   * @param value - The value to check.
   * @returns `true` if the value is valid, otherwise `false`.
   */
  isValid: (value: any) => boolean;
  /**
   * Returns the difference between two dates.
   *
   * @param value - The first date to compare.
   * @param comparing - The second date to compare.
   * @param unit - The unit of time to use for the comparison.
   * @returns The difference between the two dates in the specified unit.
   */
  getDiff: (value: TDate, comparing: TDate | string, unit?: TimeUnit) => number;
  /**
   * Checks if two values are equal.
   *
   * @param value - The first value to compare.
   * @param comparing - The second value to compare.
   * @returns `true` if the two values are equal, otherwise `false`.
   */
  isEqual: (value: any, comparing: any) => boolean;
  /**
   * Checks if two dates are the same day.
   *
   * @param value - The first date to compare.
   * @param comparing - The second date to compare.
   * @returns `true` if the two dates are the same day, otherwise `false`.
   */
  isSameDay: (value: TDate, comparing: TDate) => boolean;
  /**
   * Checks if two dates are the same month.
   *
   * @param value - The first date to compare.
   * @param comparing - The second date to compare.
   * @returns `true` if the two dates are the same month, otherwise `false`.
   */
  isSameMonth: (value: TDate, comparing: TDate) => boolean;
  /**
   * Checks if two dates are the same year.
   *
   * @param value - The first date to compare.
   * @param comparing - The second date to compare.
   * @returns `true` if the two dates are the same year, otherwise `false`.
   */
  isSameYear: (value: TDate, comparing: TDate) => boolean;
  /**
   * Checks if two dates are the same hour.
   *
   * @param value - The first date to compare.
   * @param comparing - The second date to compare.
   * @returns `true` if the two dates are the same hour, otherwise `false`.
   */
  isSameHour: (value: TDate, comparing: TDate) => boolean;
  /**
   * Checks if two dates are after each other.
   *
   * @param value - The first date to compare.
   * @param comparing - The second date to compare.
   * @returns `true` if the first date is after the second date, otherwise `false`.
   */
  isAfter: (value: TDate, comparing: TDate) => boolean;
  /**
   * Checks if two dates are after each other on the same day.
   *
   * @param value - The first date to compare.
   * @param comparing - The second date to compare.
   * @returns `true` if the first date is after the second date on the same day, otherwise `false`.
   */
  isAfterDay: (value: TDate, comparing: TDate) => boolean;
  /**
   * Checks if two dates are after each other on the same month.
   *
   * @param value - The first date to compare.
   * @param comparing - The second date to compare.
   * @returns `true` if the first date is after the second date on the same month, otherwise `false`.
   */
  isAfterMonth: (value: TDate, comparing: TDate) => boolean;
  /**
   * Checks if two dates are after each other on the same year.
   *
   * @param value - The first date to compare.
   * @param comparing - The second date to compare.
   * @returns `true` if the first date is after the second date on the same year, otherwise `false`.
   */
  isAfterYear: (value: TDate, comparing: TDate) => boolean;
  /**
   * Checks if two dates are before each other.
   *
   * @param value - The first date to compare.
   * @param comparing - The second date to compare.
   * @returns `true` if the first date is before the second date, otherwise `false`.
   */
  isBefore: (value: TDate, comparing: TDate) => boolean;
  /**
   * Checks if two dates are before each other on the same day.
   *
   * @param value - The first date to compare.
   * @param comparing - The second date to compare.
   * @returns `true` if the first date is before the second date on the same day, otherwise `false`.
   */
  isBeforeDay: (value: TDate, comparing: TDate) => boolean;
  /**
   * Checks if two dates are before each other on the same month.
   *
   * @param value - The first date to compare.
   * @param comparing - The second date to compare.
   * @returns `true` if the first date is before the second date on the same month, otherwise `false`.
   */
  isBeforeMonth: (value: TDate, comparing: TDate) => boolean;
  /**
   * Checks if two dates are before each other on the same year.
   *
   * @param value - The first date to compare.
   * @param comparing - The second date to compare.
   * @returns `true` if the first date is before the second date on the same year, otherwise `false`.
   */
  isBeforeYear: (value: TDate, comparing: TDate) => boolean;
  /**
   * Checks if a date is within a specific range.
   *
   * @param value - The date to check.
   * @param range - The range to check against.
   * @returns `true` if the date is within the range, otherwise `false`.
   */
  isWithinRange: (value: TDate, range: [TDate, TDate]) => boolean;
  /**
   * Gets the start of the year for a given date.
   *
   * @param value - The date to get the start of the year for.
   * @returns The start of the year for the given date.
   */
  startOfYear: (value: TDate) => TDate;
  /**
   * Gets the end of the year for a given date.
   *
   * @param value - The date to get the end of the year for.
   * @returns The end of the year for the given date.
   */
  endOfYear: (value: TDate) => TDate;
  /**
   * Gets the start of the month for a given date.
   *
   * @param value - The date to get the start of the month for.
   * @returns The start of the month for the given date.
   */
  startOfMonth: (value: TDate) => TDate;
  /**
   * Gets the end of the month for a given date.
   *
   * @param value - The date to get the end of the month for.
   * @returns The end of the month for the given date.
   */
  endOfMonth: (value: TDate) => TDate;
  /**
   * Gets the start of the week for a given date.
   *
   * @param value - The date to get the start of the week for.
   * @returns The start of the week for the given date.
   */
  startOfWeek: (value: TDate) => TDate;
  /**
   * Gets the end of the week for a given date.
   *
   * @param value - The date to get the end of the week for.
   * @returns The end of the week for the given date.
   */
  endOfWeek: (value: TDate) => TDate;
  /**
   * Adds a specified number of seconds to a date.
   *
   * @param value - The date to add seconds to.
   * @param count - The number of seconds to add.
   * @returns The new date with the seconds added.
   */
  addSeconds: (value: TDate, count: number) => TDate;
  /**
   * Adds a specified number of minutes to a date.
   *
   * @param value - The date to add minutes to.
   * @param count - The number of minutes to add.
   * @returns The new date with the minutes added.
   */
  addMinutes: (value: TDate, count: number) => TDate;
  /**
   * Adds a specified number of hours to a date.
   *
   * @param value - The date to add hours to.
   * @param count - The number of hours to add.
   * @returns The new date with the hours added.
   */
  addHours: (value: TDate, count: number) => TDate;
  /**
   * Adds a specified number of days to a date.
   *
   * @param value - The date to add days to.
   * @param count - The number of days to add.
   * @returns The new date with the days added.
   */
  addDays: (value: TDate, count: number) => TDate;
  /**
   * Adds a specified number of weeks to a date.
   *
   * @param value - The date to add weeks to.
   * @param count - The number of weeks to add.
   * @returns The new date with the weeks added.
   */
  addWeeks: (value: TDate, count: number) => TDate;
  /**
   * Adds a specified number of months to a date.
   *
   * @param value - The date to add months to.
   * @param count - The number of months to add.
   * @returns The new date with the months added.
   */
  addMonths: (value: TDate, count: number) => TDate;
  /**
   * Adds a specified number of years to a date.
   *
   * @param value - The date to add years to.
   * @param count - The number of years to add.
   * @returns The new date with the years added.
   */
  addYears: (value: TDate, count: number) => TDate;
  /**
   * Gets the start of the day for a given date.
   *
   * @param value - The date to get the start of the day for.
   * @returns The start of the day for the given date.
   */
  startOfDay: (value: TDate) => TDate;
  /**
   * Gets the end of the day for a given date.
   *
   * @param value - The date to get the end of the day for.
   * @returns The end of the day for the given date.
   */
  endOfDay: (value: TDate) => TDate;
  /**
   * Formats a date using a predefined format key.
   *
   * @param value - The date to format.
   * @param formatKey - The key of the format to use.
   * @returns The formatted date string.
   */
  format: (value: TDate, formatKey: keyof DateFormats) => string;
  /**
   * Formats a date using a custom format string.
   *
   * @param value - The date to format.
   * @param formatString - The format string to use.
   * @returns The formatted date string.
   */
  formatByString: (value: TDate, formatString: string) => string;
  /**
   * Formats a number as a string, possibly applying localization.
   *
   * @param numberToFormat - The number string to format.
   * @returns The formatted number string.
   */
  formatNumber: (numberToFormat: string) => string;
  /**
   * Gets the hours component of a date.
   *
   * @param value - The date to extract hours from.
   * @returns The hours component.
   */
  getHours: (value: TDate) => number;
  /**
   * Sets the hours component of a date.
   *
   * @param value - The date to set hours on.
   * @param count - The hours value to set.
   * @returns The new date with the hours set.
   */
  setHours: (value: TDate, count: number) => TDate;
  /**
   * Gets the minutes component of a date.
   *
   * @param value - The date to extract minutes from.
   * @returns The minutes component.
   */
  getMinutes: (value: TDate) => number;
  /**
   * Sets the minutes component of a date.
   *
   * @param value - The date to set minutes on.
   * @param count - The minutes value to set.
   * @returns The new date with the minutes set.
   */
  setMinutes: (value: TDate, count: number) => TDate;
  /**
   * Gets the seconds component of a date.
   *
   * @param value - The date to extract seconds from.
   * @returns The seconds component.
   */
  getSeconds: (value: TDate) => number;
  /**
   * Sets the seconds component of a date.
   *
   * @param value - The date to set seconds on.
   * @param count - The seconds value to set.
   * @returns The new date with the seconds set.
   */
  setSeconds: (value: TDate, count: number) => TDate;
  /**
   * Gets the day of the month from a date.
   *
   * @param value - The date to extract the day from.
   * @returns The day of the month.
   */
  getDate: (value: TDate) => number;
  /**
   * Sets the day of the month on a date.
   *
   * @param value - The date to set the day on.
   * @param count - The day of the month to set.
   * @returns The new date with the day set.
   */
  setDate: (value: TDate, count: number) => TDate;
  /**
   * Gets the week number for a given date.
   *
   * @param value - The date to get the week number for.
   * @returns The week number.
   */
  getWeek: (value: TDate) => number;
  /**
   * Gets the month component of a date (0-based).
   *
   * @param value - The date to extract the month from.
   * @returns The month component (0 = January, 11 = December).
   */
  getMonth: (value: TDate) => number;
  /**
   * Gets the number of days in the month for a given date.
   *
   * @param value - The date to get the number of days in the month for.
   * @returns The number of days in the month.
   */
  getDaysInMonth: (value: TDate) => number;
  /**
   * Sets the month component of a date (0-based).
   *
   * @param value - The date to set the month on.
   * @param count - The month to set (0 = January, 11 = December).
   * @returns The new date with the month set.
   */
  setMonth: (value: TDate, count: number) => TDate;
  /**
   * Gets the date representing the next month.
   *
   * @param value - The date to get the next month for.
   * @returns The date in the next month.
   */
  getNextMonth: (value: TDate) => TDate;
  /**
   * Gets the date representing the previous month.
   *
   * @param value - The date to get the previous month for.
   * @returns The date in the previous month.
   */
  getPreviousMonth: (value: TDate) => TDate;
  /**
   * Gets an array of dates representing each month in the year of the given date.
   *
   * @param value - The date to get the month array for.
   * @returns An array of dates, one for each month.
   */
  getMonthArray: (value: TDate) => TDate[];
  /**
   * Gets the year component of a date.
   *
   * @param value - The date to extract the year from.
   * @returns The year component.
   */
  getYear: (value: TDate) => number;
  /**
   * Sets the year component of a date.
   *
   * @param value - The date to set the year on.
   * @param count - The year to set.
   * @returns The new date with the year set.
   */
  setYear: (value: TDate, count: number) => TDate;
  /**
   * Merges the date part of one date with the time part of another date.
   *
   * @param date - The date to take the date part from.
   * @param time - The date to take the time part from.
   * @returns The merged date and time.
   */
  mergeDateAndTime: (date: TDate, time: TDate) => TDate;
  /**
   * Gets the names of the weekdays in the current locale.
   *
   * @returns An array of weekday names.
   */
  getWeekdays: () => string[];
  /**
   * Gets a 2D array representing the weeks in the month of the given date.
   *
   * @param date - The date to get the week array for.
   * @returns A 2D array of dates, grouped by week.
   */
  getWeekArray: (date: TDate) => TDate[][];
  /**
   * Gets an array of dates representing the range of years between two dates.
   *
   * @param start - The start date of the range.
   * @param end - The end date of the range.
   * @returns An array of dates, one for each year in the range.
   */
  getYearRange: (start: TDate, end: TDate) => TDate[];
  /**
   * Gets the localized string for "am" or "pm".
   *
   * @param meridiem - Either "am" or "pm".
   * @returns The localized meridiem string.
   */
  getMeridiemText: (meridiem: "am" | "pm") => string;
}

/**
 * Interface representing the environment information for the Storm application.
 *
 * @remarks
 * The environment information includes information about the current runtime environment, such as the operating system, architecture, and other relevant details.
 */
interface StormEnvInterface {
  /**
   * Indicates if the current process has a TTY (interactive terminal) available.
   */
  hasTTY: boolean;
  /**
   * A boolean indicator specifying if the application is running in a Continuous Integration (CI) environment.
   */
  isCI: boolean;
  /**
   * The current runtime mode to determine the behavior of the application in different environments.
   *
   * @remarks
   * The `mode` is typically set based on the deployment environment and can affect configuration, logging, and feature flags. Valid values for the `mode` are:
   * - `"development"`: Used for local development and testing.
   * - `"staging"`: Used for staging environments that closely mirror production.
   * - `"production"`: Used for live production environments.
   */
  mode: "development" | "staging" | "production";
  /**
   * The environment name as specified in the plugin context.
   */
  environment: string;
  /**
   * A boolean indicator specifying if running in production mode.
   */
  isProduction: boolean;
  /**
   * A boolean indicator specifying if running in staging mode.
   */
  isStaging: boolean;
  /**
   * A boolean indicator specifying if running in development mode.
   */
  isDevelopment: boolean;
  /**
   * A boolean indicator specifying if running in debug mode (typically development with debug enabled).
   */
  isDebug: boolean;
  /**
   * A boolean indicator specifying if running in test mode or under test conditions.
   */
  isTest: boolean;
  /**
   * A boolean indicator specifying if running in a minimal environment (e.g., CI, test, or no TTY).
   */
  isMinimal: boolean;
  /**
   * A boolean indicator specifying if the runtime platform is Windows.
   */
  isWindows: boolean;
  /**
   * A boolean indicator specifying if the runtime platform is Linux.
   */
  isLinux: boolean;
  /**
   * A boolean indicator specifying if the runtime platform is macOS.
   */
  isMacOS: boolean;
  /**
   * A boolean indicator specifying if running in Node.js or a Node.js-compatible runtime.
   */
  isNode: boolean;
  /**
   * A boolean indicator specifying if running in a server environment (Node.js or specified platform).
   */
  isServer: boolean;
  /**
   * A boolean indicator specifying if the environment supports interactive input/output.
   */
  isInteractive: boolean;
  /**
   * A boolean indicator specifying if the terminal supports Unicode characters.
   */
  isUnicodeSupported: boolean;
  /**
   * A boolean indicator specifying if the terminal supports colored output.
   */
  isColorSupported: boolean;
  /**
   * An object describing the color support level for stdout and stderr streams.
   */
  supportsColor: {
    stdout:
      | boolean
      | number
      | {
          level: number;
          hasBasic: boolean;
          has256: boolean;
          has16m: boolean;
        };
    stderr:
      | boolean
      | number
      | {
          level: number;
          hasBasic: boolean;
          has256: boolean;
          has16m: boolean;
        };
  };
  /**
   * The name of the organization maintaining the application.
   */
  organization: string;
  /**
   * The application name.
   */
  name: string;
  /**
   * The package name from package.json or the application name.
   */
  packageName: string;
  /**
   * The current application version.
   */
  version: string;
  /**
   * The build identifier for the current release.
   */
  buildId: string;
  /**
   * The build or release timestamp.
   */
  timestamp: number;
  /**
   * The release identifier.
   */
  releaseId: string;
  /**
   * A tag combining the application name and version.
   */
  releaseTag: string;
  /**
   * The default locale for the application.
   */
  defaultLocale: string;
  /**
   * The default timezone for the application.
   */
  defaultTimezone: string;
  /**
   * The runtime platform (e.g., "node", "web", etc.).
   */
  platform: StormBuildInfo["platform"];
  /**
   * An object containing standardized paths for data, config, cache, logs, and temp files, adapted to the current OS and environment variables.
   */
  paths: StormEnvPaths;
}

/**
 * The environment paths for storing things like data, config, logs, and cache in the current runtime environment.
 *
 * @remarks
 * On macOS, directories are generally created in \`~/Library/Application Support/<name>\`.
 * On Windows, directories are generally created in \`%AppData%/<name>\`.
 * On Linux, directories are generally created in \`~/.config/<name>\` - this is determined via the [XDG Base Directory spec](https://specifications.freedesktop.org/basedir-spec/latest/).
 *
 * If the \`STORM_DATA_DIR\`, \`STORM_CONFIG_DIR\`, \`STORM_CACHE_DIR\`, \`STORM_LOG_DIR\`, or \`STORM_TEMP_DIR\` environment variables are set, they will be used instead of the default paths.
 */
type StormEnvPaths = Record<StormEnvPathType, string>;

/**
 * The environment paths for storing things like data, config, logs, and cache in the current runtime environment.
 *
 * @remarks
 * These environment path types are accessed in the {@link StormEnvPaths} type.
 */
type StormEnvPathType = "data" | "config" | "cache" | "log" | "temp";

/**
 * The Storm Error interface.
 */
interface StormErrorInterface extends Error {
  /**
   * The error code
   */
  code: number;
  /**
   * The error message parameters
   */
  params: string[];
  /**
   * The type of error that was thrown.
   */
  type: ErrorType;
  /**
   * A url to display the error message
   */
  url: string;
  /**
   * Additional data to be passed with the error
   */
  data?: any;
  /**
   * The underlying cause of the error, if any. This is typically another error object that caused this error to be thrown.
   */
  cause: StormErrorInterface | undefined;
  /**
   * The error stack
   *
   * @remarks
   * This is overridden in `StormError` to be a parsed stacktrace
   */
  stack: string;
  /**
   * The parsed stacktrace
   */
  stacktrace: ParsedStacktrace[];
  /**
   * The original stacktrace
   */
  originalStack: string;
  /**
   * Returns a formatted error string that can be displayed to the user.
   */
  toDisplay: () => string;
  /**
   * Internal function to inherit the {@link Error} prototype.
   *
   * @internal
   */
  __proto__: Error;
}

/**
 * Interface representing the Storm error options.
 */
interface StormErrorOptions {
  /**
   * The error name.
   */
  name?: string;
  /**
   * The error code
   */
  code: number;
  /**
   * The error message parameters.
   */
  params?: string[];
  /**
   * The error cause.
   */
  cause?: unknown;
  /**
   * The error stack.
   */
  stack?: string;
  /**
   * The type of error.
   *
   * @defaultValue "exception"
   */
  type?: ErrorType;
  /**
   * Additional data to be included with the error.
   */
  data?: any;
}

/**
 * Interface representing a Storm event.
 *
 * @template TType - The type of the event.
 * @template TData - The data associated with the event.
 */
interface StormEventInterface<
  TType extends string = string,
  TData extends Record<string, any> = Record<string, any>
> {
  /**
   * The timestamp of the event.
   */
  timestamp: number;
  /**
   * The unique identifier for the event.
   */
  id: string;
  /**
   * The event data object.
   */
  data: TData;
  /**
   * The unique identifier for the current payload.
   */
  payloadId: string;
  /**
   * The type of the event.
   */
  type: TType;
  /**
   * The version of the event.
   */
  version: string;
  /**
   * The event label.
   *
   * @remarks
   * The label format is "\{type\}-v\{version\}"
   */
  label: string;
}

/**
 * A logger interface. It provides methods to log messages at different severity levels.
 *
 * @remarks
 * The inspiration and much of the original implementation for this logger was taken from the [LogTape](https://logtape.org/) project. Major thanks to that project.
 *
 * ```typescript
 * $storm.log.debug(`A debug message with ${value}.`);
 * $storm.log.info(`An info message with ${value}.`);
 * $storm.log.warn(`A warning message with ${value}.`);
 * $storm.log.error(`An error message with ${value}.`);
 * $storm.log.fatal(`A fatal error message with ${value}.`);
 * ```
 */
interface StormLogInterface {
  /**
   * Get a logger with contextual properties. This is useful for log multiple messages with the shared set of properties.
   *
   * ```typescript
   * const ctx = $storm.log.with({ foo: 123, bar: "abc" });
   * ctx.info("A message with {foo} and {bar}.");
   * ctx.warn("Another message with {foo}, {bar}, and {baz}.", { baz: true });
   * ```
   *
   * The above code is equivalent to:
   *
   * ```typescript
   * $storm.log.info("A message with {foo} and {bar}.", { foo: 123, bar: "abc" });
   * $storm.log.warn(
   *   "Another message with {foo}, {bar}, and {baz}.",
   *   { foo: 123, bar: "abc", baz: true },
   * );
   * ```
   *
   * @param properties - The properties to add to the logger.
   * @returns A logger with the specified properties.
   */
  with: (properties: Record<string, unknown>) => StormLogInterface;
  /**
   * Log a debug message. Use this as a template string prefix.
   *
   * ```typescript
   * $storm.log.debug(`A debug message with ${value}.`);
   * ```
   *
   * @param message - The message template strings array.
   * @param values - The message template values.
   */
  debug: ((
    message: TemplateStringsArray,
    ...values: readonly unknown[]
  ) => void) &
    ((
      message: string,
      properties?: Record<string, unknown> | (() => Record<string, unknown>)
    ) => void) &
    ((callback: LogCallback) => void);
  /**
   * Log an informational message. Use this as a template string prefix.
   *
   * ```typescript
   * $storm.log.info(`An info message with ${value}.`);
   * ```
   *
   * @param message - The message template strings array.
   * @param values - The message template values.
   */
  info: ((
    message: TemplateStringsArray,
    ...values: readonly unknown[]
  ) => void) &
    ((
      message: string,
      properties?: Record<string, unknown> | (() => Record<string, unknown>)
    ) => void) &
    ((callback: LogCallback) => void);
  /**
   * Log a warning message. Use this as a template string prefix.
   *
   * ```typescript
   * $storm.log.warn(`A warning message with ${value}.`);
   * ```
   *
   * @param message - The message template strings array.
   * @param values - The message template values.
   */
  warn: ((
    message: TemplateStringsArray,
    ...values: readonly unknown[]
  ) => void) &
    ((
      message: string,
      properties?: Record<string, unknown> | (() => Record<string, unknown>)
    ) => void) &
    ((callback: LogCallback) => void);
  /**
   * Log an error message. Use this as a template string prefix.
   *
   * ```typescript
   * $storm.log.error(`An error message with ${value}.`);
   * ```
   *
   * @param message - The message template strings array.
   * @param values - The message template values.
   */
  error: ((
    message: TemplateStringsArray | Error,
    ...values: readonly unknown[]
  ) => void) &
    ((
      message: string,
      properties?: Record<string, unknown> | (() => Record<string, unknown>)
    ) => void) &
    ((callback: LogCallback) => void);
  /**
   * Log a fatal error message. Use this as a template string prefix.
   *
   * ```typescript
   * $storm.log.fatal(`A fatal error message with ${value}.`);
   * ```
   *
   * @param message - The message template strings array.
   * @param values - The message template values.
   */
  fatal: ((
    message: TemplateStringsArray | Error,
    ...values: readonly unknown[]
  ) => void) &
    ((
      message: string,
      properties?: Record<string, unknown> | (() => Record<string, unknown>)
    ) => void) &
    ((callback: LogCallback) => void);
}

/**
 * Interface representing a Storm payload.
 */
interface StormPayloadInterface<
  TData extends Record<string, any> = Record<string, any>
> {
  /**
   * The timestamp of the payload.
   */
  readonly timestamp: number;
  /**
   * The unique identifier for the payload.
   */
  readonly id: string;
  /**
   * The data associated with the payload.
   */
  readonly data: TData;
  /**
   * Merges the given data into the payload.
   *
   * @param data - The data to merge into the payload.
   */
  merge: (data: Partial<TData>) => void;
}

/**
 * A Storm result interface. It represents the structure of a result returned by the Storm Stack runtime.
 *
 * @remarks
 * The `StormResultInterface` interface is used to standardize the structure of results returned by the Storm Stack runtime.
 * It includes properties for the request ID, data, error information, timestamp, and success status.
 */
interface StormResultInterface<
  TData extends any | StormErrorInterface = any | StormErrorInterface
> {
  /**
   * The unique identifier for the payload.
   */
  payloadId: string;
  /**
   * The result meta.
   */
  meta: Record<string, any>;
  /**
   * The data of the result.
   */
  data: TData;
  /**
   * The timestamp of the result.
   */
  timestamp: number;
  /**
   * An indicator of whether the result was successful.
   */
  success: boolean;
}

/**
 * The Storm Storage Interface extends the [Unstorage](https://unstorage.unjs.io/) Storage interface with additional functionality specific to the Storm Stack.
 *
 * @see https://unstorage.unjs.io/
 *
 * @remarks
 * This interface adds the ability to initialize the storage adapters and provides a consistent API for interacting with the storage layer.
 */
type StormStorageInterface = Storage_2 & AsyncDisposable;

type SuccessMessageDetails = MessageDetails<"success">;

/**
 * Represents the time unit types used in date manipulation.
 *
 * @remarks
 * This type is used to specify the unit of time when performing operations like adding or subtracting time from a date.
 */
type TimeUnit =
  | "years"
  | "quarters"
  | "months"
  | "weeks"
  | "days"
  | "hours"
  | "minutes"
  | "seconds"
  | "milliseconds";

type ValidationDetail =
  | {
      code: string;
      message?: string;
      type: ValidationDetailType;
      params?: Record<string, any>;
    }
  | {
      code?: string;
      message: string;
      type: ValidationDetailType;
      params?: Record<string, any>;
    };

type ValidationDetailType = "help" | "error" | "warning" | "info" | "success";

type WarningMessageDetails = MessageDetails<"warning">;
