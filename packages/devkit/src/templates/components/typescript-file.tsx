/* -------------------------------------------------------------------

                  âš¡ Storm Software - Storm Stack

 This code was released as part of the Storm Stack project. Storm Stack
 is maintained by Storm Software under the Apache-2.0 license, and is
 free for commercial and private use. For more information, please visit
 our licensing page at https://stormsoftware.com/licenses/projects/storm-stack.

 Website:                  https://stormsoftware.com
 Repository:               https://github.com/storm-software/storm-stack
 Documentation:            https://docs.stormsoftware.com/projects/storm-stack
 Contact:                  https://stormsoftware.com/contact

 SPDX-License-Identifier:  Apache-2.0

 ------------------------------------------------------------------- */

import type { Children } from "@alloy-js/core";
import {
  code,
  Scope,
  Show,
  SourceDirectoryContext,
  splitProps,
  useContext,
  useScope
} from "@alloy-js/core";
import {
  getSourceDirectoryData,
  ImportStatements,
  PackageContext,
  SourceFileContext,
  TSModuleScope,
  useSourceFile
} from "@alloy-js/typescript";
import { appendPath } from "@stryke/path/append";
import { isBoolean } from "@stryke/type-checks/is-boolean";
import { isString } from "@stryke/type-checks/is-string";
import {
  ComponentProps,
  SourceFileHeaderProps,
  TypescriptFileImportItem,
  TypescriptFileImports
} from "../../types/templates";
import { SingleLineComment } from "./single-line-comment";
import { SourceFile, SourceFileProps } from "./source-file";

export type TypescriptFileProps = Omit<SourceFileProps, "filetype"> &
  ComponentProps & {
    header?: Children;
    imports?: TypescriptFileImports;
    export?: boolean | string;
    tsx?: boolean;
  };

/**
 * A base component representing a Storm Stack generated Typescript source file.
 *
 * @param props - The properties for the source file.
 * @returns The rendered source file component.
 */
export function TypescriptFile(props: TypescriptFileProps) {
  const [{ children, path, imports, tsx, header }, rest] = splitProps(props, [
    "children",
    "path",
    "imports",
    "tsx",
    "header"
  ]);

  const directoryContext = useContext(SourceDirectoryContext)!;
  const sdData = getSourceDirectoryData(directoryContext);

  const modulePath = appendPath(path, directoryContext.path);
  const scope = new TSModuleScope(modulePath, useScope());
  sdData.modules.add(scope);

  const pkg = useContext(PackageContext);
  if (pkg) {
    pkg.scope.addModule(scope);
  }

  if (props.export) {
    if (pkg) {
      if (isBoolean(props.export)) {
        pkg.scope.addExport(modulePath, scope);
      } else {
        pkg.scope.addExport(props.export, scope);
      }
    }
  }

  return (
    <SourceFileContext.Provider
      value={{
        scope
      }}>
      <Scope value={scope}>
        <SourceFile
          {...rest}
          path={modulePath}
          header={
            header ?? (
              <TypescriptFileHeader>
                <TypescriptFileHeaderImports imports={imports} scope={scope} />
              </TypescriptFileHeader>
            )
          }
          filetype={tsx ? "tsx" : "typescript"}>
          {children}
        </SourceFile>
      </Scope>
    </SourceFileContext.Provider>
  );
}

export interface TypescriptFileHeaderProps extends SourceFileHeaderProps {
  header?: Children;
}

/**
 * Renders the header for a Storm Stack Typescript source file.
 *
 * @param props - The properties for the source file header.
 * @returns The rendered source file header.
 */
export function TypescriptFileHeader(props: TypescriptFileHeaderProps) {
  const {
    header,
    disableEslint = true,
    disableBiome = true,
    disablePrettier = false,
    children
  } = props;

  return (
    <>
      <Show when={Boolean(header)}>
        {header}
        <hbr />
      </Show>
      <hbr />
      <Show when={Boolean(disableEslint)}>
        <SingleLineComment variant="slash-star">
          {"eslint-disable"}
        </SingleLineComment>
        <hbr />
      </Show>
      <Show when={Boolean(disablePrettier)}>
        <SingleLineComment variant="slash-star">
          {"prettier-ignore"}
        </SingleLineComment>
        <hbr />
      </Show>
      <Show when={Boolean(disableBiome)}>
        <SingleLineComment>{"biome-ignore lint: disable"}</SingleLineComment>
        <hbr />
      </Show>
      <Show
        when={
          Boolean(disableEslint) ||
          Boolean(disablePrettier) ||
          Boolean(disableBiome)
        }>
        <hbr />
      </Show>
      <Show when={Boolean(children)}>
        <>
          {children}
          <hbr />
        </>
      </Show>
      <SingleLineComment>{code`Generated by Storm Stack`}</SingleLineComment>
      <hbr />
      <SingleLineComment>
        {code`NOTE: Do not edit this file manually - it will be overwritten automatically by the "storm prepare" command`}
      </SingleLineComment>
      <hbr />
    </>
  );
}

export interface TypescriptFileHeaderImportsProps
  extends SourceFileHeaderProps {
  imports?: TypescriptFileImports;
  scope?: TSModuleScope;
}

/**
 * Renders the header for a Storm Stack Typescript source file.
 *
 * @param props - The properties for the source file header.
 * @returns The rendered source file header.
 */
export function TypescriptFileHeaderImports(
  props: TypescriptFileHeaderImportsProps
) {
  const { imports } = props;

  const sourceFile = useSourceFile();
  const scope = props.scope ?? sourceFile.scope;

  return (
    <Show
      when={
        scope.importedModules.size > 0 ||
        (!!imports && Object.keys(imports).length > 0)
      }>
      <Show when={!!imports && Object.keys(imports).length > 0}>
        {Object.entries(imports ?? {}).map(([module, imported]) => {
          return code`import ${
            imported === null
              ? ""
              : (
                  imported.filter(
                    i => !isString(i) && i.default
                  ) as TypescriptFileImportItem[]
                )
                  .map(i => (i.alias ? i.alias : i.name))
                  .join(", ") +
                (imported.filter(i => !isString(i) && i.default).length > 0 &&
                imported.filter(i => isString(i) || !i.default).length > 0
                  ? ", "
                  : "") +
                (imported.filter(i => isString(i) || !i.default).length > 0
                  ? `{ ${imported
                      .map(i =>
                        isString(i)
                          ? i
                          : i.alias
                            ? `${i.name} as ${i.alias}`
                            : i.name
                      )
                      .join(", ")} }`
                  : "")
          } from "${module}";`;
        })}
      </Show>
      <Show when={scope.importedModules.size > 0}>
        <ImportStatements records={scope.importedModules} />
      </Show>
      <hbr />
    </Show>
  );
}
