/* eslint-disable */
// biome-ignore lint: disable

// Generated with Storm Stack
// Note: Do not edit this file manually - it will be overwritten automatically

// This file is an augmentation to the built-in StormContext interface
// Thus cannot contain any top-level imports
// <https://www.typescriptlang.org/docs/handbook/declaration-merging.html#module-augmentation>

/**
 * The various types of date formats used in Storm Stack applications.
 */
interface DateFormats<TFormatToken = string> {
  /**
   * Localized full date
   *
   * @example "Jan 1, 2019"
   */
  fullDate: TFormatToken;
  /**
   * Partially localized full date with weekday, useful for text-to-speech accessibility
   *
   * @example "Tuesday, January 1, 2019"
   */
  fullDateWithWeekday: TFormatToken;
  /**
   * Date format string with month and day of month
   *
   * @example "1 January"
   */
  normalDate: TFormatToken;
  /**
   * Date format string with weekday, month and day of month
   *
   * @example "Wed, Jan 1"
   */
  normalDateWithWeekday: TFormatToken;
  /**
   * Shorter day format
   *
   * @example "Jan 1"
   */
  shortDate: TFormatToken;
  /**
   * Year format string
   *
   * @example "2019"
   */
  year: TFormatToken;
  /**
   * Month format string
   *
   * @example "January"
   */
  month: TFormatToken;
  /**
   * Short month format string
   *
   * @example "Jan"
   */
  monthShort: TFormatToken;
  /**
   * Month with year format string
   *
   * @example "January 2018"
   */
  monthAndYear: TFormatToken;
  /**
   * Month with date format string
   *
   * @example "January 1"
   */
  monthAndDate: TFormatToken;
  /**
   * Weekday format string
   *
   * @example "Wednesday"
   */
  weekday: TFormatToken;
  /**
   * Short weekday format string
   *
   * @example "Wed"
   */
  weekdayShort: TFormatToken;
  /**
   * Day format string
   *
   * @example "1"
   */
  dayOfMonth: TFormatToken;
  /**
   * Hours format string
   *
   * @example "11"
   */
  hours12h: TFormatToken;
  /**
   * Hours format string
   *
   * @example "23"
   */
  hours24h: TFormatToken;
  /**
   * Minutes format string
   *
   * @example "44"
   */
  minutes: TFormatToken;
  /**
   * Seconds format string
   *
   * @example "00"
   */
  seconds: TFormatToken;
  /**
   * Full time localized format string
   *
   * @example "11:44 PM" for US, "23:44" for Europe
   */
  fullTime: TFormatToken;
  /**
   * Not localized full time format string
   *
   * @example "11:44 PM"
   */
  fullTime12h: TFormatToken;
  /**
   * Not localized full time format string
   *
   * @example "23:44"
   */
  fullTime24h: TFormatToken;
  /**
   * Date & time format string with localized time
   *
   * @example "Jan 1, 2018 11:44 PM"
   */
  fullDateTime: TFormatToken;
  /**
   * Not localized date & Time format 12h
   *
   * @example "Jan 1, 2018 11:44 PM"
   */
  fullDateTime12h: TFormatToken;
  /**
   * Not localized date & Time format 24h
   *
   * @example "Jan 1, 2018 23:44"
   */
  fullDateTime24h: TFormatToken;
  /**
   * Localized keyboard input friendly date format
   *
   * @example "02/13/2020"
   */
  keyboardDate: TFormatToken;
  /**
   * Localized keyboard input friendly date/time format
   *
   * @example "02/13/2020 23:44"
   */
  keyboardDateTime: TFormatToken;
  /**
   * Partially localized keyboard input friendly date/time 12h format
   *
   * @example "02/13/2020 11:44 PM"
   */
  keyboardDateTime12h: TFormatToken;
  /**
   * Partially localized keyboard input friendly date/time 24h format
   *
   * @example "02/13/2020 23:44"
   */
  keyboardDateTime24h: TFormatToken;
  /**
   * System-friendly date/time 24h format for scenarios such as traces and logging
   *
   * @example "02/13/2020 23:44:55.666"
   */
  systemDateTime: TFormatToken;
  /**
   * System-friendly date/time format for scenarios such as file suffixes or URLs
   *
   * @example "02-13-2020_23-44-55-666"
   */
  filePathDateTime: TFormatToken;
}

type ErrorMessageDetails = MessageDetails<"error">;

/**
 * The type of error response message/event
 */
type ErrorType =
  | "general"
  | "not_found"
  | "validation"
  | "service_unavailable"
  | "action_unsupported"
  | "security"
  | "unknown";

/**
 * The formatted values for a log record.
 */
interface FormattedValues {
  /**
   * The formatted timestamp.
   */
  timestamp: string;
  /**
   * The formatted log level.
   */
  level: string;
  /**
   * The formatted message.
   */
  message: string;
  /**
   * The unformatted log record.
   */
  record: LogRecord;
}

type HelpMessageDetails = MessageDetails<"help">;

type InfoMessageDetails = MessageDetails<"info">;

/**
 * A adapter is a function that accepts a log record and prints it somewhere.
 *
 * @param record - The log record to adapter.
 */
type LogAdapter = (record: LogRecord) => void;

/**
 * A factory function that creates a log adapter.
 *
 * @remarks
 * The created log adapter will be used to log messages in the application. This function is expected to be the default export of the log plugin's module.
 *
 * @returns The created {@link LogAdapter}.
 */
type LogAdapterFactory = () => LogAdapter;

interface LogAdapterInstance {
  /**
   * The log adapter function.
   */
  handle: LogAdapter;
  /**
   * The lowest log level for the adapter to accept.
   */
  logLevel: LogLevel;
}

/**
 * A logging callback function.  It is used to defer the computation of a
 * message template until it is actually logged.
 * @param prefix - The message template prefix.
 * @returns The rendered message array.
 */
type LogCallback = (prefix: LogTemplatePrefix) => unknown[];

/**
 * A filter is a function that accepts a log record and returns `true` if the
 * record should be passed to the adapter.
 *
 * @param record - The log record to filter.
 * @returns `true` if the record should be passed to the adapter.
 */
type LogFilter = (record: LogRecord) => boolean;

/**
 * A filter-like value is either a {@link LogFilter} or a {@link LogLevel}.
 * `null` is also allowed to represent a filter that rejects all records.
 */
type LogFilterLike = LogFilter | LogLevel | null;

/**
 * The severity level of a {@link LogRecord}.
 */
type LogLevel = "debug" | "info" | "warning" | "error" | "fatal";

declare const LogLevel: {
  DEBUG: LogLevel;
  INFO: LogLevel;
  WARNING: LogLevel;
  ERROR: LogLevel;
  FATAL: LogLevel;
};

/**
 * A log record.
 */
interface LogRecord {
  /**
   * The log level.
   */
  readonly level: LogLevel;
  /**
   * The log message.  This is the result of substituting the message template
   * with the values.  The number of elements in this array is always odd,
   * with the message template values interleaved between the substitution
   * values.
   */
  readonly message: readonly unknown[];
  /**
   * The raw log message. This is the original message template without any further processing. It can be either:
   * - A string without any substitutions if the log record was created with a method call syntax, e.g., "Hello, \{name\}!" for logger.info("Hello, \{name\}!", \{ name \}).
   * - A template string array if the log record was created with a tagged template literal syntax, e.g., ["Hello, ", "!"] for logger.info\`Hello, $\{name\}!\`
   */
  readonly rawMessage: string | TemplateStringsArray;
  /**
   * The timestamp of the log record in milliseconds since the Unix epoch.
   */
  readonly timestamp: number;
  /**
   * The extra properties of the log record.
   */
  readonly properties: Record<string, unknown>;
}

/**
 * A logging template prefix function.  It is used to log a message in
 * a {@link LogCallback} function.
 * @param message - The message template strings array.
 * @param values - The message template values.
 * @returns The rendered message array.
 */
type LogTemplatePrefix = (
  message: TemplateStringsArray,
  ...values: unknown[]
) => unknown[];

type MessageDetails<TMessageType extends MessageType = MessageType> =
  | {
      code: string;
      message?: string;
      type: TMessageType;
      params?: Record<string, any>;
    }
  | {
      code?: string;
      message: string;
      type: TMessageType;
      params?: Record<string, any>;
    };

type MessageType = "help" | "error" | "warning" | "info" | "success";

interface ParsedStacktrace {
  column?: number;
  function?: string;
  line?: number;
  source: string;
}

/**
 * A storage adapter is an instance of a {@link Driver} used by [Unstorage](https://unstorage.unjs.io/).
 */
type StorageAdapter = Driver & AsyncDisposable;

/**
 * A factory function that creates a storage adapter.
 *
 * @remarks
 * The created storage adapter will be used to interact with the storage layer in the application. This function is expected to be the default export of the storage plugin's module.
 *
 * @returns The created {@link StorageAdapter}.
 */
type StorageAdapterFactory = () => StorageAdapter;

/**
 * The base configuration used by Storm Stack applications
 *
 * @remarks
 * This interface is used to define the environment variables, configuration options, and runtime settings used by Storm Stack applications. It is used to provide type safety, autocompletion, and default values for the environment variables. The comments of each variable are used to provide documentation descriptions when running the \`storm docs\` command.
 *
 * @categoryDescription Platform
 * The name of the platform the configuration parameter is intended for use in.
 *
 * @showCategories
 */
interface StormConfigInterface {
  /**
   * An indicator that specifies the application is running in the local Storm Stack development environment.
   *
   * @hidden
   * @readonly
   * @category node
   */
  readonly STORM_STACK_LOCAL?: boolean;
  /**
   * The name of the application.
   *
   * @readonly
   * @category neutral
   */
  readonly APP_NAME: string;
  /**
   * The version of the application.
   *
   * @defaultValue "1.0.0"
   *
   * @readonly
   * @category neutral
   */
  readonly APP_VERSION: string;
  /**
   * The unique identifier for the build.
   *
   * @readonly
   * @category neutral
   */
  readonly BUILD_ID: string;
  /**
   * The timestamp the build was ran at.
   *
   * @readonly
   * @category neutral
   */
  readonly BUILD_TIMESTAMP: string;
  /**
   * A checksum hash created during the build.
   *
   * @readonly
   * @category neutral
   */
  readonly BUILD_CHECKSUM: string;
  /**
   * The unique identifier for the release.
   *
   * @readonly
   * @category neutral
   */
  readonly RELEASE_ID: string;
  /**
   * The tag for the release. This is generally in the format of "\<APP_NAME\>\@\<APP_VERSION\>".
   *
   * @readonly
   * @category neutral
   */
  readonly RELEASE_TAG: string;
  /**
   * The name of the organization that maintains the application.
   *
   * @remarks
   * This variable is used to specify the name of the organization that maintains the application. If not provided in an environment, it will try to use the value in {@link @storm-software/config-tools/StormWorkspaceConfig#organization}.
   *
   * @alias ORG
   * @alias ORG_ID
   * @category neutral
   */
  ORGANIZATION: string;
  /**
   * The platform for which the application was built.
   *
   * @defaultValue "neutral"
   *
   * @category neutral
   */
  PLATFORM: "node" | "neutral" | "browser";
  /**
   * The mode in which the application is running.
   *
   * @defaultValue "production"
   *
   * @alias NODE_ENV
   *
   * @category neutral
   */
  MODE: "development" | "staging" | "production";
  /**
   * The environment the application is running in. This value will be populated with the value of `MODE` if not provided.
   *
   * @defaultValue "production"
   *
   * @alias ENV
   * @alias VERCEL_ENV
   * @category neutral
   */
  ENVIRONMENT: string;
  /**
   * Indicates if the application is running in debug mode.
   *
   * @category neutral
   */
  DEBUG: boolean;
  /**
   * An indicator that specifies the current runtime is a test environment.
   *
   * @category neutral
   */
  TEST: boolean;
  /**
   * An indicator that specifies the current runtime is a minimal environment.
   *
   * @category node
   */
  MINIMAL: boolean;
  /**
   * An indicator that specifies the current runtime is a no color environment.
   *
   * @category node
   */
  NO_COLOR: boolean;
  /**
   * An indicator that specifies the current runtime is a force color environment.
   *
   * @category node
   */
  FORCE_COLOR: boolean | number;
  /**
     * An indicator that specifies the current runtime should force hyperlinks in terminal output.
     *
     * @remarks
     * This variable is used to force hyperlinks in terminal output, even if the terminal does not support them. This is useful for debugging and development purposes.

     * @category node
     */
  FORCE_HYPERLINK: boolean | number;
  /**
   * The name of the agent running the application. This variable is set by certain CI/CD systems.
   *
   * @readonly
   * @category neutral
   */
  readonly AGENT_NAME?: string;
  /**
   * The color terminal type. This variable is set by certain terminal emulators.
   *
   * @readonly
   * @category node
   */
  readonly COLORTERM?: string;
  /**
   * The terminal type. This variable is set by certain CI/CD systems.
   *
   * @remarks
   * This variable is used to specify the terminal type that the application is running in. It can be used to determine how to format output for the terminal.
   *
   * @readonly
   * @category node
   */
  readonly TERM?: string;
  /**
   * The terminal program name. This variable is set by certain terminal emulators.
   *
   * @readonly
   * @category node
   */
  readonly TERM_PROGRAM?: string;
  /**
   * The terminal program version. This variable is set by certain terminal emulators.
   *
   * @readonly
   * @category node
   */
  readonly TERM_PROGRAM_VERSION?: string;
  /**
   * The terminal emulator name. This variable is set by certain terminal emulators.
   *
   * @readonly
   * @category node
   */
  readonly TERMINAL_EMULATOR?: string;
  /**
   * The terminal emulator session ID. This variable is set by certain terminal emulators.
   *
   * @readonly
   * @category node
   */
  readonly WT_SESSION?: string;
  /**
   * An indicator that specifies the current terminal is running Terminus Sublime. This variable is set by certain terminal emulators.
   *
   * @readonly
   * @category node
   */
  readonly TERMINUS_SUBLIME?: boolean;
  /**
   * The ConEmu task name. This variable is set by certain terminal emulators.
   *
   * @readonly
   * @category node
   */
  readonly ConEmuTask?: string;
  /**
   * The cursor trace ID. This variable is set by certain terminal emulators.
   *
   * @readonly
   * @category node
   */
  readonly CURSOR_TRACE_ID?: string;
  /**
   * The VTE version. This variable is set by certain terminal emulators.
   *
   * @readonly
   * @category node
   */
  readonly VTE_VERSION?: string;
  /**
   * Indicates if error stack traces should be captured.
   *
   * @category neutral
   */
  STACKTRACE: boolean;
  /**
   * Indicates if error data should be included.
   *
   * @category neutral
   */
  INCLUDE_ERROR_DATA: boolean;
  /**
   * A web page to lookup error messages and display additional information given an error code.
   *
   * @remarks
   * This variable is used to provide a URL to a page that can be used to look up error messages given an error code. This is used to provide a more user-friendly error message to the user.
   *
   * @title Error Details URL
   * @category neutral
   */
  ERROR_URL: string;
  /**
   * The default timezone for the application.
   *
   * @defaultValue "America/New_York"
   * @category neutral
   */
  DEFAULT_TIMEZONE: string;
  /**
   * The default locale to be used in the application.
   *
   * @defaultValue "en_US"
   * @category neutral
   */
  DEFAULT_LOCALE: string;
  /**
   * The default lowest log level to accept. If `null`, the logger will reject all records. This value only applies if `lowestLogLevel` is not provided to the `logs` configuration.
   *
   * @defaultValue "info"
   *
   * @category neutral
   */
  LOG_LEVEL?: LogLevel | null;
  /**
   * An indicator that specifies the current runtime is a continuous integration environment.
   *
   * @title Continuous Integration
   * @alias CONTINUOUS_INTEGRATION
   * @category neutral
   */
  CI: boolean;
  /**
   * The unique identifier for the current run. This value is set by certain CI/CD systems.
   *
   * @readonly
   * @category node
   */
  readonly RUN_ID?: string;
  /**
   * The agola git reference. This value is set by certain CI/CD systems.
   *
   * @readonly
   * @category node
   */
  readonly AGOLA_GIT_REF?: string;
  /**
   * The appcircle build ID. This value is set by certain CI/CD systems.
   *
   * @readonly
   * @category node
   */
  readonly AC_APPCIRCLE?: string;
  /**
   * The appveyor build ID. This value is set by certain CI/CD systems.
   *
   * @readonly
   * @category node
   */
  readonly APPVEYOR?: string;
  /**
   * The codebuild build ID. This value is set by certain CI/CD systems.
   *
   * @readonly
   * @category node
   */
  readonly CODEBUILD?: string;
  /**
   * The task force build ID. This value is set by certain CI/CD systems.
   *
   * @readonly
   * @category node
   */
  readonly TF_BUILD?: string;
  /**
   * The bamboo plan key. This value is set by certain CI/CD systems.
   *
   * @readonly
   * @category node
   */
  readonly bamboo_planKey?: string;
  /**
   * The bitbucket commit. This value is set by certain CI/CD systems.
   *
   * @readonly
   * @category node
   */
  readonly BITBUCKET_COMMIT?: string;
  /**
   * The bitrise build ID. This value is set by certain CI/CD systems.
   *
   * @readonly
   * @category node
   */
  readonly BITRISE_IO?: string;
  /**
   * The buddy workspace ID. This value is set by certain CI/CD systems.
   *
   * @readonly
   * @category node
   */
  readonly BUDDY_WORKSPACE_ID?: string;
  /**
   * The buildkite build ID. This value is set by certain CI/CD systems.
   *
   * @readonly
   * @category node
   */
  readonly BUILDKITE?: string;
  /**
   * The circleci build ID. This value is set by certain CI/CD systems.
   *
   * @readonly
   * @category node
   */
  readonly CIRCLECI?: string;
  /**
   * The cirrus-ci build ID. This value is set by certain CI/CD systems.
   *
   * @readonly
   * @category node
   */
  readonly CIRRUS_CI?: string;
  /**
   * The cf build ID. This value is set by certain CI/CD systems.
   *
   * @readonly
   * @category node
   */
  readonly CF_BUILD_ID?: string;
  /**
   * The cm build ID. This value is set by certain CI/CD systems.
   *
   * @readonly
   * @category node
   */
  readonly CM_BUILD_ID?: string;
  /**
   * The ci name. This value is set by certain CI/CD systems.
   *
   * @readonly
   * @category node
   */
  readonly CI_NAME?: string;
  /**
   * The drone build ID. This value is set by certain CI/CD systems.
   *
   * @readonly
   * @category node
   */
  readonly DRONE?: string;
  /**
   * The dsari build ID. This value is set by certain CI/CD systems.
   *
   * @readonly
   * @category node
   */
  readonly DSARI?: string;
  /**
   * The earthly build ID. This value is set by certain CI/CD systems.
   *
   * @readonly
   * @category node
   */
  readonly EARTHLY_CI?: string;
  /**
   * The eas build ID. This value is set by certain CI/CD systems.
   *
   * @readonly
   * @category node
   */
  readonly EAS_BUILD?: string;
  /**
   * The gerrit project. This value is set by certain CI/CD systems.
   *
   * @readonly
   * @category node
   */
  readonly GERRIT_PROJECT?: string;
  /**
   * The gitea actions build ID. This value is set by certain CI/CD systems.
   *
   * @readonly
   * @category node
   */
  readonly GITEA_ACTIONS?: string;
  /**
   * The github actions build ID. This value is set by certain CI/CD systems.
   *
   * @readonly
   * @category node
   */
  readonly GITHUB_ACTIONS?: string;
  /**
   * The gitlab ci build ID. This value is set by certain CI/CD systems.
   *
   * @readonly
   * @category node
   */
  readonly GITLAB_CI?: string;
  /**
   * The go cd build ID. This value is set by certain CI/CD systems.
   *
   * @readonly
   * @category node
   */
  readonly GOCD?: string;
  /**
   * The builder output build ID. This value is set by certain CI/CD systems.
   *
   * @readonly
   * @category node
   */
  readonly BUILDER_OUTPUT?: string;
  /**
   * The harness build ID. This value is set by certain CI/CD systems.
   *
   * @readonly
   * @category node
   */
  readonly HARNESS_BUILD_ID?: string;
  /**
   * The jenkins url. This value is set by certain CI/CD systems.
   *
   * @readonly
   * @category node
   */
  readonly JENKINS_URL?: string;
  /**
   * The layerci build ID. This value is set by certain CI/CD systems.
   *
   * @readonly
   * @category node
   */
  readonly LAYERCI?: string;
  /**
   * The magnum build ID. This value is set by certain CI/CD systems.
   *
   * @readonly
   * @category node
   */
  readonly MAGNUM?: string;
  /**
   * The netlify build ID. This value is set by certain CI/CD systems.
   *
   * @readonly
   * @category node
   */
  readonly NETLIFY?: string;
  /**
   * The nevercode build ID. This value is set by certain CI/CD systems.
   *
   * @readonly
   * @category node
   */
  readonly NEVERCODE?: string;
  /**
   * The prow job ID. This value is set by certain CI/CD systems.
   *
   * @readonly
   * @category node
   */
  readonly PROW_JOB_ID?: string;
  /**
   * The release build ID. This value is set by certain CI/CD systems.
   *
   * @readonly
   * @category node
   */
  readonly RELEASE_BUILD_ID?: string;
  /**
   * The render build ID. This value is set by certain CI/CD systems.
   *
   * @readonly
   * @category node
   */
  readonly RENDER?: string;
  /**
   * The sailci build ID. This value is set by certain CI/CD systems.
   *
   * @readonly
   * @category node
   */
  readonly SAILCI?: string;
  /**
   * The hudson build ID. This value is set by certain CI/CD systems.
   *
   * @readonly
   * @category node
   */
  readonly HUDSON?: string;
  /**
   * The screwdriver build ID. This value is set by certain CI/CD systems.
   *
   * @readonly
   * @category node
   */
  readonly SCREWDRIVER?: string;
  /**
   * The semaphore build ID. This value is set by certain CI/CD systems.
   *
   * @readonly
   * @category node
   */
  readonly SEMAPHORE?: string;
  /**
   * The sourcehut build ID. This value is set by certain CI/CD systems.
   *
   * @readonly
   * @category node
   */
  readonly SOURCEHUT?: string;
  /**
   * The spaceship build ID. This value is set by certain CI/CD systems.
   *
   * @readonly
   * @category node
   */
  readonly SPACESHIP_CI?: string;
  /**
   * The strider build ID. This value is set by certain CI/CD systems.
   *
   * @readonly
   * @category node
   */
  readonly STRIDER?: string;
  /**
   * The task ID. This value is set by certain CI/CD systems.
   *
   * @readonly
   * @category node
   */
  readonly TASK_ID?: string;
  /**
   * The teamcity version. This value is set by certain CI/CD systems.
   *
   * @readonly
   * @category node
   */
  readonly TEAMCITY_VERSION?: string;
  /**
   * The travis build ID. This value is set by certain CI/CD systems.
   *
   * @readonly
   * @category node
   */
  readonly TRAVIS?: string;
  /**
   * The vela build ID. This value is set by certain CI/CD systems.
   *
   * @readonly
   * @category node
   */
  readonly VELA?: string;
  /**
   * The now builder build ID. This value is set by certain CI/CD systems.
   *
   * @readonly
   * @category node
   */
  readonly NOW_BUILDER?: string;
  /**
   * The appcenter build ID. This value is set by certain CI/CD systems.
   *
   * @readonly
   * @category node
   */
  readonly APPCENTER_BUILD_ID?: string;
  /**
   * The xcode project build ID. This value is set by certain CI/CD systems.
   *
   * @readonly
   * @category node
   */
  readonly CI_XCODE_PROJECT?: string;
  /**
   * The xcode server build ID. This value is set by certain CI/CD systems.
   *
   * @readonly
   * @category node
   */
  readonly XCS?: string;
  /**
   * The Storm Stack application's runtime data directory.
   *
   * @remarks
   * This variable is used to override the base path of the system's local application data directory. This variable is used to set the \`$storm.paths.data\` property.
   *
   * @title Data Directory
   * @category node
   */
  DATA_DIR?: string;
  /**
   * The Storm Stack application's configuration data directory.
   *
   * @remarks
   * This variable is used to override the base path of the system's local application configuration directory. This variable is used to set the \`$storm.paths.config\` property.
   *
   * @title Configuration Directory
   * @category node
   */
  CONFIG_DIR?: string;
  /**
   * The Storm Stack application's cached data directory.
   *
   * @remarks
   * This variable is used to override the base path of the system's local cache data directory. This variable is used to set the \`$storm.paths.cache\` property.
   *
   * @title Cache Directory
   * @category node
   */
  CACHE_DIR?: string;
  /**
   * The Storm Stack application's logging directory.
   *
   * @remarks
   * This variable is used to override the base path of the system's local application log directory. This variable is used to set the \`$storm.paths.log\` property.
   *
   * @title Log Directory
   * @category node
   */
  LOG_DIR?: string;
  /**
   * The Storm Stack application's temporary data directory.
   *
   * @remarks
   * This variable is used to override the base path of the system's local temporary data directory. This variable is used to set the \`$storm.paths.temp\` property.
   *
   * @title Temporary Directory
   * @category node
   */
  TEMP_DIR?: string;
  /**
   * A variable that specifies the current user's local application data directory on Windows.
   *
   * @see https://www.advancedinstaller.com/appdata-localappdata-programdata.html
   *
   * @remarks
   * This variable is used to specify a path to application data that is specific to the current user. This variable can be used to set the \`$storm.paths.data\`, \`$storm.paths.cache\`, and \`$storm.paths.log\` properties.
   *
   * @readonly
   * @category node
   */
  readonly LOCALAPPDATA?: string;
  /**
   * A variable that specifies the application data directory on Windows.
   *
   * @see https://www.advancedinstaller.com/appdata-localappdata-programdata.html
   *
   * @remarks
   * This variable is used to specify a path to application data that is specific to the current user. This variable can be used to set the \`$storm.paths.config\` property.
   *
   * @readonly
   * @category node
   */
  readonly APPDATA?: string;
  /**
   * A variable that specifies the data path in the home directory on Linux systems using the XDG base directory specification.
   *
   * @see https://gist.github.com/roalcantara/107ba66dfa3b9d023ac9329e639bc58c
   *
   * @remarks
   * This variable is used to specify a path to application data that is specific to the current user. This variable can be used to set the \`$storm.paths.data\` property.
   *
   * @readonly
   * @category node
   */
  readonly XDG_DATA_HOME?: string;
  /**
   * A variable that specifies the configuration path in the home directory on Linux systems using the XDG base directory specification.
   *
   * @see https://gist.github.com/roalcantara/107ba66dfa3b9d023ac9329e639bc58c
   *
   * @remarks
   * This variable is used to specify a path to configuration data that is specific to the current user. This variable can be used to set the \`$storm.paths.config\` property.
   *
   * @readonly
   * @category node
   */
  readonly XDG_CONFIG_HOME?: string;
  /**
   * A variable that specifies the cache path in the home directory on Linux systems using the XDG base directory specification.
   *
   * @see https://gist.github.com/roalcantara/107ba66dfa3b9d023ac9329e639bc58c
   *
   * @remarks
   * This variable is used to specify a path to cache data that is specific to the current user. This variable can be used to set the \`$storm.paths.cache\` property.
   *
   * @readonly
   * @category node
   */
  readonly XDG_CACHE_HOME?: string;
  /**
   * A variable that specifies the state directory on Linux systems using the XDG base directory specification.
   *
   * @see https://gist.github.com/roalcantara/107ba66dfa3b9d023ac9329e639bc58c
   *
   * @remarks
   * This variable is used to specify a path to application state data that is specific to the current user. This variable can be used to set the \`$storm.paths.state\` property.
   *
   * @readonly
   * @category node
   */
  readonly XDG_STATE_HOME?: string;
  /**
   * A variable that specifies the runtime directory on Linux systems using the XDG base directory specification.
   *
   * @see https://gist.github.com/roalcantara/107ba66dfa3b9d023ac9329e639bc58c
   *
   * @remarks
   * This variable is used to specify a path to runtime data that is specific to the current user. This variable can be used to set the \`$storm.paths.temp\` property.
   *
   * @readonly
   * @category node
   */
  readonly XDG_RUNTIME_DIR?: string;
  /**
   * A variable that specifies the [Devenv](https://devenv.sh/) runtime directory.
   *
   * @see https://devenv.sh/files-and-variables/#devenv_dotfile
   * @see https://nixos.org/
   *
   * @remarks
   * This variable is used to specify a path to application data that is specific to the current [Nix](https://nixos.org/) environment. This variable can be used to set the \`$storm.paths.temp\` property.
   *
   * @category node
   */
  DEVENV_RUNTIME?: string;
}

/**
 * The global Storm Stack application context. This object contains information related to the current process's execution.
 *
 * @remarks
 * The Storm Stack application context object is injected into the global scope of the application. It can be accessed using `$storm` or `useStorm()` in the application code.
 */
interface StormContextInterface {
  /**
   * The context metadata.
   *
   * @remarks
   * This metadata can be used to store information about the current request, user, or any other relevant data. It is mutable and can be changed during the request lifecycle.
   */
  meta: Record<string, any>;
  /**
   * Environment/runtime specific application data.
   */
  env: StormEnv;
  /**
   * The root application logger for the Storm Stack application.
   */
  log: StormLogInterface;
  /**
   * The {@link StormStorageInterface} instance used by the Storm Stack application.
   */
  storage: StormStorageInterface;
  /**
   * The configuration parameters for the Storm application.
   */
  config: StormConfigInterface;
  [key: string]: any;
}

/**
 * Interface for date utility functions used in the Storm Stack.
 *
 * @typeParam TDate - The date object type used by the underlying date library.
 * @typeParam TLocale - The locale type used by the underlying date library.
 *
 * @remarks
 * This interface defines a contract for date manipulation and formatting utilities, abstracting over different date libraries (such as [Moment.js](https://momentjs.com/), [Day.js](https://day.js.org/), etc.). It provides methods for creating, parsing, comparing, and formatting dates, as well as manipulating date components and handling localization.
 */
interface StormDateInterface<TDate, TLocale> {
  /**
   * The set of date formats supported by the utility.
   */
  formats: DateFormats<any>;
  /**
   * The current locale object, if available.
   */
  locale?: TLocale;
  /**
   * The [Moment.js](https://momentjs.com/) instance, if using [Moment.js](https://momentjs.com/) as the underlying library.
   */
  moment?: any;
  /**
   * The [Day.js](https://day.js.org/) instance, if using [Day.js](https://day.js.org/) as the underlying library.
   */
  dayjs?: any;
  /**
   * Name of the currently used date library.
   */
  type: string;
  /**
   * Create a new `Date` object with the underlying library.
   *
   * @remarks
   * This method supports some of the standard input sources like ISO strings so you can pass the string directly as `date("2024-01-10T14:30:00Z")`, and javascript `Date` objects `date(new Date())`. If `null` is passed `null` will be returned.
   *
   * @param value - The value to create a date object from. Can be a string, number, or JavaScript Date object.
   * @returns A date object of type `TDate` or `null` if the input is `null`.
   */
  createDate: <
    TArg = undefined,
    TResultingDate = TArg extends null
      ? null
      : TArg extends undefined
        ? TDate
        : TDate | null
  >(
    value?: TArg
  ) => TResultingDate;
  /**
   * Creates a date object from a JavaScript Date object.
   *
   * @remarks
   * This method is used to create a date object from a JavaScript Date object. It is useful for converting JavaScript Date objects to the date library's date objects.
   */
  toJsDate: (value: TDate) => Date;
  /**
   * Creates a date object from an ISO string.
   *
   * @remarks
   * This method is used to create a date object from an ISO string. It is useful for parsing dates from strings.
   */
  parseISO: (isString: string) => TDate;
  /**
   * Converts a date object to an ISO string.
   *
   * @remarks
   * This method is used to convert a date object to an ISO string. It is useful for serializing dates to strings.
   */
  toISO: (value: TDate) => string;
  /**
   * Creates a date object from a string using the specified format.
   *
   * @remarks
   * This method is used to create a date object from a string using the specified format. It is useful for parsing dates from strings with custom formats.
   */
  parse: (value: string, format: string) => TDate | null;
  /**
   * Returns the current locale code.
   *
   * @returns The current locale code.
   */
  getCurrentLocaleCode: () => string;
  /**
   * Returns an indicator if the current locale is using a 12-hour cycle.
   *
   * @returns `true` if the current locale is using a 12-hour cycle, otherwise `false`.
   */
  is12HourCycleInCurrentLocale: () => boolean;
  /**
   * Returns user readable format (taking into account localized format tokens), useful to render helper text for input (e.g. placeholder). If helper can not be created and for [Luxon](https://moment.github.io/luxon/#/) always returns empty string.
   *
   * @param format - The format string to use.
   * @returns The user readable format string.
   */
  getFormatHelperText: (format: string) => string;
  /**
   * Checks if the value is null.
   *
   * @param value - The value to check.
   * @returns `true` if the value is null, otherwise `false`.
   */
  isNull: (value: TDate | null) => boolean;
  /**
   * Checks if the value is valid.
   *
   * @param value - The value to check.
   * @returns `true` if the value is valid, otherwise `false`.
   */
  isValid: (value: any) => boolean;
  /**
   * Returns the difference between two dates.
   *
   * @param value - The first date to compare.
   * @param comparing - The second date to compare.
   * @param unit - The unit of time to use for the comparison.
   * @returns The difference between the two dates in the specified unit.
   */
  getDiff: (value: TDate, comparing: TDate | string, unit?: TimeUnit) => number;
  /**
   * Checks if two values are equal.
   *
   * @param value - The first value to compare.
   * @param comparing - The second value to compare.
   * @returns `true` if the two values are equal, otherwise `false`.
   */
  isEqual: (value: any, comparing: any) => boolean;
  /**
   * Checks if two dates are the same day.
   *
   * @param value - The first date to compare.
   * @param comparing - The second date to compare.
   * @returns `true` if the two dates are the same day, otherwise `false`.
   */
  isSameDay: (value: TDate, comparing: TDate) => boolean;
  /**
   * Checks if two dates are the same month.
   *
   * @param value - The first date to compare.
   * @param comparing - The second date to compare.
   * @returns `true` if the two dates are the same month, otherwise `false`.
   */
  isSameMonth: (value: TDate, comparing: TDate) => boolean;
  /**
   * Checks if two dates are the same year.
   *
   * @param value - The first date to compare.
   * @param comparing - The second date to compare.
   * @returns `true` if the two dates are the same year, otherwise `false`.
   */
  isSameYear: (value: TDate, comparing: TDate) => boolean;
  /**
   * Checks if two dates are the same hour.
   *
   * @param value - The first date to compare.
   * @param comparing - The second date to compare.
   * @returns `true` if the two dates are the same hour, otherwise `false`.
   */
  isSameHour: (value: TDate, comparing: TDate) => boolean;
  /**
   * Checks if two dates are after each other.
   *
   * @param value - The first date to compare.
   * @param comparing - The second date to compare.
   * @returns `true` if the first date is after the second date, otherwise `false`.
   */
  isAfter: (value: TDate, comparing: TDate) => boolean;
  /**
   * Checks if two dates are after each other on the same day.
   *
   * @param value - The first date to compare.
   * @param comparing - The second date to compare.
   * @returns `true` if the first date is after the second date on the same day, otherwise `false`.
   */
  isAfterDay: (value: TDate, comparing: TDate) => boolean;
  /**
   * Checks if two dates are after each other on the same month.
   *
   * @param value - The first date to compare.
   * @param comparing - The second date to compare.
   * @returns `true` if the first date is after the second date on the same month, otherwise `false`.
   */
  isAfterMonth: (value: TDate, comparing: TDate) => boolean;
  /**
   * Checks if two dates are after each other on the same year.
   *
   * @param value - The first date to compare.
   * @param comparing - The second date to compare.
   * @returns `true` if the first date is after the second date on the same year, otherwise `false`.
   */
  isAfterYear: (value: TDate, comparing: TDate) => boolean;
  /**
   * Checks if two dates are before each other.
   *
   * @param value - The first date to compare.
   * @param comparing - The second date to compare.
   * @returns `true` if the first date is before the second date, otherwise `false`.
   */
  isBefore: (value: TDate, comparing: TDate) => boolean;
  /**
   * Checks if two dates are before each other on the same day.
   *
   * @param value - The first date to compare.
   * @param comparing - The second date to compare.
   * @returns `true` if the first date is before the second date on the same day, otherwise `false`.
   */
  isBeforeDay: (value: TDate, comparing: TDate) => boolean;
  /**
   * Checks if two dates are before each other on the same month.
   *
   * @param value - The first date to compare.
   * @param comparing - The second date to compare.
   * @returns `true` if the first date is before the second date on the same month, otherwise `false`.
   */
  isBeforeMonth: (value: TDate, comparing: TDate) => boolean;
  /**
   * Checks if two dates are before each other on the same year.
   *
   * @param value - The first date to compare.
   * @param comparing - The second date to compare.
   * @returns `true` if the first date is before the second date on the same year, otherwise `false`.
   */
  isBeforeYear: (value: TDate, comparing: TDate) => boolean;
  /**
   * Checks if a date is within a specific range.
   *
   * @param value - The date to check.
   * @param range - The range to check against.
   * @returns `true` if the date is within the range, otherwise `false`.
   */
  isWithinRange: (value: TDate, range: [TDate, TDate]) => boolean;
  /**
   * Gets the start of the year for a given date.
   *
   * @param value - The date to get the start of the year for.
   * @returns The start of the year for the given date.
   */
  startOfYear: (value: TDate) => TDate;
  /**
   * Gets the end of the year for a given date.
   *
   * @param value - The date to get the end of the year for.
   * @returns The end of the year for the given date.
   */
  endOfYear: (value: TDate) => TDate;
  /**
   * Gets the start of the month for a given date.
   *
   * @param value - The date to get the start of the month for.
   * @returns The start of the month for the given date.
   */
  startOfMonth: (value: TDate) => TDate;
  /**
   * Gets the end of the month for a given date.
   *
   * @param value - The date to get the end of the month for.
   * @returns The end of the month for the given date.
   */
  endOfMonth: (value: TDate) => TDate;
  /**
   * Gets the start of the week for a given date.
   *
   * @param value - The date to get the start of the week for.
   * @returns The start of the week for the given date.
   */
  startOfWeek: (value: TDate) => TDate;
  /**
   * Gets the end of the week for a given date.
   *
   * @param value - The date to get the end of the week for.
   * @returns The end of the week for the given date.
   */
  endOfWeek: (value: TDate) => TDate;
  /**
   * Adds a specified number of seconds to a date.
   *
   * @param value - The date to add seconds to.
   * @param count - The number of seconds to add.
   * @returns The new date with the seconds added.
   */
  addSeconds: (value: TDate, count: number) => TDate;
  /**
   * Adds a specified number of minutes to a date.
   *
   * @param value - The date to add minutes to.
   * @param count - The number of minutes to add.
   * @returns The new date with the minutes added.
   */
  addMinutes: (value: TDate, count: number) => TDate;
  /**
   * Adds a specified number of hours to a date.
   *
   * @param value - The date to add hours to.
   * @param count - The number of hours to add.
   * @returns The new date with the hours added.
   */
  addHours: (value: TDate, count: number) => TDate;
  /**
   * Adds a specified number of days to a date.
   *
   * @param value - The date to add days to.
   * @param count - The number of days to add.
   * @returns The new date with the days added.
   */
  addDays: (value: TDate, count: number) => TDate;
  /**
   * Adds a specified number of weeks to a date.
   *
   * @param value - The date to add weeks to.
   * @param count - The number of weeks to add.
   * @returns The new date with the weeks added.
   */
  addWeeks: (value: TDate, count: number) => TDate;
  /**
   * Adds a specified number of months to a date.
   *
   * @param value - The date to add months to.
   * @param count - The number of months to add.
   * @returns The new date with the months added.
   */
  addMonths: (value: TDate, count: number) => TDate;
  /**
   * Adds a specified number of years to a date.
   *
   * @param value - The date to add years to.
   * @param count - The number of years to add.
   * @returns The new date with the years added.
   */
  addYears: (value: TDate, count: number) => TDate;
  /**
   * Gets the start of the day for a given date.
   *
   * @param value - The date to get the start of the day for.
   * @returns The start of the day for the given date.
   */
  startOfDay: (value: TDate) => TDate;
  /**
   * Gets the end of the day for a given date.
   *
   * @param value - The date to get the end of the day for.
   * @returns The end of the day for the given date.
   */
  endOfDay: (value: TDate) => TDate;
  /**
   * Formats a date using a predefined format key.
   *
   * @param value - The date to format.
   * @param formatKey - The key of the format to use.
   * @returns The formatted date string.
   */
  format: (value: TDate, formatKey: keyof DateFormats) => string;
  /**
   * Formats a date using a custom format string.
   *
   * @param value - The date to format.
   * @param formatString - The format string to use.
   * @returns The formatted date string.
   */
  formatByString: (value: TDate, formatString: string) => string;
  /**
   * Formats a number as a string, possibly applying localization.
   *
   * @param numberToFormat - The number string to format.
   * @returns The formatted number string.
   */
  formatNumber: (numberToFormat: string) => string;
  /**
   * Gets the hours component of a date.
   *
   * @param value - The date to extract hours from.
   * @returns The hours component.
   */
  getHours: (value: TDate) => number;
  /**
   * Sets the hours component of a date.
   *
   * @param value - The date to set hours on.
   * @param count - The hours value to set.
   * @returns The new date with the hours set.
   */
  setHours: (value: TDate, count: number) => TDate;
  /**
   * Gets the minutes component of a date.
   *
   * @param value - The date to extract minutes from.
   * @returns The minutes component.
   */
  getMinutes: (value: TDate) => number;
  /**
   * Sets the minutes component of a date.
   *
   * @param value - The date to set minutes on.
   * @param count - The minutes value to set.
   * @returns The new date with the minutes set.
   */
  setMinutes: (value: TDate, count: number) => TDate;
  /**
   * Gets the seconds component of a date.
   *
   * @param value - The date to extract seconds from.
   * @returns The seconds component.
   */
  getSeconds: (value: TDate) => number;
  /**
   * Sets the seconds component of a date.
   *
   * @param value - The date to set seconds on.
   * @param count - The seconds value to set.
   * @returns The new date with the seconds set.
   */
  setSeconds: (value: TDate, count: number) => TDate;
  /**
   * Gets the day of the month from a date.
   *
   * @param value - The date to extract the day from.
   * @returns The day of the month.
   */
  getDate: (value: TDate) => number;
  /**
   * Sets the day of the month on a date.
   *
   * @param value - The date to set the day on.
   * @param count - The day of the month to set.
   * @returns The new date with the day set.
   */
  setDate: (value: TDate, count: number) => TDate;
  /**
   * Gets the week number for a given date.
   *
   * @param value - The date to get the week number for.
   * @returns The week number.
   */
  getWeek: (value: TDate) => number;
  /**
   * Gets the month component of a date (0-based).
   *
   * @param value - The date to extract the month from.
   * @returns The month component (0 = January, 11 = December).
   */
  getMonth: (value: TDate) => number;
  /**
   * Gets the number of days in the month for a given date.
   *
   * @param value - The date to get the number of days in the month for.
   * @returns The number of days in the month.
   */
  getDaysInMonth: (value: TDate) => number;
  /**
   * Sets the month component of a date (0-based).
   *
   * @param value - The date to set the month on.
   * @param count - The month to set (0 = January, 11 = December).
   * @returns The new date with the month set.
   */
  setMonth: (value: TDate, count: number) => TDate;
  /**
   * Gets the date representing the next month.
   *
   * @param value - The date to get the next month for.
   * @returns The date in the next month.
   */
  getNextMonth: (value: TDate) => TDate;
  /**
   * Gets the date representing the previous month.
   *
   * @param value - The date to get the previous month for.
   * @returns The date in the previous month.
   */
  getPreviousMonth: (value: TDate) => TDate;
  /**
   * Gets an array of dates representing each month in the year of the given date.
   *
   * @param value - The date to get the month array for.
   * @returns An array of dates, one for each month.
   */
  getMonthArray: (value: TDate) => TDate[];
  /**
   * Gets the year component of a date.
   *
   * @param value - The date to extract the year from.
   * @returns The year component.
   */
  getYear: (value: TDate) => number;
  /**
   * Sets the year component of a date.
   *
   * @param value - The date to set the year on.
   * @param count - The year to set.
   * @returns The new date with the year set.
   */
  setYear: (value: TDate, count: number) => TDate;
  /**
   * Merges the date part of one date with the time part of another date.
   *
   * @param date - The date to take the date part from.
   * @param time - The date to take the time part from.
   * @returns The merged date and time.
   */
  mergeDateAndTime: (date: TDate, time: TDate) => TDate;
  /**
   * Gets the names of the weekdays in the current locale.
   *
   * @returns An array of weekday names.
   */
  getWeekdays: () => string[];
  /**
   * Gets a 2D array representing the weeks in the month of the given date.
   *
   * @param date - The date to get the week array for.
   * @returns A 2D array of dates, grouped by week.
   */
  getWeekArray: (date: TDate) => TDate[][];
  /**
   * Gets an array of dates representing the range of years between two dates.
   *
   * @param start - The start date of the range.
   * @param end - The end date of the range.
   * @returns An array of dates, one for each year in the range.
   */
  getYearRange: (start: TDate, end: TDate) => TDate[];
  /**
   * Gets the localized string for "am" or "pm".
   *
   * @param meridiem - Either "am" or "pm".
   * @returns The localized meridiem string.
   */
  getMeridiemText: (meridiem: "am" | "pm") => string;
}

interface StormEnv {
  /**
   * The name of the Storm application.
   */
  readonly name: string;
  /**
   * The version of the Storm application.
   */
  readonly version: string;
  /**
   * The default locale for the application.
   */
  readonly defaultLocale: string;
  /**
   * The default timezone for the application.
   */
  readonly defaultTimezone: string;
  /**
   * The current runtime mode to determine the behavior of the application in different environments.
   *
   * @remarks
   * The `mode` is typically set based on the deployment environment and can affect configuration, logging, and feature flags. Valid values for the `mode` are:
   * - `"development"`: Used for local development and testing.
   * - `"staging"`: Used for staging environments that closely mirror production.
   * - `"production"`: Used for live production environments.
   */
  readonly mode: "development" | "staging" | "production";
  /**
   * A boolean indicator specifying if running in production mode.
   */
  readonly isProduction: boolean;
  /**
   * A boolean indicator specifying if running in staging mode.
   */
  readonly isStaging: boolean;
  /**
   * A boolean indicator specifying if running in development mode.
   */
  readonly isDevelopment: boolean;
  /**
   * A boolean indicator specifying if running in debug mode (typically development with debug enabled).
   */
  readonly isDebug: boolean;
  /**
   * A boolean indicator specifying if running in test mode or under test conditions.
   */
  readonly isTest: boolean;
}

/**
 * The Storm Error interface.
 */
interface StormErrorInterface extends Error {
  /**
   * The error code
   */
  code: number;
  /**
   * The error message parameters
   */
  params: string[];
  /**
   * The type of error that was thrown.
   */
  type: ErrorType;
  /**
   * A url to display the error message
   */
  url: string;
  /**
   * Additional data to be passed with the error
   */
  data?: any;
  /**
   * The underlying cause of the error, if any. This is typically another error object that caused this error to be thrown.
   */
  cause: StormErrorInterface | undefined;
  /**
   * The error stack
   *
   * @remarks
   * This is overridden in `StormError` to be a parsed stacktrace
   */
  stack: string;
  /**
   * The parsed stacktrace
   */
  stacktrace: ParsedStacktrace[];
  /**
   * The original stacktrace
   */
  originalStack: string;
  /**
   * Returns a formatted error string that can be displayed to the user.
   */
  toDisplay: () => string;
  /**
   * Internal function to inherit the {@link Error} prototype.
   *
   * @internal
   */
  __proto__: Error;
}

/**
 * Interface representing the Storm error options.
 */
interface StormErrorOptions {
  /**
   * The error name.
   */
  name?: string;
  /**
   * The error code
   */
  code: number;
  /**
   * The error message parameters.
   */
  params?: string[];
  /**
   * The error cause.
   */
  cause?: unknown;
  /**
   * The error stack.
   */
  stack?: string;
  /**
   * The type of error.
   *
   * @defaultValue "exception"
   */
  type?: ErrorType;
  /**
   * Additional data to be included with the error.
   */
  data?: any;
}

/**
 * A logger interface. It provides methods to log messages at different severity levels.
 *
 * @remarks
 * The inspiration and much of the original implementation for this logger was taken from the [LogTape](https://logtape.org/) project. Major thanks to that project.
 *
 * ```typescript
 * $storm.log.debug(`A debug message with ${value}.`);
 * $storm.log.info(`An info message with ${value}.`);
 * $storm.log.warn(`A warning message with ${value}.`);
 * $storm.log.error(`An error message with ${value}.`);
 * $storm.log.fatal(`A fatal error message with ${value}.`);
 * ```
 */
interface StormLogInterface {
  /**
   * Get a logger with contextual properties. This is useful for log multiple messages with the shared set of properties.
   *
   * ```typescript
   * const ctx = $storm.log.with({ foo: 123, bar: "abc" });
   * ctx.info("A message with {foo} and {bar}.");
   * ctx.warn("Another message with {foo}, {bar}, and {baz}.", { baz: true });
   * ```
   *
   * The above code is equivalent to:
   *
   * ```typescript
   * $storm.log.info("A message with {foo} and {bar}.", { foo: 123, bar: "abc" });
   * $storm.log.warn(
   *   "Another message with {foo}, {bar}, and {baz}.",
   *   { foo: 123, bar: "abc", baz: true },
   * );
   * ```
   *
   * @param properties - The properties to add to the logger.
   * @returns A logger with the specified properties.
   */
  with: (properties: Record<string, unknown>) => StormLogInterface;
  /**
   * Log a debug message. Use this as a template string prefix.
   *
   * ```typescript
   * $storm.log.debug(`A debug message with ${value}.`);
   * ```
   *
   * @param message - The message template strings array.
   * @param values - The message template values.
   */
  debug: ((
    message: TemplateStringsArray,
    ...values: readonly unknown[]
  ) => void) &
    ((
      message: string,
      properties?: Record<string, unknown> | (() => Record<string, unknown>)
    ) => void) &
    ((callback: LogCallback) => void);
  /**
   * Log an informational message. Use this as a template string prefix.
   *
   * ```typescript
   * $storm.log.info(`An info message with ${value}.`);
   * ```
   *
   * @param message - The message template strings array.
   * @param values - The message template values.
   */
  info: ((
    message: TemplateStringsArray,
    ...values: readonly unknown[]
  ) => void) &
    ((
      message: string,
      properties?: Record<string, unknown> | (() => Record<string, unknown>)
    ) => void) &
    ((callback: LogCallback) => void);
  /**
   * Log a warning message. Use this as a template string prefix.
   *
   * ```typescript
   * $storm.log.warn(`A warning message with ${value}.`);
   * ```
   *
   * @param message - The message template strings array.
   * @param values - The message template values.
   */
  warn: ((
    message: TemplateStringsArray,
    ...values: readonly unknown[]
  ) => void) &
    ((
      message: string,
      properties?: Record<string, unknown> | (() => Record<string, unknown>)
    ) => void) &
    ((callback: LogCallback) => void);
  /**
   * Log an error message. Use this as a template string prefix.
   *
   * ```typescript
   * $storm.log.error(`An error message with ${value}.`);
   * ```
   *
   * @param message - The message template strings array.
   * @param values - The message template values.
   */
  error: ((
    message: TemplateStringsArray | Error,
    ...values: readonly unknown[]
  ) => void) &
    ((
      message: string,
      properties?: Record<string, unknown> | (() => Record<string, unknown>)
    ) => void) &
    ((callback: LogCallback) => void);
  /**
   * Log a fatal error message. Use this as a template string prefix.
   *
   * ```typescript
   * $storm.log.fatal(`A fatal error message with ${value}.`);
   * ```
   *
   * @param message - The message template strings array.
   * @param values - The message template values.
   */
  fatal: ((
    message: TemplateStringsArray | Error,
    ...values: readonly unknown[]
  ) => void) &
    ((
      message: string,
      properties?: Record<string, unknown> | (() => Record<string, unknown>)
    ) => void) &
    ((callback: LogCallback) => void);
}

/**
 * The Storm Storage Interface extends the [Unstorage](https://unstorage.unjs.io/) Storage interface with additional functionality specific to the Storm Stack.
 *
 * @see https://unstorage.unjs.io/
 *
 * @remarks
 * This interface adds the ability to initialize the storage adapters and provides a consistent API for interacting with the storage layer.
 */
type StormStorageInterface = Storage_2 & AsyncDisposable;

type SuccessMessageDetails = MessageDetails<"success">;

/**
 * Represents the time unit types used in date manipulation.
 *
 * @remarks
 * This type is used to specify the unit of time when performing operations like adding or subtracting time from a date.
 */
type TimeUnit =
  | "years"
  | "quarters"
  | "months"
  | "weeks"
  | "days"
  | "hours"
  | "minutes"
  | "seconds"
  | "milliseconds";

type WarningMessageDetails = MessageDetails<"warning">;

declare module "storm:config" {
  /**
   * The Storm Stack configuration module provides an interface to define configuration parameters.
   *
   * @module storm:config
   */

  /**
   * Interface for Storm Config Base.
   *
   * @title Object
   */
  export interface StormConfigBase extends StormConfigInterface {
    /**
     * ARGV
     *
     * @title ARGV
     * @domain cli
     */
    ARGV?: Array<string>;
    /**
     * The inverse of the no-banner option.
     *
     * @title BANNER
     * @domain cli
     * @defaultValue true
     */
    BANNER?: boolean;
    /**
     * The Storm Stack application's cached data directory.
     *
     * @title Cache Directory
     */
    CACHE_DIR?: string;
    /**
     * An indicator that specifies the current runtime is a continuous integration environment.
     *
     * @title Continuous Integration
     * @alias CONTINUOUS_INTEGRATION
     * @defaultValue false
     */
    CI: boolean;
    /**
     * The configuration file to append the completion script to.
     *
     * @title CONFIG
     * @domain cli
     */
    CONFIG?: string | true;
    /**
     * The Storm Stack application's configuration data directory.
     *
     * @title Configuration Directory
     */
    CONFIG_DIR?: string;
    /**
     * An indicator that specifies the current runtime is a continuous integration environment.
     *
     * @title Continuous Integration
     * @alias CI
     * @defaultValue false
     */
    CONTINUOUS_INTEGRATION: boolean;
    /**
     * The Storm Stack application's runtime data directory.
     *
     * @title Data Directory
     */
    DATA_DIR?: string;
    /**
     * Indicates if the application is running in debug mode.
     *
     * @title DEBUG
     * @defaultValue false
     */
    DEBUG: boolean;
    /**
     * The default locale to be used in the application.
     *
     * @title DEFAULT LOCALE
     * @defaultValue en-US
     */
    DEFAULT_LOCALE: string;
    /**
     * The default timezone for the application.
     *
     * @title DEFAULT TIMEZONE
     * @defaultValue America/New_York
     */
    DEFAULT_TIMEZONE: string;
    /**
     * A variable that specifies the [Devenv](https://devenv.sh/) runtime directory.
     *
     * @title Devenv RUNTIME
     * @defaultValue /run/user/1001/devenv-a024b62
     */
    DEVENV_RUNTIME?: string;
    /**
     * The environment the application is running in. This value will be populated with the value of `MODE` if not provided.
     *
     * @title ENVIRONMENT
     * @alias ENVIRONMENT
     * @defaultValue cli
     */
    ENV: string;
    /**
     * The environment the application is running in. This value will be populated with the value of `MODE` if not provided.
     *
     * @title ENVIRONMENT
     * @alias ENV
     * @defaultValue cli
     */
    ENVIRONMENT: string;
    /**
     * A web page to lookup error messages and display additional information given an error code.
     *
     * @title Error Details URL
     * @defaultValue https://developer.stormsoftware.com/static/errors
     */
    ERROR_URL: string;
    /**
     * An indicator that specifies the current runtime is a force color environment.
     *
     * @title FORCE COLOR
     * @defaultValue true
     */
    FORCE_COLOR: boolean | number;
    /**
     * An indicator that specifies the current runtime should force hyperlinks in terminal output.
     *
     * @title FORCE HYPERLINK
     * @defaultValue false
     */
    FORCE_HYPERLINK: boolean | number;
    /**
     * Show help information.
     *
     * @title HELP
     * @domain cli
     * @defaultValue false
     */
    HELP?: boolean;
    /**
     * Indicates if error data should be included.
     *
     * @title INCLUDE ERROR DATA
     * @defaultValue false
     */
    INCLUDE_ERROR_DATA: boolean;
    /**
     * The inverse of the no-interactive option.
     *
     * @title INTERACTIVE
     * @domain cli
     * @defaultValue true
     */
    INTERACTIVE?: boolean;
    /**
     * The Storm Stack application's logging directory.
     *
     * @title Log Directory
     */
    LOG_DIR?: string;
    /**
     * The default lowest log level to accept. If `null`, the logger will reject all records. This value only applies if `lowestLogLevel` is not provided to the `logs` configuration.
     *
     * @title LOG LEVEL
     * @defaultValue info
     */
    LOG_LEVEL?: "debug" | "info" | "warning" | "error" | "fatal" | null;
    /**
     * An indicator that specifies the current runtime is a minimal environment.
     *
     * @title MINIMAL
     * @defaultValue false
     */
    MINIMAL: boolean;
    /**
     * The mode in which the application is running.
     *
     * @title MODE
     * @alias NODE_ENV
     * @defaultValue development
     */
    MODE: "development" | "staging" | "production";
    /**
     * The name of the library.
     *
     * @title NAME
     * @domain cli
     * @defaultValue storm-stack
     */
    NAME?: string;
    /**
     * Hide the banner displayed while running the CLI application (will be set to true if running in a CI pipeline).
     *
     * @title NO BANNER
     * @domain cli
     * @defaultValue false
     */
    NO_BANNER?: boolean;
    /**
     * An indicator that specifies the current runtime is a no color environment.
     *
     * @title NO COLOR
     * @defaultValue false
     */
    NO_COLOR: boolean;
    /**
     * Disable interactive mode (will be set to true if running in a CI pipeline).
     *
     * @title NO INTERACTIVE
     * @alias NO_INTERACTIVE
     * @domain cli
     * @defaultValue false
     */
    NO_INTERACT?: boolean;
    /**
     * Disable interactive mode (will be set to true if running in a CI pipeline).
     *
     * @title NO INTERACTIVE
     * @alias NO_INTERACT
     * @domain cli
     * @defaultValue false
     */
    NO_INTERACTIVE?: boolean;
    /**
     * The mode in which the application is running.
     *
     * @title MODE
     * @alias MODE
     * @defaultValue development
     */
    NODE_ENV: "development" | "staging" | "production";
    /**
     * The name of the organization that maintains the application.
     *
     * @title ORGANIZATION
     * @alias ORGANIZATION
     * @defaultValue storm-software
     */
    ORG: string;
    /**
     * The name of the organization that maintains the application.
     *
     * @title ORGANIZATION
     * @alias ORG
     * @defaultValue storm-software
     */
    ORGANIZATION: string;
    /**
    * The mode used for outputting results.
    - `memory`: Generated source code is stored in a virtual file system to reduce boilerplate.
    - `fs`: Outputs generated results to the local file system.
    *
    * @title OUTPUT MODE
    * @defaultValue memory
    */
    OUTPUT_MODE?: "memory" | "fs";
    /**
     * The name of the library.
     *
     * @title PACKAGE NAME
     * @domain cli
     */
    PACKAGE_NAME?: string;
    /**
     * The platform for which the application was built.
     *
     * @title PLATFORM
     * @defaultValue node
     */
    PLATFORM: "node" | "neutral" | "browser";
    /**
     * The root directory of the Storm Stack project.
     *
     * @title ROOT
     * @alias ROOT
     * @domain cli
     */
    PROJECT?: string;
    /**
     * The root directory of the Storm Stack project.
     *
     * @title ROOT
     * @alias PROJECT
     * @domain cli
     */
    ROOT?: string;
    /**
     * The path to write the completion script to.
     *
     * @title SCRIPT
     * @domain cli
     */
    SCRIPT?: string | true;
    /**
     * The DSN for Sentry
     *
     * @title SENTRY Data Source Name
     * @defaultValue https://422613d2ab720f78a55b0a668d900535@o4506752415301632.ingest.us.sentry.io/4509857043709952
     */
    SENTRY_DSN: string;
    /**
     * Indicates if error stack traces should be captured.
     *
     * @title STACKTRACE
     * @defaultValue false
     */
    STACKTRACE: boolean;
    /**
     * The Storm Stack application's temporary data directory.
     *
     * @title Temporary Directory
     */
    TEMP_DIR?: string;
    /**
     * An indicator that specifies the current runtime is a test environment.
     *
     * @title TEST
     * @defaultValue false
     */
    TEST: boolean;
    /**
     * Enable verbose output.
     *
     * @title VERBOSE
     * @domain cli
     * @defaultValue false
     */
    VERBOSE?: boolean;
    /**
     * Show the version of the application.
     *
     * @title VERSION
     * @domain cli
     * @defaultValue false
     */
    VERSION?: boolean;
    /**
     * The appcircle build ID. This value is set by certain CI/CD systems.
     *
     * @title AC APPCIRCLE
     * @readonly
     */
    readonly AC_APPCIRCLE?: string;
    /**
     * The name of the agent running the application. This variable is set by certain CI/CD systems.
     *
     * @title AGENT NAME
     * @readonly
     */
    readonly AGENT_NAME?: string;
    /**
     * The agola git reference. This value is set by certain CI/CD systems.
     *
     * @title AGOLA GIT REF
     * @readonly
     */
    readonly AGOLA_GIT_REF?: string;
    /**
     * The name of the application.
     *
     * @title APP NAME
     * @defaultValue storm-stack
     * @readonly
     */
    readonly APP_NAME: string;
    /**
     * The version of the application.
     *
     * @title APP VERSION
     * @defaultValue 0.24.1
     * @readonly
     */
    readonly APP_VERSION: string;
    /**
     * The appcenter build ID. This value is set by certain CI/CD systems.
     *
     * @title APPCENTER BUILD Identifier
     * @readonly
     */
    readonly APPCENTER_BUILD_ID?: string;
    /**
     * A variable that specifies the application data directory on Windows.
     *
     * @title APPDATA
     * @readonly
     */
    readonly APPDATA?: string;
    /**
     * The appveyor build ID. This value is set by certain CI/CD systems.
     *
     * @title APPVEYOR
     * @readonly
     */
    readonly APPVEYOR?: string;
    /**
     * The bamboo plan key. This value is set by certain CI/CD systems.
     *
     * @title Bamboo Plan Key
     * @readonly
     */
    readonly bamboo_planKey?: string;
    /**
     * The bitbucket commit. This value is set by certain CI/CD systems.
     *
     * @title BITBUCKET COMMIT
     * @readonly
     */
    readonly BITBUCKET_COMMIT?: string;
    /**
     * The bitrise build ID. This value is set by certain CI/CD systems.
     *
     * @title BITRISE Input/Output
     * @readonly
     */
    readonly BITRISE_IO?: string;
    /**
     * The buddy workspace ID. This value is set by certain CI/CD systems.
     *
     * @title BUDDY WORKSPACE Identifier
     * @readonly
     */
    readonly BUDDY_WORKSPACE_ID?: string;
    /**
     * A checksum hash created during the build.
     *
     * @title BUILD CHECKSUM
     * @defaultValue RBNvo1WzZ4oRRq0W9-hknpT7T8If536D
     * @readonly
     */
    readonly BUILD_CHECKSUM: string;
    /**
     * The unique identifier for the build.
     *
     * @title BUILD Identifier
     * @defaultValue ac98d77d-f70e-4d83-9bc0-c3d96c69bece
     * @readonly
     */
    readonly BUILD_ID: string;
    /**
     * The timestamp the build was ran at.
     *
     * @title BUILD TIMESTAMP
     * @defaultValue 2025-09-08T01:22:54.616Z
     * @readonly
     */
    readonly BUILD_TIMESTAMP: string;
    /**
     * The builder output build ID. This value is set by certain CI/CD systems.
     *
     * @title BUILDER OUTPUT
     * @readonly
     */
    readonly BUILDER_OUTPUT?: string;
    /**
     * The buildkite build ID. This value is set by certain CI/CD systems.
     *
     * @title BUILDKITE
     * @readonly
     */
    readonly BUILDKITE?: string;
    /**
     * The cf build ID. This value is set by certain CI/CD systems.
     *
     * @title CF BUILD Identifier
     * @readonly
     */
    readonly CF_BUILD_ID?: string;
    /**
     * The ci name. This value is set by certain CI/CD systems.
     *
     * @title Continuous Integration NAME
     * @readonly
     */
    readonly CI_NAME?: string;
    /**
     * The xcode project build ID. This value is set by certain CI/CD systems.
     *
     * @title Continuous Integration XCODE PROJECT
     * @readonly
     */
    readonly CI_XCODE_PROJECT?: string;
    /**
     * The circleci build ID. This value is set by certain CI/CD systems.
     *
     * @title CIRCLECI
     * @readonly
     */
    readonly CIRCLECI?: string;
    /**
     * The cirrus-ci build ID. This value is set by certain CI/CD systems.
     *
     * @title CIRRUS Continuous Integration
     * @readonly
     */
    readonly CIRRUS_CI?: string;
    /**
     * The cm build ID. This value is set by certain CI/CD systems.
     *
     * @title CM BUILD Identifier
     * @readonly
     */
    readonly CM_BUILD_ID?: string;
    /**
     * The codebuild build ID. This value is set by certain CI/CD systems.
     *
     * @title CODEBUILD
     * @readonly
     */
    readonly CODEBUILD?: string;
    /**
     * The color terminal type. This variable is set by certain terminal emulators.
     *
     * @title COLORTERM
     * @defaultValue truecolor
     * @readonly
     */
    readonly COLORTERM?: string;
    /**
     * The ConEmu task name. This variable is set by certain terminal emulators.
     *
     * @title Con Emu Task
     * @readonly
     */
    readonly ConEmuTask?: string;
    /**
     * The cursor trace ID. This variable is set by certain terminal emulators.
     *
     * @title CURSOR TRACE Identifier
     * @readonly
     */
    readonly CURSOR_TRACE_ID?: string;
    /**
     * The drone build ID. This value is set by certain CI/CD systems.
     *
     * @title DRONE
     * @readonly
     */
    readonly DRONE?: string;
    /**
     * The dsari build ID. This value is set by certain CI/CD systems.
     *
     * @title DSARI
     * @readonly
     */
    readonly DSARI?: string;
    /**
     * The earthly build ID. This value is set by certain CI/CD systems.
     *
     * @title EARTHLY Continuous Integration
     * @readonly
     */
    readonly EARTHLY_CI?: string;
    /**
     * The eas build ID. This value is set by certain CI/CD systems.
     *
     * @title EAS BUILD
     * @readonly
     */
    readonly EAS_BUILD?: string;
    /**
     * The gerrit project. This value is set by certain CI/CD systems.
     *
     * @title GERRIT PROJECT
     * @readonly
     */
    readonly GERRIT_PROJECT?: string;
    /**
     * The gitea actions build ID. This value is set by certain CI/CD systems.
     *
     * @title GITEA ACTIONS
     * @readonly
     */
    readonly GITEA_ACTIONS?: string;
    /**
     * The github actions build ID. This value is set by certain CI/CD systems.
     *
     * @title GITHUB ACTIONS
     * @readonly
     */
    readonly GITHUB_ACTIONS?: string;
    /**
     * The gitlab ci build ID. This value is set by certain CI/CD systems.
     *
     * @title GITLAB Continuous Integration
     * @readonly
     */
    readonly GITLAB_CI?: string;
    /**
     * The go cd build ID. This value is set by certain CI/CD systems.
     *
     * @title GOCD
     * @readonly
     */
    readonly GOCD?: string;
    /**
     * The harness build ID. This value is set by certain CI/CD systems.
     *
     * @title HARNESS BUILD Identifier
     * @readonly
     */
    readonly HARNESS_BUILD_ID?: string;
    /**
     * The hudson build ID. This value is set by certain CI/CD systems.
     *
     * @title HUDSON
     * @readonly
     */
    readonly HUDSON?: string;
    /**
     * The jenkins url. This value is set by certain CI/CD systems.
     *
     * @title JENKINS Uniform Resource Locator
     * @readonly
     */
    readonly JENKINS_URL?: string;
    /**
     * The layerci build ID. This value is set by certain CI/CD systems.
     *
     * @title LAYERCI
     * @readonly
     */
    readonly LAYERCI?: string;
    /**
     * A variable that specifies the current user's local application data directory on Windows.
     *
     * @title LOCALAPPDATA
     * @readonly
     */
    readonly LOCALAPPDATA?: string;
    /**
     * The magnum build ID. This value is set by certain CI/CD systems.
     *
     * @title MAGNUM
     * @readonly
     */
    readonly MAGNUM?: string;
    /**
     * The netlify build ID. This value is set by certain CI/CD systems.
     *
     * @title NETLIFY
     * @readonly
     */
    readonly NETLIFY?: string;
    /**
     * The nevercode build ID. This value is set by certain CI/CD systems.
     *
     * @title NEVERCODE
     * @readonly
     */
    readonly NEVERCODE?: string;
    /**
     * The now builder build ID. This value is set by certain CI/CD systems.
     *
     * @title NOW BUILDER
     * @readonly
     */
    readonly NOW_BUILDER?: string;
    /**
     * The prow job ID. This value is set by certain CI/CD systems.
     *
     * @title PROW JOB Identifier
     * @readonly
     */
    readonly PROW_JOB_ID?: string;
    /**
     * The release build ID. This value is set by certain CI/CD systems.
     *
     * @title RELEASE BUILD Identifier
     * @readonly
     */
    readonly RELEASE_BUILD_ID?: string;
    /**
     * The unique identifier for the release.
     *
     * @title RELEASE Identifier
     * @defaultValue 98d77df7-0e1d-435b-80c3-d96c69bece9c
     * @readonly
     */
    readonly RELEASE_ID: string;
    /**
     * The tag for the release. This is generally in the format of "\<APP_NAME\>\@\<APP_VERSION\>".
     *
     * @title RELEASE TAG
     * @defaultValue storm-stack@0.24.1
     * @readonly
     */
    readonly RELEASE_TAG: string;
    /**
     * The render build ID. This value is set by certain CI/CD systems.
     *
     * @title RENDER
     * @readonly
     */
    readonly RENDER?: string;
    /**
     * The unique identifier for the current run. This value is set by certain CI/CD systems.
     *
     * @title RUN Identifier
     * @readonly
     */
    readonly RUN_ID?: string;
    /**
     * The sailci build ID. This value is set by certain CI/CD systems.
     *
     * @title SAILCI
     * @readonly
     */
    readonly SAILCI?: string;
    /**
     * The screwdriver build ID. This value is set by certain CI/CD systems.
     *
     * @title SCREWDRIVER
     * @readonly
     */
    readonly SCREWDRIVER?: string;
    /**
     * The semaphore build ID. This value is set by certain CI/CD systems.
     *
     * @title SEMAPHORE
     * @readonly
     */
    readonly SEMAPHORE?: string;
    /**
     * The sourcehut build ID. This value is set by certain CI/CD systems.
     *
     * @title SOURCEHUT
     * @readonly
     */
    readonly SOURCEHUT?: string;
    /**
     * The spaceship build ID. This value is set by certain CI/CD systems.
     *
     * @title SPACESHIP Continuous Integration
     * @readonly
     */
    readonly SPACESHIP_CI?: string;
    /**
     * An indicator that specifies the application is running in the local Storm Stack development environment.
     *
     * @title STORM STACK LOCAL
     * @readonly
     */
    readonly STORM_STACK_LOCAL?: boolean;
    /**
     * An indicator used to skip version checks for installed packages.
     *
     * @title STORM STACK SKIP VERSION CHECK
     * @readonly
     */
    readonly STORM_STACK_SKIP_VERSION_CHECK?: boolean;
    /**
     * The strider build ID. This value is set by certain CI/CD systems.
     *
     * @title STRIDER
     * @readonly
     */
    readonly STRIDER?: string;
    /**
     * The task ID. This value is set by certain CI/CD systems.
     *
     * @title TASK Identifier
     * @readonly
     */
    readonly TASK_ID?: string;
    /**
     * The teamcity version. This value is set by certain CI/CD systems.
     *
     * @title TEAMCITY VERSION
     * @readonly
     */
    readonly TEAMCITY_VERSION?: string;
    /**
     * The terminal type. This variable is set by certain CI/CD systems.
     *
     * @title TERM
     * @defaultValue xterm-256color
     * @readonly
     */
    readonly TERM?: string;
    /**
     * The terminal program name. This variable is set by certain terminal emulators.
     *
     * @title TERM PROGRAM
     * @readonly
     */
    readonly TERM_PROGRAM?: string;
    /**
     * The terminal program version. This variable is set by certain terminal emulators.
     *
     * @title TERM PROGRAM VERSION
     * @readonly
     */
    readonly TERM_PROGRAM_VERSION?: string;
    /**
     * The terminal emulator name. This variable is set by certain terminal emulators.
     *
     * @title TERMINAL EMULATOR
     * @readonly
     */
    readonly TERMINAL_EMULATOR?: string;
    /**
     * An indicator that specifies the current terminal is running Terminus Sublime. This variable is set by certain terminal emulators.
     *
     * @title TERMINUS SUBLIME
     * @readonly
     */
    readonly TERMINUS_SUBLIME?: boolean;
    /**
     * The task force build ID. This value is set by certain CI/CD systems.
     *
     * @title TF BUILD
     * @readonly
     */
    readonly TF_BUILD?: string;
    /**
     * The travis build ID. This value is set by certain CI/CD systems.
     *
     * @title TRAVIS
     * @readonly
     */
    readonly TRAVIS?: string;
    /**
     * The vela build ID. This value is set by certain CI/CD systems.
     *
     * @title VELA
     * @readonly
     */
    readonly VELA?: string;
    /**
     * The VTE version. This variable is set by certain terminal emulators.
     *
     * @title VTE VERSION
     * @readonly
     */
    readonly VTE_VERSION?: string;
    /**
     * The terminal emulator session ID. This variable is set by certain terminal emulators.
     *
     * @title WT SESSION
     * @readonly
     */
    readonly WT_SESSION?: string;
    /**
     * The xcode server build ID. This value is set by certain CI/CD systems.
     *
     * @title XCS
     * @readonly
     */
    readonly XCS?: string;
    /**
     * A variable that specifies the cache path in the home directory on Linux systems using the XDG base directory specification.
     *
     * @title Cross-Desktop Group CACHE HOME
     * @readonly
     */
    readonly XDG_CACHE_HOME?: string;
    /**
     * A variable that specifies the configuration path in the home directory on Linux systems using the XDG base directory specification.
     *
     * @title Cross-Desktop Group CONFIG HOME
     * @readonly
     */
    readonly XDG_CONFIG_HOME?: string;
    /**
     * A variable that specifies the data path in the home directory on Linux systems using the XDG base directory specification.
     *
     * @title Cross-Desktop Group DATA HOME
     * @readonly
     */
    readonly XDG_DATA_HOME?: string;
    /**
     * A variable that specifies the runtime directory on Linux systems using the XDG base directory specification.
     *
     * @title Cross-Desktop Group RUNTIME DIR
     * @defaultValue /run/user/1001
     * @readonly
     */
    readonly XDG_RUNTIME_DIR?: string;
    /**
     * A variable that specifies the state directory on Linux systems using the XDG base directory specification.
     *
     * @title Cross-Desktop Group STATE HOME
     * @readonly
     */
    readonly XDG_STATE_HOME?: string;
  }
  export type StormConfig = {
    [Key in keyof StormConfigBase as
      | Key
      | `VITE_${Key}`
      | `ONE_${Key}`
      | `STORM_PUBLIC_${Key}`
      | `STORM_${Key}`
      | `STORM_STACK_PUBLIC_${Key}`
      | `STORM_STACK_${Key}`
      | `NEXT_PUBLIC_${Key}`]: StormConfigBase[Key];
  };
  /**
   * The initial configuration state for the Storm Stack project..
   */
  export const initialConfig: StormConfigBase;
  /**
   * The configuration serializer for the Storm Stack application.
   *
   * @see https://deepkit.io/docs/serialization/serializers
   * @see https://github.com/marcj/untitled-code/blob/master/packages/type/src/serializer.ts#L1918
   *
   * @remarks
   * This serializer is used to serialize and deserialize the Storm Stack configuration.
   */
  export class ConfigSerializer extends Serializer {
    constructor();
  }
  /**
   * A {@link ConfigSerializer | configuration serializer} instance for the Storm Stack application.
   *
   * @see https://deepkit.io/docs/serialization/serializers
   * @see https://github.com/marcj/untitled-code/blob/master/packages/type/src/serializer.ts#L1918
   *
   * @remarks
   * This serializer is used to serialize and deserialize the Storm Stack configuration.
   */
  export const configSerializer: ConfigSerializer;
  /**
   * Serialize a configuration object to JSON data objects (not a JSON string).
   *
   * The resulting JSON object can be stringified using JSON.stringify().
   *
   * ```typescript
   * const json = deserialize(config);
   * ```
   *
   * @throws ValidationError when serialization or validation fails.
   */
  export const serializeConfig: import("@deepkit/type").SerializeFunction<StormConfigBase>;
  /**
   * Deserialize a configuration object from JSON data objects to JavaScript objects, without running any validators.
   *
   * Types that are already correct will be used as-is.
   *
   * ```typescript
   * const config = deserialize(json);
   * ```
   *
   * @throws ValidationError when deserialization fails.
   */
  export const deserializeConfig: import("@deepkit/type").SerializeFunction<
    any,
    StormConfigBase
  >;
  /**
   * Initializes the Storm Stack configuration module.
   *
   * @remarks
   * This function initializes the Storm Stack configuration object.
   *
   * @param environmentConfig - The dynamic/runtime configuration - this could include the current environment variables or any other environment-specific settings provided by the runtime.
   * @returns The initialized Storm Stack configuration object.
   */
  export function createConfig(
    environmentConfig?: Partial<StormConfig>
  ): StormConfig;
  export type StormConfigBase = any[];
  export type StormConfig = any[];
}

declare module "storm:error" {
  /**
   * The Storm Stack error module provides a custom error class and utility functions to support error handling
   *
   * @module storm:error
   */

  /**
   * Get the default error code for the given error type.
   *
   * @param _ - The error type.
   * @returns The default error code.
   */
  export function getDefaultCode(_: ErrorType): number;
  /**
   * Get the default error name for the given error type.
   *
   * @param type - The error type.
   * @returns The default error name.
   */
  export function getDefaultErrorName(type: ErrorType): string;
  /**
   * Checks if `value` is an {@link Error}, `EvalError`, `RangeError`, `ReferenceError`,
   * `SyntaxError`, `TypeError`, or `URIError` object.
   *
   * @example
   * ```typescript
   * isError(new Error)
   * // => true
   *
   * isError(Error)
   * // => false
   * ```
   *
   * @param value - The value to check.
   * @returns Returns `true` if `value` is an error object, else `false`.
   */
  export function isError(value: unknown): value is Error;
  /**
   * Type-check to determine if `value` is a {@link StormError} object
   *
   * @param value - the object to check
   * @returns Returns `true` if `value` is a {@link StormError} object, else `false`.
   */
  export function isStormError(value: unknown): value is StormError;
  /**
   * Creates a new {@link StormError} instance from an unknown cause value
   *
   * @param cause - The cause of the error in an unknown type
   * @param type - The type of the error
   * @param data - Additional data to be passed with the error
   * @returns The cause of the error in a {@link StormError} object
   */
  export function createStormError(
    cause: unknown,
    type?: ErrorType,
    data?: any
  ): StormError;
  /**
   * A wrapper around the base JavaScript Error class to be used in Storm Stack applications
   */
  export class StormError extends Error implements StormErrorInterface {
    readonly [Symbol.name]: string;
    /**
     * Internal function to inherit the {@link Error} prototype.
     *
     * @internal
     */
    __proto__: Error;
    /**
     * The error code
     */
    code: number;
    /**
     * The error message parameters
     */
    params: string[];
    /**
     * The type of error event
     */
    type: ErrorType;
    /**
     * Additional data to be passed with the error
     */
    data?: any;
    /**
     * The string tag for the error
     */
    readonly [Symbol.toStringTag]: string;
    /**
     * The StormError constructor
     *
     * @param options - The options for the error
     * @param type - The type of error
     */
    constructor(optionsOrMessage: StormErrorOptions | string, type?: ErrorType);
    /**
     * A string that uniquely identifies the error
     *
     * @remarks
     * The `id` property is a string that uniquely identifies the error. This string is generated based off the error type and code.
     *
     * @example
     * ```typescript
     * const error = new StormError({ code: 110 }, "custom");
     * console.log(error.id); // "CUSTOM-110"
     * ```
     *
     */
    get id(): string;
    /**
     * The cause of the error
     */
    get cause(): StormErrorInterface | undefined;
    /**
     * The cause of the error
     */
    set cause(cause: unknown);
    /**
     * The parsed stack traces from the raw stack string
     *
     * @returns The parsed stack traces
     */
    get stacktrace(): ParsedStacktrace[];
    /**
     * Prints a displayable/formatted stack trace
     *
     * @returns The stack trace string
     */
    get stack(): string;
    /**
     * Store the stack trace
     */
    set stack(stack: string);
    /**
     * The unformatted stack trace
     *
     * @returns The stack trace string
     */
    get originalStack(): string;
    /**
     * The unformatted stack trace
     *
     * @returns The stack trace string
     */
    set originalStack(stack: string);
    /**
     * A URL to a page that displays the error message details
     */
    get url(): string;
    /**
     * Prints the display error message string
     *
     * @param includeData - Whether to include the data in the error message
     * @returns The display error message string
     */
    toDisplay(includeData?: boolean): string;
    /**
     * Prints the error message and stack trace
     *
     * @param stacktrace - Whether to include the stack trace in the error message
     * @param includeData - Whether to include the data in the error message
     * @returns The error message and stack trace string
     */
    toString(stacktrace?: boolean, includeData?: boolean): string;
    /**
     * Converts a StormError object to a string.
     */
    [Symbol.toPrimitive](hint: "default"): string;
    /**
     * Converts a StormError object to a string.
     */
    [Symbol.toPrimitive](hint: "string"): string;
    /**
     * Converts a StormError object to a number.
     */
    [Symbol.toPrimitive](hint: "number"): number;
  }
}

declare module "storm:log/console-info" {
  export const DATE_TIME_FORMAT: Intl.DateTimeFormat;
  /**
   * Creates a new [console](https://developer.mozilla.org/en-US/docs/Web/API/console) logging adapter.
   *
   * @returns The created logging adapter.
   */
  function createAdapter(): LogAdapter;
  export default createAdapter;
}

declare module "storm:id" {
  /**
   * The ID module provides a set of utilities for generating unique identifiers.
   *
   * @module storm:id
   */
  /**
   * Generate a random string
   *
   * @param array - The array to fill with random values
   * @returns The array filled with random values
   */
  export function getRandom(array: Uint8Array): Uint8Array<ArrayBufferLike>;
  /**
   * A platform agnostic version of the [nanoid](https://github.com/ai/nanoid) package with some modifications.
   *
   * @param size - The size of the string to generate. Defaults to 21 if not provided.
   * @returns A unique identifier following the nanoid format
   */
  export function uniqueId(size?: number | undefined): string;
  /**
   * A platform agnostic version of the [nanoid](https://github.com/ai/nanoid) package with some modifications.
   *
   * @param prefix - The prefix to use for the unique identifier
   * @param size - The size of the string to generate. Defaults to 21 if not provided.
   * @returns A unique identifier following the nanoid format
   */
  export function uniqueId(prefix?: string, size?: number | undefined): string;
}

declare module "storm:env" {
  /**
   * This module provides the runtime environment information for the Storm Stack application.
   *
   * @module storm:env
   */

  /**
   * Checks if a specific flag is present in the command line arguments.
   *
   * @see {@link https://github.com/sindresorhus/has-flag/blob/main/index.js}
   *
   * @param flag - The flag to check for, e.g., "color", "no-color".
   * @param argv - The command line arguments to check against. Defaults to global Deno args or process args.
   * @returns True if the flag is present, false otherwise.
   */
  export function hasFlag(flag: string, argv?: string[]): boolean;
  /**
   * Options for getting the color support level.
   */
  export type GetColorSupportLevelOptions = {
    streamIsTTY?: boolean;
    sniffFlags?: boolean;
  };
  /**
   * Determines the color support level of the terminal.
   *
   * @param stream - The stream to check availability of (e.g., process.stdout).
   * @param options - Options for the color detection.
   * @returns The color support level (0 = no color, 1 = basic, 2 = 256 colors, 3 = true color).
   */
  export function getColorSupportLevel(
    stream: any,
    options?: GetColorSupportLevelOptions
  ):
    | false
    | 0
    | 2
    | 3
    | {
        level: number;
        hasBasic: boolean;
        has256: boolean;
        has16m: boolean;
      };
  /**
   * Generate a list of variables that describe the current application's runtime environment.
   *
   * @returns An object containing the runtime environment details.
   */
  export function createEnv(): StormNodeEnv;
  export type GetColorSupportLevelOptions = any[];
}

declare module "storm:request" {
  /**
   * The request module provides a base request class used by the Storm Stack runtime.
   *
   * @module storm:request
   */

  /**
   * A base request class used by the Storm Stack runtime.
   */
  export class StormRequest<
    TData extends Record<string, any> = Record<string, any>
  > implements StormRequestInterface<TData>
  {
    /**
     * The request identifier.
     */
    readonly id: string;
    /**
     * The request created timestamp.
     */
    readonly timestamp: number;
    /**
     * The request data.
     */
    readonly data: TData;
    /**
     * Create a new request object.
     *
     * @param data - The request input data.
     */
    constructor(data: TData);
    /**
     * Merges the given data into the request.
     *
     * @param data - The data to merge into the request.
     */
    merge(data: Partial<TData>): void;
  }
}

declare module "storm:response" {
  /**
   * The response module provides the {@link StormResponse} class, which is used to represent the response of a request execution.
   *
   * @module storm:response
   */

  /**
   * A base response class used by the Storm Stack runtime.
   */
  export class StormResponse<TData extends any | StormError = any | StormError>
    implements StormResponseInterface<TData>
  {
    /**
     * Create a new response.
     *
     * @remarks
     * **IMPORTANT:** This function uses the storm context object - never use this function outside of the context wrapper/tree since the context will not be available.
     *
     * @param data - The response data
     */
    static create<TData>(data: TData): StormResponse<TData>;
    /**
     * The response meta.
     */
    readonly meta: Record<string, any>;
    /**
     * The response data.
     */
    data: TData;
    /**
     * The request identifier.
     */
    readonly requestId: string;
    /**
     * The response created timestamp.
     */
    readonly timestamp: number;
    /**
     * An indicator of whether the response was successful.
     */
    get success(): boolean;
    /**
     * Create a new response.
     *
     * @param requestId - The request identifier.
     * @param meta - The current context's metadata.
     * @param data - The response data
     */
    constructor(requestId: string, meta: Record<string, any>, data: TData);
  }
}

declare module "storm:storage/crash-reports" {
  function createAdapter(): StorageAdapter;
  export default createAdapter;
}

declare module "storm:storage/storage" {
  function createAdapter(): StorageAdapter;
  export default createAdapter;
}

declare module "storm:storage" {
  /**
   * The storage module provides a unified storage interface for the Storm Stack runtime.
   *
   * @module storm:storage
   */

  /**
   * Creates a new storage instance.
   *
   * @remarks
   * This function initializes the storage with all configured adapters.
   *
   * @returns The {@link StormStorageInterface} storage instance with each storage adapter loaded into a slice of it's total state.
   */
  export function createStorage(): StormStorageInterface;
}

declare module "storm:context" {
  /**
   * This module provides the Storm Stack context and a hook to access it in the application.
   *
   * @module storm:context
   */

  /**
   * The global Storm context for the current application.
   *
   * @remarks
   * This interface extends the base Storm context interface with additional properties specific to the NodeJs application.
   */
  export interface StormContext extends StormContextInterface {
    /**
     * The context metadata.
     */
    meta: Record<string, any>;
    /**
     * The request object for the current Storm Stack application.
     */
    request: StormRequest;
    /**
     * Environment/runtime specific application data.
     */
    env: import("@storm-stack/types/node/env").StormNodeEnv;
    /**
     * The root application logger for the Storm Stack application.
     */
    log: import("@storm-stack/types/shared/log").StormLogInterface;
    /**
     * The {@link StormStorageInterface} instance used by the Storm Stack application.
     */
    storage: import("@storm-stack/types/shared/storage").StormStorageInterface;
    /**
     * The configuration parameters for the Storm application.
     */
    config: StormConfig & Record<string, any>;
    /**
     * A set of disposable resources to clean up when the context is no longer needed.
     */
    readonly disposables: Set<Disposable>;
    /**
     * A set of asynchronous disposable resources to clean up when the context is no longer needed.
     */
    readonly asyncDisposables: Set<AsyncDisposable>;
  }
  /**
   * Get the Storm context for the current application.
   *
   * @param options - The options to use when getting the context.
   * @returns The Storm context for the current application.
   * @throws If the Storm context is not available.
   */
  export function useStorm(options?: ContextOptions): StormContext;
  /**
   * Wrap an application entry point with the necessary context and error handling.
   *
   * @param handler - The handler function for the application.
   * @returns A function that takes an request and returns a response or a promise of a response.
   */
  export function withContext<
    TInput extends Record<string, any> = Record<string, any>,
    TOutput = any
  >(
    handler: HandlerFunction<TInput, TOutput>
  ): (input: TInput) => Promise<StormResponse<TOutput | StormError>>;
  export type StormContext = any[];
}

declare module "storm:log/sentry-error" {
  /**
   * Creates a new [Sentry](https://sentry.io/) logging adapter.
   *
   * @returns The created {@link LogAdapter}.
   */
  function createAdapter(): LogAdapter;
  export default createAdapter;
}

declare module "storm:log/storage-info" {
  /**
   * Get a text formatter with the specified options.  Although it's flexible
   * enough to create a custom formatter, if you want more control, you can
   * create a custom formatter that satisfies the {@link TextFormatter} type
   * instead.
   *
   * For more information on the options, see {@link TextFormatterOptions}.
   *
   * By default, the formatter formats log records as follows:
   *
   * ```
   * 2023-11-14 22:13:20.000 +00:00 [INFO] Hello, world!
   * ```
   * @param options - The options for the text formatter.
   * @returns The text formatter.
   */
  export function getTextFormatter(
    options?: TextFormatterOptions
  ): TextFormatter;
  /**
   * Creates a new [Unstorage](https://unstorage.dev/) logging adapter.
   *
   * @returns The created logging adapter.
   */
  function createAdapter(): LogAdapter;
  export default createAdapter;
}

declare module "storm:log" {
  /**
   * The log module provides a unified logging interface for Storm Stack applications.
   *
   * @module storm:log
   */

  /**
   * Returns a filter that accepts log records with the specified level.
   *
   * @param level - The level to filter by. If `null`, the filter will reject all records.
   * @returns The filter.
   */
  export function getLevelFilter(level: LogLevel | null): LogFilter;
  /**
   * Parses a {@link LogLevel | log level} from a string.
   *
   * @param level - The {@link LogLevel | log level} as a string. This is case-insensitive.
   * @returns The {@link LogLevel | log level}.
   */
  export function parseLogLevel(level: string): LogLevel;
  /**
   * Checks if a string is a valid {@link LogLevel | log level}. This function can be used as a type guard to narrow the type of a string to a {@link LogLevel}.
   *
   * @param level - The {@link LogLevel | log level} as a string. This is case-sensitive.
   * @returns `true` if the string is a valid {@link LogLevel | log level}.
   */
  export function isLogLevel(level: string): level is LogLevel;
  /**
   * The StormLog class that's used for writing logs during Storm Stack applications.
   */
  export class StormLog implements StormLogInterface {
    /**
     * The list of filters applied to log records.
     *
     * @remarks
     * Filters are functions that take a {@link LogRecord} and return a boolean indicating whether the record should be logged. You can add custom filters to this list to control which log records are emitted.
     */
    readonly filters: LogFilter[];
    /**
     * The lowest log level that will be logged by this logger.
     *
     * @remarks
     * This is set to the value of the `LOG_LEVEL` configuration parameter.
     *
     * @defaultValue "info"
     */
    lowestLogLevel: LogLevel | null;
    /**
     * Create a new StormLog instance.
     *
     * @remarks
     * This constructor initializes the logger with an empty filter list and sets the lowest log level to `null`.
     */
    constructor();
    /**
     * Generates a new {@link StormLogCtx} instance and adds properties to the logger context.
     *
     * @remarks
     * This method allows you to create a new logger context with additional properties. The properties will be merged with the existing properties in the logger context.
     *
     * @param properties - The properties to add to the logger context.
     * @returns A new {@link StormLogCtx} instance with the merged properties.
     */
    with(properties: Record<string, unknown>): StormLogInterface;
    /**
     * Filters log records based on the logger's filters.
     *
     * @param record - The log record to filter.
     * @returns Whether the log record passes all filters.
     */
    filter(record: LogRecord): boolean;
    /**
     * Returns an async iterable of log adapters that match the specified log level.
     *
     * @param level - The log level to filter adapters by.
     * @returns An iterable of log adapters that match the specified log level.
     */
    adapters(level?: LogLevel): Iterable<LogAdapter>;
    /**
     * Emits a log record to all registered adapters that match the record's log level.
     *
     * @param record - The log record to emit.
     * @param bypassAdapters - A set of adapters to bypass when emitting the record.
     */
    emit(record: LogRecord, bypassAdapters?: Set<LogAdapter>): void;
    /**
     * Logs a message at the specified log level.
     *
     * @param level - The log level to use.
     * @param rawMessage - The raw message to log.
     * @param properties - The properties to include with the log message.
     * @param bypassAdapters - A set of adapters to bypass when emitting the log message.
     */
    log(
      level: LogLevel,
      rawMessage: string,
      properties: Record<string, unknown> | (() => Record<string, unknown>),
      bypassAdapters?: Set<LogAdapter>
    ): void;
    /**
     * Logs a message lazily at the specified log level.
     *
     * @param level - The log level to use.
     * @param callback - A callback function that returns the message to log.
     * @param properties - The properties to include with the log message.
     */
    logLazily(
      level: LogLevel,
      callback: LogCallback,
      properties?: Record<string, unknown>
    ): void;
    /**
     * Logs a message template at the specified log level.
     *
     * @param level - The log level to use.
     * @param messageTemplate - The message template to log.
     * @param values - The values to interpolate into the message template.
     * @param properties - The properties to include with the log message.
     */
    logTemplate(
      level: LogLevel,
      messageTemplate: TemplateStringsArray,
      values: unknown[],
      properties?: Record<string, unknown>
    ): void;
    /**
     * Logs a debug message.
     *
     * @param message - The message to log. Can be a string, a template string, or a callback function that returns the message.
     * @param values - The values to interpolate into the message template.
     */
    debug(
      message: TemplateStringsArray | string | LogCallback,
      ...values: unknown[]
    ): void;
    /**
     * Logs an info message.
     *
     * @param message - The message to log. Can be a string, a template string, or a callback function that returns the message.
     * @param values - The values to interpolate into the message template.
     */
    info(
      message: TemplateStringsArray | string | LogCallback,
      ...values: unknown[]
    ): void;
    /**
     * Logs a warning message.
     *
     * @param message - The message to log. Can be a string, a template string, or a callback function that returns the message.
     * @param values - The values to interpolate into the message template.
     */
    warn(
      message: TemplateStringsArray | string | LogCallback,
      ...values: unknown[]
    ): void;
    /**
     * Logs an error message.
     *
     * @param message - The message to log. Can be a string, a template string, or a callback function that returns the message.
     * @param values - The values to interpolate into the message template.
     */
    error(
      message: TemplateStringsArray | string | LogCallback | Error,
      ...values: unknown[]
    ): void;
    /**
     * Logs a fatal message.
     *
     * @param message - The message to log. Can be a string, a template string, or a callback function that returns the message.
     * @param values - The values to interpolate into the message template.
     */
    fatal(
      message: TemplateStringsArray | string | LogCallback | Error,
      ...values: unknown[]
    ): void;
    protected getStore(): Record<string, unknown>;
  }
}

declare module "storm:event" {
  /**
   * The Storm Stack event module.
   *
   * @module storm:event
   */

  /**
   * A base event class used by the Storm Stack runtime.
   */
  export class StormEvent<
    TEventType extends string = string,
    TData extends Record<string, any> = Record<string, any>
  > implements StormEventInterface<TEventType, TData>
  {
    /**
     * The event timestamp.
     */
    readonly timestamp: number;
    /**
     * The event identifier.
     */
    readonly id: string;
    /**
     * The event data object.
     */
    readonly data: TData;
    /**
     * The request identifier.
     */
    readonly requestId: string;
    /**
     * The event type.
     */
    readonly type: TEventType;
    /**
     * The event version.
     */
    readonly version: string;
    /**
     * The event label.
     *
     * @remarks
     * The label format is "{type}-v{version}"
     */
    get label(): string;
    /**
     * Creates a new event.
     *
     * @param type - The event type.
     * @param data - The event data.
     */
    constructor(type: TEventType, data: TData);
  }
}

declare module "storm:date" {
  /**
   * The Storm Stack date module provides utility functions for date manipulation and formatting
   *
   * @module storm:date
   */

  export const formats: DateFormats;
  export const locale: Locale;
  /**
   * Creates a date object using the provided value.
   *
   * @remarks
   * This function creates a date object using the provided value. If the value is `null`, it returns `null`. If the value is `undefined`, it returns the current date. If the value is a string, it parses the string as a date. If the value is a number, it treats it as a timestamp. If the value is a date object, it returns the date object.
   *
   * @example
   * ```ts
   * import { createDate } from "storm:date";
   *
   * const date = createDate("2023-10-01");
   * console.log(date.format("YYYY-MM-DD")); // Outputs: 2023-10-01
   * ```
   *
   * @param value - The value to create the date object from.
   * @returns A date object or `null` if the value is `null`.
   */
  export function createDate<
    TArg = undefined,
    TResultingDate = TArg extends null
      ? null
      : TArg extends undefined
        ? Date
        : Date | null
  >(value?: TArg): TResultingDate;
  export const type = "date-fns";
  export function is12HourCycleInCurrentLocale(): boolean;
  export function getFormatHelperText(format: string): string;
  export function parseISO(isoString: string): Date;
  export function toISO(value: Date): string;
  export function getCurrentLocaleCode(): string;
  export function addSeconds(value: Date, count: number): Date;
  export function addMinutes(value: Date, count: number): Date;
  export function addHours(value: Date, count: number): Date;
  export function addDays(value: Date, count: number): Date;
  export function addWeeks(value: Date, count: number): Date;
  export function addMonths(value: Date, count: number): Date;
  export function addYears(value: Date, count: number): Date;
  export function isValid(value: any): boolean;
  export function getDiff(
    value: Date,
    comparing: Date | string,
    unit?: TimeUnit
  ): number;
  export function isAfter(value: Date, comparing: Date): boolean;
  export function isBefore(value: Date, comparing: Date): boolean;
  export function startOfDay(value: Date): Date;
  export function endOfDay(value: Date): Date;
  export function getHours(value: Date): number;
  export function setHours(value: Date, count: number): Date;
  export function setMinutes(value: Date, count: number): Date;
  export function getSeconds(value: Date): number;
  export function setSeconds(value: Date, count: number): Date;
  export function isSameDay(value: Date, comparing: Date): boolean;
  export function isSameMonth(value: Date, comparing: Date): boolean;
  export function isSameYear(value: Date, comparing: Date): boolean;
  export function isSameHour(value: Date, comparing: Date): boolean;
  export function startOfYear(value: Date): Date;
  export function endOfYear(value: Date): Date;
  export function startOfMonth(value: Date): Date;
  export function endOfMonth(value: Date): Date;
  export function startOfWeek(value: Date): Date;
  export function endOfWeek(value: Date): Date;
  export function getYear(value: Date): number;
  export function setYear(value: Date, count: number): Date;
  export function toJsDate(value: Date): Date;
  export function parse(value: string, formatString: string): Date | null;
  export function format(date: Date, formatKey: keyof DateFormats): string;
  export function formatByString(date: Date, formatString: string): string;
  export function isEqual(date: any, comparing: any): boolean;
  export function isNull(date: Date): date is never;
  export function isAfterDay(date: Date, value: Date): boolean;
  export function isBeforeDay(date: Date, value: Date): boolean;
  export function isBeforeYear(date: Date, value: Date): boolean;
  export function isBeforeMonth(value: Date, comparing: Date): boolean;
  export function isAfterMonth(value: Date, comparing: Date): boolean;
  export function isAfterYear(date: Date, value: Date): boolean;
  export function isWithinRange(
    date: Date,
    [start, end]: [Date, Date]
  ): boolean;
  export function formatNumber(numberToFormat: string): string;
  export function getMinutes(date: Date): number;
  export function getDate(date: Date): number;
  export function setDate(date: Date, count: number): Date;
  export function getWeek(date: Date): number;
  export function getMonth(date: Date): number;
  export function getDaysInMonth(date: Date): number;
  export function setMonth(date: Date, count: number): Date;
  export function getMeridiemText(meridiem: "am" | "pm"): "AM" | "PM";
  export function getNextMonth(date: Date): Date;
  export function getPreviousMonth(date: Date): Date;
  export function getMonthArray(date: Date): Date[];
  export function mergeDateAndTime(date: Date, time: Date): Date;
  export function getWeekdays(): string[];
  export function getWeekArray(date: Date): Date[][];
  export function getYearRange(start: Date, end: Date): Date[];
}

declare module "storm:cli" {
  export type CLIRequestData = {
    argv: string[];
  };
  export type ColorName =
    | "reset"
    | "bold"
    | "dim"
    | "italic"
    | "underline"
    | "overline"
    | "inverse"
    | "hidden"
    | "strikethrough"
    | "black"
    | "red"
    | "green"
    | "yellow"
    | "blue"
    | "magenta"
    | "cyan"
    | "white"
    | "blackBright"
    | "gray"
    | "grey"
    | "redBright"
    | "greenBright"
    | "yellowBright"
    | "blueBright"
    | "magentaBright"
    | "cyanBright"
    | "whiteBright"
    | "bgBlack"
    | "bgRed"
    | "bgGreen"
    | "bgYellow"
    | "bgBlue"
    | "bgMagenta"
    | "bgCyan"
    | "bgWhite"
    | "bgBlackBright"
    | "bgGray"
    | "bgGrey"
    | "bgRedBright"
    | "bgGreenBright"
    | "bgYellowBright"
    | "bgBlueBright"
    | "bgMagentaBright"
    | "bgCyanBright"
    | "bgWhiteBright"
    | "background"
    | "bgBackground"
    | "foreground"
    | "bgForeground"
    | "brand"
    | "bgBrand"
    | "alternate"
    | "bgAlternate"
    | "help"
    | "bgHelp"
    | "success"
    | "bgSuccess"
    | "info"
    | "bgInfo"
    | "warning"
    | "bgWarning"
    | "danger"
    | "bgDanger"
    | "fatal"
    | "bgFatal"
    | "link"
    | "bgLink"
    | "positive"
    | "bgPositive"
    | "negative"
    | "bgNegative";
  /**
   * An object containing functions for coloring text. Each function corresponds to a terminal color. See {@link ColorName} for available colors.
   */
  export const colors: Record<ColorName, (text: string | number) => string>;
  /**
   * Gets a color function by name, with an option for a fallback color if the requested color is not found.
   *
   * @param color - The name of the color function to get. See {@link ColorName}.
   * @param fallback - The name of the fallback color function if the requested color is not found. See {@link ColorName}.
   * @returns The color function that corresponds to the requested color, or the fallback color function.
   */
  export function getColor(
    color: ColorName,
    fallback?: ColorName
  ): (text: string | number) => string;
  /**
   * Formats a message for display in the CLI.
   *
   * @param text - The message text to format.
   * @param color - The color to use for the message (default: "brand").
   * @param title - The title to use for the message (default: "Message").
   * @param icon - An optional icon to display with the message.
   * @returns The formatted message string.
   */
  export function formatMessage(
    text: string,
    color?: ColorName,
    title?: string,
    icon?: string,
    stretch?: boolean
  ): string;
  /**
   * Shows a fatal error message in the CLI.
   *
   * @param details - The fatal error details to display.
   */
  export function showFatal(details: string | Error): void;
  /**
   * Shows an error message in the CLI.
   *
   * @param details - The error details to display.
   */
  export function showError(details: string | Error): void;
  /**
   * Shows a warning message in the CLI.
   *
   * @param details - The warning details to display.
   */
  export function showWarning(text: string): void;
  /**
   * Shows a info message in the CLI.
   *
   * @param details - The info details to display.
   */
  export function showInfo(text: string): void;
  /**
   * Shows a help message in the CLI.
   *
   * @param details - The help details to display.
   */
  export function showHelp(text: string): void;
  /**
   * Shows a success message in the CLI.
   *
   * @param details - The success details to display.
   */
  export function showSuccess(text: string): void;
  type LinkOptions = {
    /**
     * Whether to use colored text for the link.
     *
     * @defaultValue "link"
     */
    color?: ColorName | false;
    /**
     * The target for the link. Can be either "stdout" or "stderr".
     *
     * @defaultValue "stdout"
     */
    target?: "stdout" | "stderr";
    /**
     * A fallback function to handle the link in environments that do not support it.
     */
    fallback?: (url: string, text?: string) => string;
  };
  /**
   * Create a link to a URL in the console.
   *
   * @param url - The URL to link to.
   * @param text - The text to display for the link. If not provided, the URL will be used as the text.
   * @param options - Options to use when formatting the link.
   * @returns A terminal link
   */
  export function link(
    url: string,
    text?: string,
    options?: LinkOptions
  ): string;
  /**
   * Strips ANSI escape codes from a string.
   *
   * @param text - The string to strip ANSI codes from.
   * @returns The string without ANSI codes.
   */
  export function stripAnsi(text: string): string;
  /**
   * Renders a CLI banner with the specified title.
   *
   * @param title - The title to display in the banner.
   * @param description - The description to display in the banner.
   * @returns The rendered banner as a string.
   *
   * @internal
   */
  export function renderBanner(title: string, description: string): string;
  /**
   * Renders a CLI footer with the application details
   *
   * @param title - The title to display in the footer.
   * @param description - The description to display in the footer.
   * @returns The rendered footer as a string.
   *
   * @internal
   */
  export function renderFooter(): string;
  interface SelectOption {
    label: string;
    value: string;
    hint?: string;
  }
  const CANCEL_SYMBOL: unique symbol;
  interface PromptCommonOptions {
    /**
     * Specify how to handle a cancelled prompt (e.g. by pressing Ctrl+C).
     *
     * @remarks
     * The list of valid cancel strategies include:
     * - `"default"` - Resolve the promise with the `default` value or `initial` value.
     * - `"undefined`" - Resolve the promise with `undefined`.
     * - `"null"` - Resolve the promise with `null`.
     * - `"symbol"` - Resolve the promise with a symbol `Symbol.for("cancel")`.
     * - `"reject"`  - Reject the promise with an error.
     *
     * @defaultValue "default"
     */
    cancel?: "reject" | "default" | "undefined" | "null" | "symbol";
  }
  export type TextPromptOptions = PromptCommonOptions & {
    /**
     * Specifies the prompt type as text.
     *
     * @defaultValue "text"
     */
    type?: "text";
    /**
     * The default text value.
     */
    default?: string;
    /**
     * A placeholder text displayed in the prompt.
     */
    placeholder?: string;
    /**
     * The initial text value.
     */
    initial?: string;
  };
  export type ConfirmPromptOptions = PromptCommonOptions & {
    /**
     * Specifies the prompt type as confirm.
     */
    type: "confirm";
    /**
     * The initial value for the confirm prompt.
     */
    initial?: boolean;
  };
  export type SelectPromptOptions = PromptCommonOptions & {
    /**
     * Specifies the prompt type as select.
     */
    type: "select";
    /**
     * The initial value for the select prompt.
     */
    initial?: string;
    /**
     * The options to select from. See {@link SelectOption}.
     */
    options: (string | SelectOption)[];
  };
  export type MultiSelectPromptOptions = PromptCommonOptions & {
    /**
     * Specifies the prompt type as multiselect.
     */
    type: "multiselect";
    /**
     * The options to select from. See {@link SelectOption}.
     */
    initial?: string[];
    /**
     * The options to select from. See {@link SelectOption}.
     */
    options: (string | SelectOption)[];
    /**
     * Whether the prompt requires at least one selection.
     */
    required?: boolean;
  };
  /**
   * Defines a combined type for all prompt options.
   */
  export type PromptOptions =
    | TextPromptOptions
    | ConfirmPromptOptions
    | SelectPromptOptions
    | MultiSelectPromptOptions;
  type inferPromptReturnType<T extends PromptOptions> =
    T extends TextPromptOptions
      ? string
      : T extends ConfirmPromptOptions
        ? boolean
        : T extends SelectPromptOptions
          ? T["options"][number] extends SelectOption
            ? T["options"][number]["value"]
            : T["options"][number]
          : T extends MultiSelectPromptOptions
            ? T["options"]
            : unknown;
  type inferPromptCancelReturnType<T extends PromptOptions> = T extends {
    cancel: "reject";
  }
    ? never
    : T extends {
          cancel: "default";
        }
      ? inferPromptReturnType<T>
      : T extends {
            cancel: "undefined";
          }
        ? undefined
        : T extends {
              cancel: "null";
            }
          ? null
          : T extends {
                cancel: "symbol";
              }
            ? typeof CANCEL_SYMBOL
            : inferPromptReturnType<T>;
  /**
   * Asynchronously prompts the user for input based on specified options.
   * Supports text, confirm, select and multi-select prompts.
   *
   * @param message - The message to display in the prompt.
   * @param opts - The prompt options. See {@link PromptOptions}.
   * @returns A promise that resolves with the user's response, the type of which is inferred from the options. See {@link inferPromptReturnType}.
   */
  export function prompt<
    _ = any,
    __ = any,
    T extends PromptOptions = TextPromptOptions
  >(
    message: string,
    opts?: PromptOptions
  ): Promise<inferPromptReturnType<T> | inferPromptCancelReturnType<T>>;
  export function parseArgs(args: any[], opts: any): any;
  export {};
  export type CLIRequestData = any[];
  export type ColorName = any[];
  export type TextPromptOptions = any[];
  export type ConfirmPromptOptions = any[];
  export type SelectPromptOptions = any[];
  export type MultiSelectPromptOptions = any[];
  export type PromptOptions = any[];
}

declare module "storm:app" {
  /**
   * Wrap an application entry point with the necessary context and error handling.
   *
   * @param handler - The handler function for the application.
   * @returns A function that takes an request and returns a response or a promise of a response.
   */
  export function createCLIApp<
    TInput extends CLIRequestData = CLIRequestData,
    TOutput = any
  >(
    handler: HandlerFunction<TInput, TOutput>
  ): (input: TInput) => Promise<StormResponse<StormError | unknown>>;
}

declare const $storm: import("storm:context").StormContext;
