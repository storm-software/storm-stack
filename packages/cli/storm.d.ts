/// <reference types="@storm-stack/core/shared" />
/// <reference types="@storm-stack/core/node" />

/* eslint-disable */
// biome-ignore lint: disable

// Generated with Storm Stack
// Note: Do not edit this file manually - it will be overwritten automatically

declare module "storm:env" {
  /**
   * The Storm Stack environment configuration module provides an interface to define environment configuration parameters.
   *
   * @module storm:env
   */

  /**
   *
   *
   * @title Object
   *
   *
   */
  export interface StormEnvBase extends StormEnvInterface {
    /**
     * Interface property definition for ARGV
     *
     * @domain cli
     *
     *
     */
    ARGV?: Array<string>;
    /**
     * Interface property definition for BANNER
     *
     * @domain cli
     *
     *
     */
    BANNER?: boolean;
    /**
     * Interface property definition for CACHE_DIR
     *
     * @title Cache Directory
     *
     *
     */
    CACHE_DIR?: string;
    /**
     * Interface property definition for CI
     *
     * @title Continuous Integration
     * @alias CONTINUOUS_INTEGRATION
     *
     *
     */
    CI: boolean;
    /**
     * Interface property definition for CONFIG
     *
     * @domain cli
     *
     *
     */
    CONFIG?: string | true;
    /**
     * Interface property definition for CONFIG_DIR
     *
     * @title Configuration Directory
     *
     *
     */
    CONFIG_DIR?: string;
    /**
     * Interface property definition for CONTINUOUS_INTEGRATION
     *
     * @title Continuous Integration
     * @alias CI
     *
     *
     */
    CONTINUOUS_INTEGRATION: boolean;
    /**
     * Interface property definition for DATA_DIR
     *
     * @title Data Directory
     *
     *
     */
    DATA_DIR?: string;
    /**
     * Interface property definition for DEBUG
     *
     *
     *
     */
    DEBUG: boolean;
    /**
     * Interface property definition for DEFAULT_LOCALE
     *
     *
     *
     */
    DEFAULT_LOCALE: string;
    /**
     * Interface property definition for DEFAULT_TIMEZONE
     *
     *
     *
     */
    DEFAULT_TIMEZONE: string;
    /**
     * Interface property definition for DEVENV_RUNTIME
     *
     *
     *
     */
    DEVENV_RUNTIME?: string;
    /**
     * Interface property definition for ENV
     *
     * @title ENVIRONMENT
     * @alias ENVIRONMENT
     *
     *
     */
    ENV: string;
    /**
     * Interface property definition for ENVIRONMENT
     *
     * @alias ENV
     *
     *
     */
    ENVIRONMENT: string;
    /**
     * Interface property definition for ERROR_URL
     *
     * @title Error Details URL
     *
     *
     */
    ERROR_URL: string;
    /**
     * Interface property definition for FORCE_COLOR
     *
     *
     *
     */
    FORCE_COLOR: boolean | number;
    /**
     * Interface property definition for FORCE_HYPERLINK
     *
     *
     *
     */
    FORCE_HYPERLINK: boolean | number;
    /**
     * Interface property definition for HELP
     *
     * @domain cli
     *
     *
     */
    HELP?: boolean;
    /**
     * Interface property definition for INCLUDE_ERROR_DATA
     *
     *
     *
     */
    INCLUDE_ERROR_DATA: boolean;
    /**
     * Interface property definition for INTERACTIVE
     *
     * @domain cli
     *
     *
     */
    INTERACTIVE?: boolean;
    /**
     * Interface property definition for LOG_DIR
     *
     * @title Log Directory
     *
     *
     */
    LOG_DIR?: string;
    /**
     * Interface property definition for LOG_LEVEL
     *
     *
     *
     */
    LOG_LEVEL?: "debug" | "info" | "warning" | "error" | "fatal" | null;
    /**
     * Interface property definition for MINIMAL
     *
     *
     *
     */
    MINIMAL: boolean;
    /**
     * Interface property definition for MODE
     *
     * @alias NODE_ENV
     *
     *
     */
    MODE: "development" | "test" | "production";
    /**
     * Interface property definition for NAME
     *
     * @domain cli
     *
     *
     */
    NAME?: string;
    /**
     * Interface property definition for NO_BANNER
     *
     * @domain cli
     *
     *
     */
    NO_BANNER?: boolean;
    /**
     * Interface property definition for NO_COLOR
     *
     *
     *
     */
    NO_COLOR: boolean;
    /**
     * Interface property definition for NO_INTERACT
     *
     * @title NO INTERACTIVE
     * @alias NO_INTERACTIVE
     * @domain cli
     *
     *
     */
    NO_INTERACT?: boolean;
    /**
     * Interface property definition for NO_INTERACTIVE
     *
     * @alias NO_INTERACT
     * @domain cli
     *
     *
     */
    NO_INTERACTIVE?: boolean;
    /**
     * Interface property definition for NODE_ENV
     *
     * @title MODE
     * @alias MODE
     *
     *
     */
    NODE_ENV: "development" | "test" | "production";
    /**
     * Interface property definition for ORG
     *
     * @title ORGANIZATION
     * @alias ORGANIZATION
     *
     *
     */
    ORG: string;
    /**
     * Interface property definition for ORGANIZATION
     *
     * @alias ORG
     *
     *
     */
    ORGANIZATION: string;
    /**
     * Interface property definition for OUTPUT_MODE
     *
     *
     *
     */
    OUTPUT_MODE?: "virtual" | "fs";
    /**
     * Interface property definition for PACKAGE_NAME
     *
     * @domain cli
     *
     *
     */
    PACKAGE_NAME?: string;
    /**
     * Interface property definition for PLATFORM
     *
     *
     *
     */
    PLATFORM: "node" | "neutral" | "browser";
    /**
     * Interface property definition for PROJECT
     *
     * @title ROOT
     * @alias ROOT
     * @domain cli
     *
     *
     */
    PROJECT?: string;
    /**
     * Interface property definition for ROOT
     *
     * @alias PROJECT
     * @domain cli
     *
     *
     */
    ROOT?: string;
    /**
     * Interface property definition for SCRIPT
     *
     * @domain cli
     *
     *
     */
    SCRIPT?: string | true;
    /**
     * Interface property definition for SENTRY_DSN
     *
     *
     *
     */
    SENTRY_DSN: string;
    /**
     * Interface property definition for STACKTRACE
     *
     *
     *
     */
    STACKTRACE: boolean;
    /**
     * Interface property definition for TEMP_DIR
     *
     * @title Temporary Directory
     *
     *
     */
    TEMP_DIR?: string;
    /**
     * Interface property definition for TEST
     *
     *
     *
     */
    TEST: boolean;
    /**
     * Interface property definition for VERBOSE
     *
     * @domain cli
     *
     *
     */
    VERBOSE?: boolean;
    /**
     * Interface property definition for VERSION
     *
     * @domain cli
     *
     *
     */
    VERSION?: boolean;
    /**
     * Interface property definition for AC_APPCIRCLE
     *
     * @readonly
     *
     *
     */
    readonly AC_APPCIRCLE?: string;
    /**
     * Interface property definition for AGENT_NAME
     *
     * @readonly
     *
     *
     */
    readonly AGENT_NAME?: string;
    /**
     * Interface property definition for AGOLA_GIT_REF
     *
     * @readonly
     *
     *
     */
    readonly AGOLA_GIT_REF?: string;
    /**
     * Interface property definition for APP_NAME
     *
     * @readonly
     *
     *
     */
    readonly APP_NAME: string;
    /**
     * Interface property definition for APP_VERSION
     *
     * @readonly
     *
     *
     */
    readonly APP_VERSION: string;
    /**
     * Interface property definition for APPCENTER_BUILD_ID
     *
     * @readonly
     *
     *
     */
    readonly APPCENTER_BUILD_ID?: string;
    /**
     * Interface property definition for APPDATA
     *
     * @readonly
     *
     *
     */
    readonly APPDATA?: string;
    /**
     * Interface property definition for APPVEYOR
     *
     * @readonly
     *
     *
     */
    readonly APPVEYOR?: string;
    /**
     * Interface property definition for bamboo_planKey
     *
     * @readonly
     *
     *
     */
    readonly bamboo_planKey?: string;
    /**
     * Interface property definition for BITBUCKET_COMMIT
     *
     * @readonly
     *
     *
     */
    readonly BITBUCKET_COMMIT?: string;
    /**
     * Interface property definition for BITRISE_IO
     *
     * @readonly
     *
     *
     */
    readonly BITRISE_IO?: string;
    /**
     * Interface property definition for BUDDY_WORKSPACE_ID
     *
     * @readonly
     *
     *
     */
    readonly BUDDY_WORKSPACE_ID?: string;
    /**
     * Interface property definition for BUILD_CHECKSUM
     *
     * @readonly
     *
     *
     */
    readonly BUILD_CHECKSUM: string;
    /**
     * Interface property definition for BUILD_ID
     *
     * @readonly
     *
     *
     */
    readonly BUILD_ID: string;
    /**
     * Interface property definition for BUILD_TIMESTAMP
     *
     * @readonly
     *
     *
     */
    readonly BUILD_TIMESTAMP: string;
    /**
     * Interface property definition for BUILDER_OUTPUT
     *
     * @readonly
     *
     *
     */
    readonly BUILDER_OUTPUT?: string;
    /**
     * Interface property definition for BUILDKITE
     *
     * @readonly
     *
     *
     */
    readonly BUILDKITE?: string;
    /**
     * Interface property definition for CF_BUILD_ID
     *
     * @readonly
     *
     *
     */
    readonly CF_BUILD_ID?: string;
    /**
     * Interface property definition for CI_NAME
     *
     * @readonly
     *
     *
     */
    readonly CI_NAME?: string;
    /**
     * Interface property definition for CI_XCODE_PROJECT
     *
     * @readonly
     *
     *
     */
    readonly CI_XCODE_PROJECT?: string;
    /**
     * Interface property definition for CIRCLECI
     *
     * @readonly
     *
     *
     */
    readonly CIRCLECI?: string;
    /**
     * Interface property definition for CIRRUS_CI
     *
     * @readonly
     *
     *
     */
    readonly CIRRUS_CI?: string;
    /**
     * Interface property definition for CM_BUILD_ID
     *
     * @readonly
     *
     *
     */
    readonly CM_BUILD_ID?: string;
    /**
     * Interface property definition for CODEBUILD
     *
     * @readonly
     *
     *
     */
    readonly CODEBUILD?: string;
    /**
     * Interface property definition for COLORTERM
     *
     * @readonly
     *
     *
     */
    readonly COLORTERM?: string;
    /**
     * Interface property definition for ConEmuTask
     *
     * @readonly
     *
     *
     */
    readonly ConEmuTask?: string;
    /**
     * Interface property definition for CURSOR_TRACE_ID
     *
     * @readonly
     *
     *
     */
    readonly CURSOR_TRACE_ID?: string;
    /**
     * Interface property definition for DRONE
     *
     * @readonly
     *
     *
     */
    readonly DRONE?: string;
    /**
     * Interface property definition for DSARI
     *
     * @readonly
     *
     *
     */
    readonly DSARI?: string;
    /**
     * Interface property definition for EARTHLY_CI
     *
     * @readonly
     *
     *
     */
    readonly EARTHLY_CI?: string;
    /**
     * Interface property definition for EAS_BUILD
     *
     * @readonly
     *
     *
     */
    readonly EAS_BUILD?: string;
    /**
     * Interface property definition for GERRIT_PROJECT
     *
     * @readonly
     *
     *
     */
    readonly GERRIT_PROJECT?: string;
    /**
     * Interface property definition for GITEA_ACTIONS
     *
     * @readonly
     *
     *
     */
    readonly GITEA_ACTIONS?: string;
    /**
     * Interface property definition for GITHUB_ACTIONS
     *
     * @readonly
     *
     *
     */
    readonly GITHUB_ACTIONS?: string;
    /**
     * Interface property definition for GITLAB_CI
     *
     * @readonly
     *
     *
     */
    readonly GITLAB_CI?: string;
    /**
     * Interface property definition for GOCD
     *
     * @readonly
     *
     *
     */
    readonly GOCD?: string;
    /**
     * Interface property definition for HARNESS_BUILD_ID
     *
     * @readonly
     *
     *
     */
    readonly HARNESS_BUILD_ID?: string;
    /**
     * Interface property definition for HUDSON
     *
     * @readonly
     *
     *
     */
    readonly HUDSON?: string;
    /**
     * Interface property definition for JENKINS_URL
     *
     * @readonly
     *
     *
     */
    readonly JENKINS_URL?: string;
    /**
     * Interface property definition for LAYERCI
     *
     * @readonly
     *
     *
     */
    readonly LAYERCI?: string;
    /**
     * Interface property definition for LOCALAPPDATA
     *
     * @readonly
     *
     *
     */
    readonly LOCALAPPDATA?: string;
    /**
     * Interface property definition for MAGNUM
     *
     * @readonly
     *
     *
     */
    readonly MAGNUM?: string;
    /**
     * Interface property definition for NETLIFY
     *
     * @readonly
     *
     *
     */
    readonly NETLIFY?: string;
    /**
     * Interface property definition for NEVERCODE
     *
     * @readonly
     *
     *
     */
    readonly NEVERCODE?: string;
    /**
     * Interface property definition for NOW_BUILDER
     *
     * @readonly
     *
     *
     */
    readonly NOW_BUILDER?: string;
    /**
     * Interface property definition for PROW_JOB_ID
     *
     * @readonly
     *
     *
     */
    readonly PROW_JOB_ID?: string;
    /**
     * Interface property definition for RELEASE_BUILD_ID
     *
     * @readonly
     *
     *
     */
    readonly RELEASE_BUILD_ID?: string;
    /**
     * Interface property definition for RELEASE_ID
     *
     * @readonly
     *
     *
     */
    readonly RELEASE_ID: string;
    /**
     * Interface property definition for RELEASE_TAG
     *
     * @readonly
     *
     *
     */
    readonly RELEASE_TAG: string;
    /**
     * Interface property definition for RENDER
     *
     * @readonly
     *
     *
     */
    readonly RENDER?: string;
    /**
     * Interface property definition for RUN_ID
     *
     * @readonly
     *
     *
     */
    readonly RUN_ID?: string;
    /**
     * Interface property definition for SAILCI
     *
     * @readonly
     *
     *
     */
    readonly SAILCI?: string;
    /**
     * Interface property definition for SCREWDRIVER
     *
     * @readonly
     *
     *
     */
    readonly SCREWDRIVER?: string;
    /**
     * Interface property definition for SEMAPHORE
     *
     * @readonly
     *
     *
     */
    readonly SEMAPHORE?: string;
    /**
     * Interface property definition for SOURCEHUT
     *
     * @readonly
     *
     *
     */
    readonly SOURCEHUT?: string;
    /**
     * Interface property definition for SPACESHIP_CI
     *
     * @readonly
     *
     *
     */
    readonly SPACESHIP_CI?: string;
    /**
     * Interface property definition for STORM_STACK_LOCAL
     *
     * @readonly
     *
     *
     */
    readonly STORM_STACK_LOCAL: boolean;
    /**
     * Interface property definition for STORM_STACK_SKIP_VERSION_CHECK
     *
     * @readonly
     *
     *
     */
    readonly STORM_STACK_SKIP_VERSION_CHECK?: boolean;
    /**
     * Interface property definition for STRIDER
     *
     * @readonly
     *
     *
     */
    readonly STRIDER?: string;
    /**
     * Interface property definition for TASK_ID
     *
     * @readonly
     *
     *
     */
    readonly TASK_ID?: string;
    /**
     * Interface property definition for TEAMCITY_VERSION
     *
     * @readonly
     *
     *
     */
    readonly TEAMCITY_VERSION?: string;
    /**
     * Interface property definition for TERM
     *
     * @readonly
     *
     *
     */
    readonly TERM?: string;
    /**
     * Interface property definition for TERM_PROGRAM
     *
     * @readonly
     *
     *
     */
    readonly TERM_PROGRAM?: string;
    /**
     * Interface property definition for TERM_PROGRAM_VERSION
     *
     * @readonly
     *
     *
     */
    readonly TERM_PROGRAM_VERSION?: string;
    /**
     * Interface property definition for TERMINAL_EMULATOR
     *
     * @readonly
     *
     *
     */
    readonly TERMINAL_EMULATOR?: string;
    /**
     * Interface property definition for TERMINUS_SUBLIME
     *
     * @readonly
     *
     *
     */
    readonly TERMINUS_SUBLIME?: boolean;
    /**
     * Interface property definition for TF_BUILD
     *
     * @readonly
     *
     *
     */
    readonly TF_BUILD?: string;
    /**
     * Interface property definition for TRAVIS
     *
     * @readonly
     *
     *
     */
    readonly TRAVIS?: string;
    /**
     * Interface property definition for VELA
     *
     * @readonly
     *
     *
     */
    readonly VELA?: string;
    /**
     * Interface property definition for VTE_VERSION
     *
     * @readonly
     *
     *
     */
    readonly VTE_VERSION?: string;
    /**
     * Interface property definition for WT_SESSION
     *
     * @readonly
     *
     *
     */
    readonly WT_SESSION?: string;
    /**
     * Interface property definition for XCS
     *
     * @readonly
     *
     *
     */
    readonly XCS?: string;
    /**
     * Interface property definition for XDG_CACHE_HOME
     *
     * @readonly
     *
     *
     */
    readonly XDG_CACHE_HOME?: string;
    /**
     * Interface property definition for XDG_CONFIG_HOME
     *
     * @readonly
     *
     *
     */
    readonly XDG_CONFIG_HOME?: string;
    /**
     * Interface property definition for XDG_DATA_HOME
     *
     * @readonly
     *
     *
     */
    readonly XDG_DATA_HOME?: string;
    /**
     * Interface property definition for XDG_RUNTIME_DIR
     *
     * @readonly
     *
     *
     */
    readonly XDG_RUNTIME_DIR?: string;
    /**
     * Interface property definition for XDG_STATE_HOME
     *
     * @readonly
     *
     *
     */
    readonly XDG_STATE_HOME?: string;
  }
  export type StormEnv = {
    [Key in keyof StormEnvBase as
      | Key
      | `NEXT_${Key}`
      | `ONE_${Key}`
      | `STORM_STACK_${Key}`
      | `STORM_${Key}`
      | `VERCEL_${Key}`
      | `VITE_${Key}`]: StormEnvBase[Key];
  };
  /**
   * The initial environment configuration state for the Storm Stack project.
   *
   * @title Initial Env
   *
   *
   */
  export const initialEnv: Partial<StormEnvInterface>;
  /**
   * The environment configuration serializer for the Storm Stack application.
   *
   * @see https://deepkit.io/docs/serialization/serializers
   *
   * @see https://github.com/marcj/untitled-code/blob/master/packages/type/src/serializer.ts#L1918
   *
   * @remarks
   * This serializer is used to serialize and deserialize the Storm Stack environment configuration.
   */
  export class EnvSerializer extends Serializer {
    constructor();
  }
  /**
   * Serialize a environment configuration object to JSON data objects (not a JSON string).
   *
   * @remarks
   * The resulting JSON object can be stringified using JSON.stringify().
   * @example
   * ```ts
   * const json = serializeEnv(env);
   * ```
   * @throws ValidationError when serialization or validation fails.
   *
   */
  export const serializeEnv: import("@deepkit/type").SerializeFunction<StormEnvBase>;
  /**
   * Deserialize a environment configuration object from JSON data objects to JavaScript objects, without running any validators.
   *
   * @remarks
   * Types that are already correct will be used as-is.
   * @example
   * ```ts
   * const env = deserializeEnv(json);
   * ```
   * @throws ValidationError when deserialization fails.
   *
   */
  export const deserializeEnv: import("@deepkit/type").SerializeFunction<
    any,
    StormEnvBase
  >;
  /**
   * Initializes the Storm Stack environment configuration module.
   *
   * @remarks
   * This function initializes the Storm Stack environment configuration object.
   * @param environmentConfig - The dynamic/runtime configuration - this could include the current environment variables or any other environment-specific
   *   settings provided by the runtime.
   * @returns The initialized Storm Stack configuration object.
   *
   */
  export function createEnv(environmentConfig?: Partial<StormEnv>): StormEnv;
  export const env: StormEnv;
  export type StormEnvBase = any[];
  export type StormEnv = any[];
}

declare module "storm:error" {
  /**
   * The Storm Stack error module provides a custom error class and utility functions to support error handling
   *
   * @module storm:error
   */

  /**
   * Get the default error code for the given error type.
   *
   * @param _ - The error type.
   * @returns The default error code.
   */
  export function getDefaultCode(_: ErrorType): number;
  /**
   * Get the default error name for the given error type.
   *
   * @param type - The error type.
   * @returns The default error name.
   */
  export function getDefaultErrorName(type: ErrorType): string;
  /**
   * Checks if `value` is an {@link Error}, `EvalError`, `RangeError`, `ReferenceError`,
   * `SyntaxError`, `TypeError`, or `URIError` object.
   *
   * @example
   * ```typescript
   * isError(new Error)
   * // => true
   *
   * isError(Error)
   * // => false
   * ```
   *
   * @param value - The value to check.
   * @returns Returns `true` if `value` is an error object, else `false`.
   */
  export function isError(value: unknown): value is Error;
  /**
   * Type-check to determine if `value` is a {@link StormError} object
   *
   * @param value - the object to check
   * @returns Returns `true` if `value` is a {@link StormError} object, else `false`.
   */
  export function isStormError(value: unknown): value is StormError;
  /**
   * Creates a new {@link StormError} instance from an unknown cause value
   *
   * @param cause - The cause of the error in an unknown type
   * @param type - The type of the error
   * @param data - Additional data to be passed with the error
   * @returns The cause of the error in a {@link StormError} object
   */
  export function createStormError(
    cause: unknown,
    type?: ErrorType,
    data?: any
  ): StormError;
  /**
   * A wrapper around the base JavaScript Error class to be used in Storm Stack applications
   */
  export class StormError extends Error implements StormErrorInterface {
    readonly [Symbol.name]: string;
    /**
     * Internal function to inherit the {@link Error} prototype.
     *
     * @internal
     */
    __proto__: Error;
    /**
     * The error code
     */
    code: number;
    /**
     * The error message parameters
     */
    params: string[];
    /**
     * The type of error event
     */
    type: ErrorType;
    /**
     * Additional data to be passed with the error
     */
    data?: any;
    /**
     * The string tag for the error
     */
    readonly [Symbol.toStringTag]: string;
    /**
     * The StormError constructor
     *
     * @param options - The options for the error
     * @param type - The type of error
     */
    constructor(optionsOrMessage: StormErrorOptions | string, type?: ErrorType);
    /**
     * A string that uniquely identifies the error
     *
     * @remarks
     * The `id` property is a string that uniquely identifies the error. This string is generated based off the error type and code.
     *
     * @example
     * ```typescript
     * const error = new StormError({ code: 110 }, "custom");
     * console.log(error.id); // "CUSTOM-110"
     * ```
     *
     */
    get id(): string;
    /**
     * The cause of the error
     */
    get cause(): StormErrorInterface | undefined;
    /**
     * The cause of the error
     */
    set cause(cause: unknown);
    /**
     * The parsed stack traces from the raw stack string
     *
     * @returns The parsed stack traces
     */
    get stacktrace(): ParsedStacktrace[];
    /**
     * Prints a displayable/formatted stack trace
     *
     * @returns The stack trace string
     */
    get stack(): string;
    /**
     * Store the stack trace
     */
    set stack(stack: string);
    /**
     * The unformatted stack trace
     *
     * @returns The stack trace string
     */
    get originalStack(): string;
    /**
     * The unformatted stack trace
     *
     * @returns The stack trace string
     */
    set originalStack(stack: string);
    /**
     * A URL to a page that displays the error message details
     */
    get url(): string;
    /**
     * Prints the display error message string
     *
     * @param includeData - Whether to include the data in the error message
     * @returns The display error message string
     */
    toDisplay(includeData?: boolean): string;
    /**
     * Prints the error message and stack trace
     *
     * @param stacktrace - Whether to include the stack trace in the error message
     * @param includeData - Whether to include the data in the error message
     * @returns The error message and stack trace string
     */
    toString(stacktrace?: boolean, includeData?: boolean): string;
    /**
     * Converts a StormError object to a string.
     */
    [Symbol.toPrimitive](hint: "default"): string;
    /**
     * Converts a StormError object to a string.
     */
    [Symbol.toPrimitive](hint: "string"): string;
    /**
     * Converts a StormError object to a number.
     */
    [Symbol.toPrimitive](hint: "number"): number;
  }
}

declare module "storm:log/console-info" {
  export const DATE_TIME_FORMAT: Intl.DateTimeFormat;
  /**
   * Creates a new [console](https://developer.mozilla.org/en-US/docs/Web/API/console) logging adapter.
   *
   * @returns The created logging adapter.
   */
  function createAdapter(): LogAdapter;
  export default createAdapter;
}

declare module "storm:id" {
  /**
   * The ID module provides a set of utilities for generating unique identifiers.
   *
   * @module storm:id
   */
  /**
   * Generate a random string
   *
   * @param array - The array to fill with random values
   * @returns The array filled with random values
   */
  export function getRandom(array: Uint8Array): Uint8Array<ArrayBufferLike>;
  /**
   * A platform agnostic version of the [nanoid](https://github.com/ai/nanoid) package with some modifications.
   *
   * @param size - The size of the string to generate. Defaults to 21 if not provided.
   * @returns A unique identifier following the nanoid format
   */
  export function uniqueId(size?: number | undefined): string;
  /**
   * A platform agnostic version of the [nanoid](https://github.com/ai/nanoid) package with some modifications.
   *
   * @param prefix - The prefix to use for the unique identifier
   * @param size - The size of the string to generate. Defaults to 21 if not provided.
   * @returns A unique identifier following the nanoid format
   */
  export function uniqueId(prefix?: string, size?: number | undefined): string;
}

declare module "storm:meta" {
  /**
   * This module provides the runtime metadata information for the Storm Stack application.
   *
   * @module storm:meta
   */

  /**
   * Checks if a specific flag is present in the command line arguments.
   *
   * @see {@link https://github.com/sindresorhus/has-flag/blob/main/index.js}
   *
   * @param flag - The flag to check for, e.g., "color", "no-color".
   * @param argv - The command line arguments to check against. Defaults to global Deno args or process args.
   * @returns True if the flag is present, false otherwise.
   */
  export function hasFlag(flag: string, argv?: string[]): boolean;
  /**
   * Options for getting the color support level.
   */
  export type GetColorSupportLevelOptions = {
    isTTY?: boolean;
    sniffFlags?: boolean;
  };
  /**
   * Determines the color support level of the terminal.
   *
   * @param stream - The stream to check availability of (e.g., process.stdout).
   * @param options - Options for the color detection.
   * @returns The color support level (0 = no color, 1 = basic, 2 = 256 colors, 3 = true color).
   */
  export function getColorSupportLevel(
    stream: NodeJS.WriteStream & {
      fd: 1 | 2;
    },
    options?: GetColorSupportLevelOptions
  ):
    | false
    | 0
    | 2
    | 3
    | {
        level: number;
        hasBasic: boolean;
        has256: boolean;
        has16m: boolean;
      };
  /**
   * Generate a list of variables that describe the current application's runtime metadata.
   *
   * @returns An object containing the runtime metadata details.
   */
  export function createMeta(): StormNodeMeta;
  export type GetColorSupportLevelOptions = any[];
}

declare module "storm:request" {
  /**
   * The request module provides a base request class used by the Storm Stack runtime.
   *
   * @module storm:request
   */

  /**
   * A base request class used by the Storm Stack runtime.
   */
  export class StormRequest<
    TData extends Record<string, any> = Record<string, any>
  > implements StormRequestInterface<TData>
  {
    /**
     * The request identifier.
     */
    readonly id: string;
    /**
     * The headers associated with the request.
     */
    readonly headers: Record<string, any>;
    /**
     * The request created timestamp.
     */
    readonly timestamp: number;
    /**
     * The request data.
     */
    readonly data: TData;
    /**
     * Create a new request object.
     *
     * @param data - The request input data.
     */
    constructor(data: TData);
    /**
     * Merges the given data into the request.
     *
     * @param data - The data to merge into the request.
     */
    merge(data: Partial<TData>): void;
  }
}

declare module "storm:response" {
  /**
   * The response module provides the {@link StormResponse} class, which is used to represent the response of a request execution.
   *
   * @module storm:response
   */

  /**
   * A base response class used by the Storm Stack runtime.
   */
  export class StormResponse<TData extends any | StormError = any | StormError>
    implements StormResponseInterface<TData>
  {
    /**
     * Create a new response.
     *
     * @remarks
     * **IMPORTANT:** This function uses the storm context object - never use this function outside of the context wrapper/tree since the context will not be available.
     *
     * @param data - The response data
     */
    static create<TData>(data: TData): StormResponse<TData>;
    /**
     * The request headers.
     */
    readonly headers: Record<string, any>;
    /**
     * The response data.
     */
    data: TData;
    /**
     * The request identifier.
     */
    readonly requestId: string;
    /**
     * The response created timestamp.
     */
    readonly timestamp: number;
    /**
     * An indicator of whether the response was successful.
     */
    get success(): boolean;
    /**
     * Create a new response.
     *
     * @param requestId - The request identifier.
     * @param meta - The current context's metadata.
     * @param data - The response data
     */
    constructor(requestId: string, data: TData);
  }
}

declare module "storm:storage/crash-reports" {
  function createAdapter(): StorageAdapter;
  export default createAdapter;
}

declare module "storm:storage/storage" {
  function createAdapter(): StorageAdapter;
  export default createAdapter;
}

declare module "storm:storage" {
  /**
   * The storage module provides a unified storage interface for the Storm Stack runtime.
   *
   * @module storm:storage
   */

  /**
   * Creates a new storage instance.
   *
   * @remarks
   * This function initializes the storage with all configured adapters.
   *
   * @returns The {@link StormStorageInterface} storage instance with each storage adapter loaded into a slice of it's total state.
   */
  export function createStorage(): StormStorageInterface;
}

declare module "storm:context" {
  /**
   * This module provides the Storm Stack context and a hook to access it in the application.
   *
   * @module storm:context
   */

  /**
   * The global Storm context for the current application.
   *
   * @remarks
   * This interface extends the base Storm context interface with additional properties specific to the NodeJs application.
   */
  export interface StormContext extends StormContextInterface {
    /**
     * The request object for the current Storm Stack application.
     */
    request: StormRequest;
    /**
     * The root application logger for the Storm Stack application.
     */
    log: import("@storm-stack/core/runtime-types/shared/log").StormLogInterface;
    /**
     * The {@link StormStorageInterface} instance used by the Storm Stack application.
     */
    storage: import("@storm-stack/core/runtime-types/shared/storage").StormStorageInterface;
    /**
     * The environment variables for the Storm application.
     */
    env: StormEnv & Record<string, any>;
    /**
     * Environment/runtime specific application data.
     */
    meta: import("@storm-stack/core/runtime-types/node/meta").StormNodeMeta;
    /**
     * A set of disposable resources to clean up when the context is no longer needed.
     */
    readonly disposables: Set<Disposable>;
    /**
     * A set of asynchronous disposable resources to clean up when the context is no longer needed.
     */
    readonly asyncDisposables: Set<AsyncDisposable>;
  }
  /**
   * Get the Storm context for the current application.
   *
   * @param options - The options to use when getting the context.
   * @returns The Storm context for the current application.
   * @throws If the Storm context is not available.
   */
  export function useStorm(options?: ContextOptions): StormContext;
  /**
   * Wrap an application entry point with the necessary context and error handling.
   *
   * @param handler - The handler function for the application.
   * @returns A function that takes an request and returns a response or a promise of a response.
   */
  export function withContext<
    TInput extends Record<string, any> = Record<string, any>,
    TOutput = any
  >(
    handler: HandlerFunction<TInput, TOutput>
  ): (input: TInput) => Promise<StormResponse<TOutput | StormError>>;
  export type StormContext = any[];
}

declare module "storm:log/sentry-error" {
  /**
   * Creates a new [Sentry](https://sentry.io/) logging adapter.
   *
   * @returns The created {@link LogAdapter}.
   */
  function createAdapter(): LogAdapter;
  export default createAdapter;
}

declare module "storm:log/storage-info" {
  /**
   * Get a text formatter with the specified options.  Although it's flexible
   * enough to create a custom formatter, if you want more control, you can
   * create a custom formatter that satisfies the {@link TextFormatter} type
   * instead.
   *
   * For more information on the options, see {@link TextFormatterOptions}.
   *
   * By default, the formatter formats log records as follows:
   *
   * ```
   * 2023-11-14 22:13:20.000 +00:00 [INFO] Hello, world!
   * ```
   * @param options - The options for the text formatter.
   * @returns The text formatter.
   */
  export function getTextFormatter(
    options?: TextFormatterOptions
  ): TextFormatter;
  /**
   * Creates a new [Unstorage](https://unstorage.dev/) logging adapter.
   *
   * @returns The created logging adapter.
   */
  function createAdapter(): LogAdapter;
  export default createAdapter;
}

declare module "storm:log" {
  /**
   * The log module provides a unified logging interface for Storm Stack applications.
   *
   * @module storm:log
   */

  /**
   * Returns a filter that accepts log records with the specified level.
   *
   * @param level - The level to filter by. If `null`, the filter will reject all records.
   * @returns The filter.
   */
  export function getLevelFilter(level: LogLevel | null): LogFilter;
  /**
   * Parses a {@link LogLevel | log level} from a string.
   *
   * @param level - The {@link LogLevel | log level} as a string. This is case-insensitive.
   * @returns The {@link LogLevel | log level}.
   */
  export function parseLogLevel(level: string): LogLevel;
  /**
   * Checks if a string is a valid {@link LogLevel | log level}. This function can be used as a type guard to narrow the type of a string to a {@link LogLevel}.
   *
   * @param level - The {@link LogLevel | log level} as a string. This is case-sensitive.
   * @returns `true` if the string is a valid {@link LogLevel | log level}.
   */
  export function isLogLevel(level: string): level is LogLevel;
  /**
   * The StormLog class that's used for writing logs during Storm Stack applications.
   */
  export class StormLog implements StormLogInterface {
    /**
     * The list of filters applied to log records.
     *
     * @remarks
     * Filters are functions that take a {@link LogRecord} and return a boolean indicating whether the record should be logged. You can add custom filters to this list to control which log records are emitted.
     */
    readonly filters: LogFilter[];
    /**
     * The lowest log level that will be logged by this logger.
     *
     * @remarks
     * This is set to the value of the `LOG_LEVEL` configuration parameter.
     *
     * @defaultValue "info"
     */
    lowestLogLevel: LogLevel | null;
    /**
     * Create a new StormLog instance.
     *
     * @remarks
     * This constructor initializes the logger with an empty filter list and sets the lowest log level to `null`.
     */
    constructor();
    /**
     * Generates a new {@link StormLogCtx} instance and adds properties to the logger context.
     *
     * @remarks
     * This method allows you to create a new logger context with additional properties. The properties will be merged with the existing properties in the logger context.
     *
     * @param properties - The properties to add to the logger context.
     * @returns A new {@link StormLogCtx} instance with the merged properties.
     */
    with(properties: Record<string, unknown>): StormLogInterface;
    /**
     * Filters log records based on the logger's filters.
     *
     * @param record - The log record to filter.
     * @returns Whether the log record passes all filters.
     */
    filter(record: LogRecord): boolean;
    /**
     * Returns an async iterable of log adapters that match the specified log level.
     *
     * @param level - The log level to filter adapters by.
     * @returns An iterable of log adapters that match the specified log level.
     */
    adapters(level?: LogLevel): Iterable<LogAdapter>;
    /**
     * Emits a log record to all registered adapters that match the record's log level.
     *
     * @param record - The log record to emit.
     * @param bypassAdapters - A set of adapters to bypass when emitting the record.
     */
    emit(record: LogRecord, bypassAdapters?: Set<LogAdapter>): void;
    /**
     * Logs a message at the specified log level.
     *
     * @param level - The log level to use.
     * @param rawMessage - The raw message to log.
     * @param properties - The properties to include with the log message.
     * @param bypassAdapters - A set of adapters to bypass when emitting the log message.
     */
    log(
      level: LogLevel,
      rawMessage: string,
      properties: Record<string, unknown> | (() => Record<string, unknown>),
      bypassAdapters?: Set<LogAdapter>
    ): void;
    /**
     * Logs a message lazily at the specified log level.
     *
     * @param level - The log level to use.
     * @param callback - A callback function that returns the message to log.
     * @param properties - The properties to include with the log message.
     */
    logLazily(
      level: LogLevel,
      callback: LogCallback,
      properties?: Record<string, unknown>
    ): void;
    /**
     * Logs a message template at the specified log level.
     *
     * @param level - The log level to use.
     * @param messageTemplate - The message template to log.
     * @param values - The values to interpolate into the message template.
     * @param properties - The properties to include with the log message.
     */
    logTemplate(
      level: LogLevel,
      messageTemplate: TemplateStringsArray,
      values: unknown[],
      properties?: Record<string, unknown>
    ): void;
    /**
     * Logs a debug message.
     *
     * @param message - The message to log. Can be a string, a template string, or a callback function that returns the message.
     * @param values - The values to interpolate into the message template.
     */
    debug(
      message: TemplateStringsArray | string | LogCallback,
      ...values: unknown[]
    ): void;
    /**
     * Logs an info message.
     *
     * @param message - The message to log. Can be a string, a template string, or a callback function that returns the message.
     * @param values - The values to interpolate into the message template.
     */
    info(
      message: TemplateStringsArray | string | LogCallback,
      ...values: unknown[]
    ): void;
    /**
     * Logs a warning message.
     *
     * @param message - The message to log. Can be a string, a template string, or a callback function that returns the message.
     * @param values - The values to interpolate into the message template.
     */
    warn(
      message: TemplateStringsArray | string | LogCallback,
      ...values: unknown[]
    ): void;
    /**
     * Logs an error message.
     *
     * @param message - The message to log. Can be a string, a template string, or a callback function that returns the message.
     * @param values - The values to interpolate into the message template.
     */
    error(
      message: TemplateStringsArray | string | LogCallback | Error,
      ...values: unknown[]
    ): void;
    /**
     * Logs a fatal message.
     *
     * @param message - The message to log. Can be a string, a template string, or a callback function that returns the message.
     * @param values - The values to interpolate into the message template.
     */
    fatal(
      message: TemplateStringsArray | string | LogCallback | Error,
      ...values: unknown[]
    ): void;
    protected getStore(): Record<string, unknown>;
  }
}

declare module "storm:event" {
  /**
   * The Storm Stack event module.
   *
   * @module storm:event
   */

  /**
   * A base event class used by the Storm Stack runtime.
   */
  export class StormEvent<
    TEventType extends string = string,
    TData extends Record<string, any> = Record<string, any>
  > implements StormEventInterface<TEventType, TData>
  {
    /**
     * The event timestamp.
     */
    readonly timestamp: number;
    /**
     * The event identifier.
     */
    readonly id: string;
    /**
     * The event data object.
     */
    readonly data: TData;
    /**
     * The request identifier.
     */
    readonly requestId: string;
    /**
     * The event type.
     */
    readonly type: TEventType;
    /**
     * The event version.
     */
    readonly version: string;
    /**
     * The event label.
     *
     * @remarks
     * The label format is "{type}-v{version}"
     */
    get label(): string;
    /**
     * Creates a new event.
     *
     * @param type - The event type.
     * @param data - The event data.
     */
    constructor(type: TEventType, data: TData);
  }
}

declare module "storm:date" {
  /**
   * The Storm Stack date module provides utility functions for date manipulation and formatting
   *
   * @module storm:date
   */

  export const formats: DateFormats;
  export const locale: Locale;
  /**
   * Creates a date object using the provided value.
   *
   * @remarks
   * This function creates a date object using the provided value. If the value is `null`, it returns `null`. If the value is `undefined`, it returns the current date. If the value is a string, it parses the string as a date. If the value is a number, it treats it as a timestamp. If the value is a date object, it returns the date object.
   *
   * @example
   * ```ts
   * import { createDate } from "storm:date";
   *
   * const date = createDate("2023-10-01");
   * console.log(date.format("YYYY-MM-DD")); // Outputs: 2023-10-01
   * ```
   *
   * @param value - The value to create the date object from.
   * @returns A date object or `null` if the value is `null`.
   */
  export function createDate<
    TArg = undefined,
    TResultingDate = TArg extends null
      ? null
      : TArg extends undefined
        ? Date
        : Date | null
  >(value?: TArg): TResultingDate;
  export const type = "date-fns";
  export function is12HourCycleInCurrentLocale(): boolean;
  export function getFormatHelperText(format: string): string;
  export function parseISO(isoString: string): Date;
  export function toISO(value: Date): string;
  export function getCurrentLocaleCode(): string;
  export function addSeconds(value: Date, count: number): Date;
  export function addMinutes(value: Date, count: number): Date;
  export function addHours(value: Date, count: number): Date;
  export function addDays(value: Date, count: number): Date;
  export function addWeeks(value: Date, count: number): Date;
  export function addMonths(value: Date, count: number): Date;
  export function addYears(value: Date, count: number): Date;
  export function isValid(value: any): boolean;
  export function getDiff(
    value: Date,
    comparing: Date | string,
    unit?: TimeUnit
  ): number;
  export function isAfter(value: Date, comparing: Date): boolean;
  export function isBefore(value: Date, comparing: Date): boolean;
  export function startOfDay(value: Date): Date;
  export function endOfDay(value: Date): Date;
  export function getHours(value: Date): number;
  export function setHours(value: Date, count: number): Date;
  export function setMinutes(value: Date, count: number): Date;
  export function getSeconds(value: Date): number;
  export function setSeconds(value: Date, count: number): Date;
  export function isSameDay(value: Date, comparing: Date): boolean;
  export function isSameMonth(value: Date, comparing: Date): boolean;
  export function isSameYear(value: Date, comparing: Date): boolean;
  export function isSameHour(value: Date, comparing: Date): boolean;
  export function startOfYear(value: Date): Date;
  export function endOfYear(value: Date): Date;
  export function startOfMonth(value: Date): Date;
  export function endOfMonth(value: Date): Date;
  export function startOfWeek(value: Date): Date;
  export function endOfWeek(value: Date): Date;
  export function getYear(value: Date): number;
  export function setYear(value: Date, count: number): Date;
  export function toJsDate(value: Date): Date;
  export function parse(value: string, formatString: string): Date | null;
  export function format(date: Date, formatKey: keyof DateFormats): string;
  export function formatByString(date: Date, formatString: string): string;
  export function isEqual(date: any, comparing: any): boolean;
  export function isNull(date: Date): date is never;
  export function isAfterDay(date: Date, value: Date): boolean;
  export function isBeforeDay(date: Date, value: Date): boolean;
  export function isBeforeYear(date: Date, value: Date): boolean;
  export function isBeforeMonth(value: Date, comparing: Date): boolean;
  export function isAfterMonth(value: Date, comparing: Date): boolean;
  export function isAfterYear(date: Date, value: Date): boolean;
  export function isWithinRange(
    date: Date,
    [start, end]: [Date, Date]
  ): boolean;
  export function formatNumber(numberToFormat: string): string;
  export function getMinutes(date: Date): number;
  export function getDate(date: Date): number;
  export function setDate(date: Date, count: number): Date;
  export function getWeek(date: Date): number;
  export function getMonth(date: Date): number;
  export function getDaysInMonth(date: Date): number;
  export function setMonth(date: Date, count: number): Date;
  export function getMeridiemText(meridiem: "am" | "pm"): "AM" | "PM";
  export function getNextMonth(date: Date): Date;
  export function getPreviousMonth(date: Date): Date;
  export function getMonthArray(date: Date): Date[];
  export function mergeDateAndTime(date: Date, time: Date): Date;
  export function getWeekdays(): string[];
  export function getWeekArray(date: Date): Date[][];
  export function getYearRange(start: Date, end: Date): Date[];
}

declare module "storm:cli" {
  export type CLIRequestData = {
    argv: string[];
  };
  export type ColorName =
    | "reset"
    | "bold"
    | "dim"
    | "italic"
    | "underline"
    | "overline"
    | "inverse"
    | "hidden"
    | "strikethrough"
    | "black"
    | "red"
    | "green"
    | "yellow"
    | "blue"
    | "magenta"
    | "cyan"
    | "white"
    | "blackBright"
    | "gray"
    | "grey"
    | "redBright"
    | "greenBright"
    | "yellowBright"
    | "blueBright"
    | "magentaBright"
    | "cyanBright"
    | "whiteBright"
    | "bgBlack"
    | "bgRed"
    | "bgGreen"
    | "bgYellow"
    | "bgBlue"
    | "bgMagenta"
    | "bgCyan"
    | "bgWhite"
    | "bgBlackBright"
    | "bgGray"
    | "bgGrey"
    | "bgRedBright"
    | "bgGreenBright"
    | "bgYellowBright"
    | "bgBlueBright"
    | "bgMagentaBright"
    | "bgCyanBright"
    | "bgWhiteBright"
    | "background"
    | "bgBackground"
    | "foreground"
    | "bgForeground"
    | "brand"
    | "bgBrand"
    | "alternate"
    | "bgAlternate"
    | "help"
    | "bgHelp"
    | "success"
    | "bgSuccess"
    | "info"
    | "bgInfo"
    | "warning"
    | "bgWarning"
    | "danger"
    | "bgDanger"
    | "fatal"
    | "bgFatal"
    | "link"
    | "bgLink"
    | "positive"
    | "bgPositive"
    | "negative"
    | "bgNegative";
  /**
   * An object containing functions for coloring text. Each function corresponds to a terminal color. See {@link ColorName} for available colors.
   */
  export const colors: Record<ColorName, (text: string | number) => string>;
  /**
   * Gets a color function by name, with an option for a fallback color if the requested color is not found.
   *
   * @param color - The name of the color function to get. See {@link ColorName}.
   * @param fallback - The name of the fallback color function if the requested color is not found. See {@link ColorName}.
   * @returns The color function that corresponds to the requested color, or the fallback color function.
   */
  export function getColor(
    color: ColorName,
    fallback?: ColorName
  ): (text: string | number) => string;
  /**
   * Formats a message for display in the CLI.
   *
   * @param text - The message text to format.
   * @param color - The color to use for the message (default: "brand").
   * @param title - The title to use for the message (default: "Message").
   * @param icon - An optional icon to display with the message.
   * @returns The formatted message string.
   */
  export function formatMessage(
    text: string,
    color?: ColorName,
    title?: string,
    icon?: string,
    stretch?: boolean
  ): string;
  /**
   * Shows a fatal error message in the CLI.
   *
   * @param details - The fatal error details to display.
   */
  export function showFatal(details: string | Error): void;
  /**
   * Shows an error message in the CLI.
   *
   * @param details - The error details to display.
   */
  export function showError(details: string | Error): void;
  /**
   * Shows a warning message in the CLI.
   *
   * @param details - The warning details to display.
   */
  export function showWarning(text: string): void;
  /**
   * Shows a info message in the CLI.
   *
   * @param details - The info details to display.
   */
  export function showInfo(text: string): void;
  /**
   * Shows a help message in the CLI.
   *
   * @param details - The help details to display.
   */
  export function showHelp(text: string): void;
  /**
   * Shows a success message in the CLI.
   *
   * @param details - The success details to display.
   */
  export function showSuccess(text: string): void;
  type LinkOptions = {
    /**
     * Whether to use colored text for the link.
     *
     * @defaultValue "link"
     */
    color?: ColorName | false;
    /**
     * The target for the link. Can be either "stdout" or "stderr".
     *
     * @defaultValue "stdout"
     */
    target?: "stdout" | "stderr";
    /**
     * A fallback function to handle the link in environments that do not support it.
     */
    fallback?: (url: string, text?: string) => string;
  };
  /**
   * Create a link to a URL in the console.
   *
   * @param url - The URL to link to.
   * @param text - The text to display for the link. If not provided, the URL will be used as the text.
   * @param options - Options to use when formatting the link.
   * @returns A terminal link
   */
  export function link(
    url: string,
    text?: string,
    options?: LinkOptions
  ): string;
  /**
   * Strips ANSI escape codes from a string.
   *
   * @param text - The string to strip ANSI codes from.
   * @returns The string without ANSI codes.
   */
  export function stripAnsi(text: string): string;
  /**
   * Renders a CLI banner with the specified title.
   *
   * @param title - The title to display in the banner.
   * @param description - The description to display in the banner.
   * @returns The rendered banner as a string.
   *
   * @internal
   */
  export function renderBanner(title: string, description: string): string;
  /**
   * Renders a CLI footer with the application details
   *
   * @param title - The title to display in the footer.
   * @param description - The description to display in the footer.
   * @returns The rendered footer as a string.
   *
   * @internal
   */
  export function renderFooter(): string;
  interface SelectOption {
    label: string;
    value: string;
    hint?: string;
  }
  const CANCEL_SYMBOL: unique symbol;
  interface PromptCommonOptions {
    /**
     * Specify how to handle a cancelled prompt (e.g. by pressing Ctrl+C).
     *
     * @remarks
     * The list of valid cancel strategies include:
     * - `"default"` - Resolve the promise with the `default` value or `initial` value.
     * - `"undefined`" - Resolve the promise with `undefined`.
     * - `"null"` - Resolve the promise with `null`.
     * - `"symbol"` - Resolve the promise with a symbol `Symbol.for("cancel")`.
     * - `"reject"`  - Reject the promise with an error.
     *
     * @defaultValue "default"
     */
    cancel?: "reject" | "default" | "undefined" | "null" | "symbol";
  }
  export type TextPromptOptions = PromptCommonOptions & {
    /**
     * Specifies the prompt type as text.
     *
     * @defaultValue "text"
     */
    type?: "text";
    /**
     * The default text value.
     */
    default?: string;
    /**
     * A placeholder text displayed in the prompt.
     */
    placeholder?: string;
    /**
     * The initial text value.
     */
    initial?: string;
  };
  export type ConfirmPromptOptions = PromptCommonOptions & {
    /**
     * Specifies the prompt type as confirm.
     */
    type: "confirm";
    /**
     * The initial value for the confirm prompt.
     */
    initial?: boolean;
  };
  export type SelectPromptOptions = PromptCommonOptions & {
    /**
     * Specifies the prompt type as select.
     */
    type: "select";
    /**
     * The initial value for the select prompt.
     */
    initial?: string;
    /**
     * The options to select from. See {@link SelectOption}.
     */
    options: (string | SelectOption)[];
  };
  export type MultiSelectPromptOptions = PromptCommonOptions & {
    /**
     * Specifies the prompt type as multiselect.
     */
    type: "multiselect";
    /**
     * The options to select from. See {@link SelectOption}.
     */
    initial?: string[];
    /**
     * The options to select from. See {@link SelectOption}.
     */
    options: (string | SelectOption)[];
    /**
     * Whether the prompt requires at least one selection.
     */
    required?: boolean;
  };
  /**
   * Defines a combined type for all prompt options.
   */
  export type PromptOptions =
    | TextPromptOptions
    | ConfirmPromptOptions
    | SelectPromptOptions
    | MultiSelectPromptOptions;
  type inferPromptReturnType<T extends PromptOptions> =
    T extends TextPromptOptions
      ? string
      : T extends ConfirmPromptOptions
        ? boolean
        : T extends SelectPromptOptions
          ? T["options"][number] extends SelectOption
            ? T["options"][number]["value"]
            : T["options"][number]
          : T extends MultiSelectPromptOptions
            ? T["options"]
            : unknown;
  type inferPromptCancelReturnType<T extends PromptOptions> = T extends {
    cancel: "reject";
  }
    ? never
    : T extends {
          cancel: "default";
        }
      ? inferPromptReturnType<T>
      : T extends {
            cancel: "undefined";
          }
        ? undefined
        : T extends {
              cancel: "null";
            }
          ? null
          : T extends {
                cancel: "symbol";
              }
            ? typeof CANCEL_SYMBOL
            : inferPromptReturnType<T>;
  /**
   * Asynchronously prompts the user for input based on specified options.
   * Supports text, confirm, select and multi-select prompts.
   *
   * @param message - The message to display in the prompt.
   * @param opts - The prompt options. See {@link PromptOptions}.
   * @returns A promise that resolves with the user's response, the type of which is inferred from the options. See {@link inferPromptReturnType}.
   */
  export function prompt<
    _ = any,
    __ = any,
    T extends PromptOptions = TextPromptOptions
  >(
    message: string,
    opts?: PromptOptions
  ): Promise<inferPromptReturnType<T> | inferPromptCancelReturnType<T>>;
  export function parseArgs(args: any[], opts: any): any;
  export {};
  export type CLIRequestData = any[];
  export type ColorName = any[];
  export type TextPromptOptions = any[];
  export type ConfirmPromptOptions = any[];
  export type SelectPromptOptions = any[];
  export type MultiSelectPromptOptions = any[];
  export type PromptOptions = any[];
}

declare module "storm:app" {
  /**
   * Wrap an application entry point with the necessary context and error handling.
   *
   * @param handler - The handler function for the application.
   * @returns A function that takes an request and returns a response or a promise of a response.
   */
  export function createCLIApp<
    TInput extends CLIRequestData = CLIRequestData,
    TOutput = any
  >(
    handler: HandlerFunction<TInput, TOutput>
  ): (input: TInput) => Promise<StormResponse<StormError | unknown>>;
}

declare const $storm: import("storm:context").StormContext;
