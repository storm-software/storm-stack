/* eslint-disable */
// biome-ignore lint: disable
// Generated by storm-capnpc
// Note: Do not edit this file manually - it will be overwritten automatically
import * as $ from "@stryke/capnp";
import { DefaultValueReflection, IndexAccessOrigin, ReflectionKind, ReflectionVisibility, SerializedType, SerializedTypeArray, SerializedTypeClassType, SerializedTypeEnum, SerializedTypeEnumEntry, SerializedTypeFunction, SerializedTypeIndexSignature, SerializedTypeInfer, SerializedTypeIntersection, SerializedTypeLiteral, SerializedTypeLiteralBigInt, SerializedTypeLiteralRegex, SerializedTypeLiteralSymbol, SerializedTypeMethod, SerializedTypeMethodSignature, SerializedTypeObjectLiteral, SerializedTypeOther, SerializedTypeParameter, SerializedTypePromise, SerializedTypeProperty, SerializedTypePropertySignature, SerializedTypeReference, SerializedTypeRest, SerializedTypeTemplateLiteral, SerializedTypeTuple, SerializedTypeTupleMember, SerializedTypeTypeParameter, SerializedTypeUnion, SimpleSerializedType, TagsReflection } from "../../core/schemas/reflection";
export const _capnpFileId = BigInt("0xb0bae18d761b8e6e");
export class TypeDefinition extends $.Struct {
  public static override readonly _capnp = {
    displayName: "TypeDefinition",
    id: "e1d8320aa9def952",
    size: new $.ObjectSize(0, 2),
  };
  get file(): string {
    return $.utils.getText(0, this);
  }
  set file(value: string) {
    $.utils.setText(0, value, this);
  }
  get name(): string {
    return $.utils.getText(1, this);
  }
  set name(value: string) {
    $.utils.setText(1, value, this);
  }
  public override toString(): string { return "TypeDefinition_" + super.toString(); }
}
export class CommandEntryTypeDefinition extends $.Struct {
  public static override readonly _capnp = {
    displayName: "CommandEntryTypeDefinition",
    id: "9a1aaee06ab34202",
    size: new $.ObjectSize(8, 6),
  };
  get title(): string {
    return $.utils.getText(0, this);
  }
  set title(value: string) {
    $.utils.setText(0, value, this);
  }
  get description(): string {
    return $.utils.getText(1, this);
  }
  set description(value: string) {
    $.utils.setText(1, value, this);
  }
  get file(): string {
    return $.utils.getText(2, this);
  }
  set file(value: string) {
    $.utils.setText(2, value, this);
  }
  _adoptInput(value: $.Orphan<TypeDefinition>): void {
    $.utils.adopt(value, $.utils.getPointer(3, this));
  }
  _disownInput(): $.Orphan<TypeDefinition> {
    return $.utils.disown(this.input);
  }
  get input(): TypeDefinition {
    return $.utils.getStruct(3, TypeDefinition, this);
  }
  _hasInput(): boolean {
    return !$.utils.isNull($.utils.getPointer(3, this));
  }
  _initInput(): TypeDefinition {
    return $.utils.initStructAt(3, TypeDefinition, this);
  }
  set input(value: TypeDefinition) {
    $.utils.copyFrom(value, $.utils.getPointer(3, this));
  }
  get output(): string {
    return $.utils.getText(4, this);
  }
  set output(value: string) {
    $.utils.setText(4, value, this);
  }
  _adoptPath(value: $.Orphan<$.List<string>>): void {
    $.utils.adopt(value, $.utils.getPointer(5, this));
  }
  _disownPath(): $.Orphan<$.List<string>> {
    return $.utils.disown(this.path);
  }
  get path(): $.List<string> {
    return $.utils.getList(5, $.TextList, this);
  }
  _hasPath(): boolean {
    return !$.utils.isNull($.utils.getPointer(5, this));
  }
  _initPath(length: number): $.List<string> {
    return $.utils.initList(5, $.TextList, length, this);
  }
  set path(value: $.List<string>) {
    $.utils.copyFrom(value, $.utils.getPointer(5, this));
  }
  get isVirtual(): boolean {
    return $.utils.getBit(0, this);
  }
  set isVirtual(value: boolean) {
    $.utils.setBit(0, value, this);
  }
  public override toString(): string { return "CommandEntryTypeDefinition_" + super.toString(); }
}
export class CommandPayload_CommandPayloadArg extends $.Struct {
  public static override readonly _capnp = {
    displayName: "CommandPayloadArg",
    id: "a3fed48c7cce518e",
    size: new $.ObjectSize(8, 2),
  };
  get name(): string {
    return $.utils.getText(0, this);
  }
  set name(value: string) {
    $.utils.setText(0, value, this);
  }
  get isNegativeOf(): string {
    return $.utils.getText(1, this);
  }
  set isNegativeOf(value: string) {
    $.utils.setText(1, value, this);
  }
  get skipNegative(): boolean {
    return $.utils.getBit(0, this);
  }
  set skipNegative(value: boolean) {
    $.utils.setBit(0, value, this);
  }
  public override toString(): string { return "CommandPayload_CommandPayloadArg_" + super.toString(); }
}
export class CommandPayload extends $.Struct {
  static readonly CommandPayloadArg = CommandPayload_CommandPayloadArg;
  public static override readonly _capnp = {
    displayName: "CommandPayload",
    id: "85d5f9e2e0181b9b",
    size: new $.ObjectSize(0, 3),
  };
  static _Type: $.ListCtor<SerializedType>;
  static _Args: $.ListCtor<CommandPayload_CommandPayloadArg>;
  _adoptImport(value: $.Orphan<TypeDefinition>): void {
    $.utils.adopt(value, $.utils.getPointer(0, this));
  }
  _disownImport(): $.Orphan<TypeDefinition> {
    return $.utils.disown(this.import);
  }
  get import(): TypeDefinition {
    return $.utils.getStruct(0, TypeDefinition, this);
  }
  _hasImport(): boolean {
    return !$.utils.isNull($.utils.getPointer(0, this));
  }
  _initImport(): TypeDefinition {
    return $.utils.initStructAt(0, TypeDefinition, this);
  }
  set import(value: TypeDefinition) {
    $.utils.copyFrom(value, $.utils.getPointer(0, this));
  }
  _adoptType(value: $.Orphan<$.List<SerializedType>>): void {
    $.utils.adopt(value, $.utils.getPointer(1, this));
  }
  _disownType(): $.Orphan<$.List<SerializedType>> {
    return $.utils.disown(this.type);
  }
  get type(): $.List<SerializedType> {
    return $.utils.getList(1, CommandPayload._Type, this);
  }
  _hasType(): boolean {
    return !$.utils.isNull($.utils.getPointer(1, this));
  }
  _initType(length: number): $.List<SerializedType> {
    return $.utils.initList(1, CommandPayload._Type, length, this);
  }
  set type(value: $.List<SerializedType>) {
    $.utils.copyFrom(value, $.utils.getPointer(1, this));
  }
  _adoptArgs(value: $.Orphan<$.List<CommandPayload_CommandPayloadArg>>): void {
    $.utils.adopt(value, $.utils.getPointer(2, this));
  }
  _disownArgs(): $.Orphan<$.List<CommandPayload_CommandPayloadArg>> {
    return $.utils.disown(this.args);
  }
  get args(): $.List<CommandPayload_CommandPayloadArg> {
    return $.utils.getList(2, CommandPayload._Args, this);
  }
  _hasArgs(): boolean {
    return !$.utils.isNull($.utils.getPointer(2, this));
  }
  _initArgs(length: number): $.List<CommandPayload_CommandPayloadArg> {
    return $.utils.initList(2, CommandPayload._Args, length, this);
  }
  set args(value: $.List<CommandPayload_CommandPayloadArg>) {
    $.utils.copyFrom(value, $.utils.getPointer(2, this));
  }
  public override toString(): string { return "CommandPayload_" + super.toString(); }
}
export class CommandRoot extends $.Struct {
  public static override readonly _capnp = {
    displayName: "CommandRoot",
    id: "a099ba5712a31ea7",
    size: new $.ObjectSize(0, 3),
  };
  static _Commands: $.ListCtor<Command>;
  get description(): string {
    return $.utils.getText(0, this);
  }
  set description(value: string) {
    $.utils.setText(0, value, this);
  }
  _adoptEntry(value: $.Orphan<CommandEntryTypeDefinition>): void {
    $.utils.adopt(value, $.utils.getPointer(1, this));
  }
  _disownEntry(): $.Orphan<CommandEntryTypeDefinition> {
    return $.utils.disown(this.entry);
  }
  get entry(): CommandEntryTypeDefinition {
    return $.utils.getStruct(1, CommandEntryTypeDefinition, this);
  }
  _hasEntry(): boolean {
    return !$.utils.isNull($.utils.getPointer(1, this));
  }
  _initEntry(): CommandEntryTypeDefinition {
    return $.utils.initStructAt(1, CommandEntryTypeDefinition, this);
  }
  set entry(value: CommandEntryTypeDefinition) {
    $.utils.copyFrom(value, $.utils.getPointer(1, this));
  }
  _adoptCommands(value: $.Orphan<$.List<Command>>): void {
    $.utils.adopt(value, $.utils.getPointer(2, this));
  }
  _disownCommands(): $.Orphan<$.List<Command>> {
    return $.utils.disown(this.commands);
  }
  get commands(): $.List<Command> {
    return $.utils.getList(2, CommandRoot._Commands, this);
  }
  _hasCommands(): boolean {
    return !$.utils.isNull($.utils.getPointer(2, this));
  }
  _initCommands(length: number): $.List<Command> {
    return $.utils.initList(2, CommandRoot._Commands, length, this);
  }
  set commands(value: $.List<Command>) {
    $.utils.copyFrom(value, $.utils.getPointer(2, this));
  }
  public override toString(): string { return "CommandRoot_" + super.toString(); }
}
export class Command extends $.Struct {
  public static override readonly _capnp = {
    displayName: "Command",
    id: "d8aae33fec8abb62",
    size: new $.ObjectSize(0, 8),
  };
  static _Type: $.ListCtor<SerializedType>;
  get id(): string {
    return $.utils.getText(0, this);
  }
  set id(value: string) {
    $.utils.setText(0, value, this);
  }
  get name(): string {
    return $.utils.getText(1, this);
  }
  set name(value: string) {
    $.utils.setText(1, value, this);
  }
  get title(): string {
    return $.utils.getText(2, this);
  }
  set title(value: string) {
    $.utils.setText(2, value, this);
  }
  _adoptType(value: $.Orphan<$.List<SerializedType>>): void {
    $.utils.adopt(value, $.utils.getPointer(3, this));
  }
  _disownType(): $.Orphan<$.List<SerializedType>> {
    return $.utils.disown(this.type);
  }
  get type(): $.List<SerializedType> {
    return $.utils.getList(3, Command._Type, this);
  }
  _hasType(): boolean {
    return !$.utils.isNull($.utils.getPointer(3, this));
  }
  _initType(length: number): $.List<SerializedType> {
    return $.utils.initList(3, Command._Type, length, this);
  }
  set type(value: $.List<SerializedType>) {
    $.utils.copyFrom(value, $.utils.getPointer(3, this));
  }
  _adoptEntry(value: $.Orphan<CommandEntryTypeDefinition>): void {
    $.utils.adopt(value, $.utils.getPointer(4, this));
  }
  _disownEntry(): $.Orphan<CommandEntryTypeDefinition> {
    return $.utils.disown(this.entry);
  }
  get entry(): CommandEntryTypeDefinition {
    return $.utils.getStruct(4, CommandEntryTypeDefinition, this);
  }
  _hasEntry(): boolean {
    return !$.utils.isNull($.utils.getPointer(4, this));
  }
  _initEntry(): CommandEntryTypeDefinition {
    return $.utils.initStructAt(4, CommandEntryTypeDefinition, this);
  }
  set entry(value: CommandEntryTypeDefinition) {
    $.utils.copyFrom(value, $.utils.getPointer(4, this));
  }
  _adoptPayload(value: $.Orphan<CommandPayload>): void {
    $.utils.adopt(value, $.utils.getPointer(5, this));
  }
  _disownPayload(): $.Orphan<CommandPayload> {
    return $.utils.disown(this.payload);
  }
  get payload(): CommandPayload {
    return $.utils.getStruct(5, CommandPayload, this);
  }
  _hasPayload(): boolean {
    return !$.utils.isNull($.utils.getPointer(5, this));
  }
  _initPayload(): CommandPayload {
    return $.utils.initStructAt(5, CommandPayload, this);
  }
  set payload(value: CommandPayload) {
    $.utils.copyFrom(value, $.utils.getPointer(5, this));
  }
  get parent(): string {
    return $.utils.getText(6, this);
  }
  set parent(value: string) {
    $.utils.setText(6, value, this);
  }
  _adoptChildren(value: $.Orphan<$.List<string>>): void {
    $.utils.adopt(value, $.utils.getPointer(7, this));
  }
  _disownChildren(): $.Orphan<$.List<string>> {
    return $.utils.disown(this.children);
  }
  get children(): $.List<string> {
    return $.utils.getList(7, $.TextList, this);
  }
  _hasChildren(): boolean {
    return !$.utils.isNull($.utils.getPointer(7, this));
  }
  _initChildren(length: number): $.List<string> {
    return $.utils.initList(7, $.TextList, length, this);
  }
  set children(value: $.List<string>) {
    $.utils.copyFrom(value, $.utils.getPointer(7, this));
  }
  public override toString(): string { return "Command_" + super.toString(); }
}
CommandPayload._Type = $.CompositeList(SerializedType);
CommandPayload._Args = $.CompositeList(CommandPayload_CommandPayloadArg);
CommandRoot._Commands = $.CompositeList(Command);
Command._Type = $.CompositeList(SerializedType);
