/* eslint-disable */
// biome-ignore lint: disable
// Generated by storm-capnpc
// Note: Do not edit this file manually - it will be overwritten automatically
import * as $ from "@stryke/capnp";
import { DefaultValueReflection, IndexAccessOrigin, ReflectionKind, ReflectionVisibility, SerializedType, SerializedTypeArray, SerializedTypeClassType, SerializedTypeEnum, SerializedTypeEnumEntry, SerializedTypeFunction, SerializedTypeIndexSignature, SerializedTypeInfer, SerializedTypeIntersection, SerializedTypeLiteral, SerializedTypeLiteralBigInt, SerializedTypeLiteralRegex, SerializedTypeLiteralSymbol, SerializedTypeMethod, SerializedTypeMethodSignature, SerializedTypeObjectLiteral, SerializedTypeParameter, SerializedTypePromise, SerializedTypeProperty, SerializedTypePropertySignature, SerializedTypeReference, SerializedTypeRest, SerializedTypeTemplateLiteral, SerializedTypeTuple, SerializedTypeTupleMember, SerializedTypeTypeParameter, SerializedTypeUnion, SimpleSerializedType, TagsReflection } from "../../core/schemas/reflection";
export const _capnpFileId = BigInt("0xb0bae18d761b8e6e");
export class TypeDefinition extends $.Struct {
  public static override readonly _capnp = {
    displayName: "TypeDefinition",
    id: "e1d8320aa9def952",
    size: new $.ObjectSize(0, 2),
  };
  get file(): string {
    return $.utils.getText(0, this);
  }
  set file(value: string) {
    $.utils.setText(0, value, this);
  }
  /**
* optional, use empty string if not provided
*
*/
  get name(): string {
    return $.utils.getText(1, this);
  }
  set name(value: string) {
    $.utils.setText(1, value, this);
  }
  public override toString(): string { return "TypeDefinition_" + super.toString(); }
}
export class CommandEntry extends $.Struct {
  public static override readonly _capnp = {
    displayName: "CommandEntry",
    id: "b4e3a200ff9073d4",
    size: new $.ObjectSize(8, 4),
  };
  get file(): string {
    return $.utils.getText(0, this);
  }
  set file(value: string) {
    $.utils.setText(0, value, this);
  }
  _adoptInput(value: $.Orphan<TypeDefinition>): void {
    $.utils.adopt(value, $.utils.getPointer(1, this));
  }
  _disownInput(): $.Orphan<TypeDefinition> {
    return $.utils.disown(this.input);
  }
  get input(): TypeDefinition {
    return $.utils.getStruct(1, TypeDefinition, this);
  }
  _hasInput(): boolean {
    return !$.utils.isNull($.utils.getPointer(1, this));
  }
  _initInput(): TypeDefinition {
    return $.utils.initStructAt(1, TypeDefinition, this);
  }
  set input(value: TypeDefinition) {
    $.utils.copyFrom(value, $.utils.getPointer(1, this));
  }
  get output(): string {
    return $.utils.getText(2, this);
  }
  set output(value: string) {
    $.utils.setText(2, value, this);
  }
  _adoptPath(value: $.Orphan<$.List<string>>): void {
    $.utils.adopt(value, $.utils.getPointer(3, this));
  }
  _disownPath(): $.Orphan<$.List<string>> {
    return $.utils.disown(this.path);
  }
  get path(): $.List<string> {
    return $.utils.getList(3, $.TextList, this);
  }
  _hasPath(): boolean {
    return !$.utils.isNull($.utils.getPointer(3, this));
  }
  _initPath(length: number): $.List<string> {
    return $.utils.initList(3, $.TextList, length, this);
  }
  set path(value: $.List<string>) {
    $.utils.copyFrom(value, $.utils.getPointer(3, this));
  }
  get isVirtual(): boolean {
    return $.utils.getBit(0, this);
  }
  set isVirtual(value: boolean) {
    $.utils.setBit(0, value, this);
  }
  public override toString(): string { return "CommandEntry_" + super.toString(); }
}
export class CommandPayloadArg extends $.Struct {
  public static override readonly _capnp = {
    displayName: "CommandPayloadArg",
    id: "b5ae67f583ef6cf4",
    size: new $.ObjectSize(8, 2),
  };
  static _Type: $.ListCtor<SerializedType>;
  _adoptType(value: $.Orphan<$.List<SerializedType>>): void {
    $.utils.adopt(value, $.utils.getPointer(0, this));
  }
  _disownType(): $.Orphan<$.List<SerializedType>> {
    return $.utils.disown(this.type);
  }
  get type(): $.List<SerializedType> {
    return $.utils.getList(0, CommandPayloadArg._Type, this);
  }
  _hasType(): boolean {
    return !$.utils.isNull($.utils.getPointer(0, this));
  }
  _initType(length: number): $.List<SerializedType> {
    return $.utils.initList(0, CommandPayloadArg._Type, length, this);
  }
  set type(value: $.List<SerializedType>) {
    $.utils.copyFrom(value, $.utils.getPointer(0, this));
  }
  _adoptOptions(value: $.Orphan<$.List<string>>): void {
    $.utils.adopt(value, $.utils.getPointer(1, this));
  }
  _disownOptions(): $.Orphan<$.List<string>> {
    return $.utils.disown(this.options);
  }
  get options(): $.List<string> {
    return $.utils.getList(1, $.TextList, this);
  }
  _hasOptions(): boolean {
    return !$.utils.isNull($.utils.getPointer(1, this));
  }
  _initOptions(length: number): $.List<string> {
    return $.utils.initList(1, $.TextList, length, this);
  }
  set options(value: $.List<string>) {
    $.utils.copyFrom(value, $.utils.getPointer(1, this));
  }
  get isNegative(): boolean {
    return $.utils.getBit(0, this);
  }
  set isNegative(value: boolean) {
    $.utils.setBit(0, value, this);
  }
  public override toString(): string { return "CommandPayloadArg_" + super.toString(); }
}
export class CommandPayload extends $.Struct {
  public static override readonly _capnp = {
    displayName: "CommandPayload",
    id: "85d5f9e2e0181b9b",
    size: new $.ObjectSize(0, 3),
  };
  static _Args: $.ListCtor<CommandPayloadArg>;
  get name(): string {
    return $.utils.getText(0, this);
  }
  set name(value: string) {
    $.utils.setText(0, value, this);
  }
  get importPath(): string {
    return $.utils.getText(1, this);
  }
  set importPath(value: string) {
    $.utils.setText(1, value, this);
  }
  _adoptArgs(value: $.Orphan<$.List<CommandPayloadArg>>): void {
    $.utils.adopt(value, $.utils.getPointer(2, this));
  }
  _disownArgs(): $.Orphan<$.List<CommandPayloadArg>> {
    return $.utils.disown(this.args);
  }
  get args(): $.List<CommandPayloadArg> {
    return $.utils.getList(2, CommandPayload._Args, this);
  }
  _hasArgs(): boolean {
    return !$.utils.isNull($.utils.getPointer(2, this));
  }
  _initArgs(length: number): $.List<CommandPayloadArg> {
    return $.utils.initList(2, CommandPayload._Args, length, this);
  }
  set args(value: $.List<CommandPayloadArg>) {
    $.utils.copyFrom(value, $.utils.getPointer(2, this));
  }
  public override toString(): string { return "CommandPayload_" + super.toString(); }
}
export class CommandTree_ChildCommand extends $.Struct {
  public static override readonly _capnp = {
    displayName: "ChildCommand",
    id: "d26549e73a75a9c2",
    size: new $.ObjectSize(0, 2),
  };
  get name(): string {
    return $.utils.getText(0, this);
  }
  set name(value: string) {
    $.utils.setText(0, value, this);
  }
  _adoptValue(value: $.Orphan<CommandTreeBranch>): void {
    $.utils.adopt(value, $.utils.getPointer(1, this));
  }
  _disownValue(): $.Orphan<CommandTreeBranch> {
    return $.utils.disown(this.value);
  }
  get value(): CommandTreeBranch {
    return $.utils.getStruct(1, CommandTreeBranch, this);
  }
  _hasValue(): boolean {
    return !$.utils.isNull($.utils.getPointer(1, this));
  }
  _initValue(): CommandTreeBranch {
    return $.utils.initStructAt(1, CommandTreeBranch, this);
  }
  set value(value: CommandTreeBranch) {
    $.utils.copyFrom(value, $.utils.getPointer(1, this));
  }
  public override toString(): string { return "CommandTree_ChildCommand_" + super.toString(); }
}
export class CommandTree extends $.Struct {
  static readonly ChildCommand = CommandTree_ChildCommand;
  public static override readonly _capnp = {
    displayName: "CommandTree",
    id: "a33624c85579bf86",
    size: new $.ObjectSize(0, 4),
  };
  static _Type: $.ListCtor<SerializedType>;
  static _Children: $.ListCtor<CommandTree_ChildCommand>;
  get commandId(): string {
    return $.utils.getText(0, this);
  }
  set commandId(value: string) {
    $.utils.setText(0, value, this);
  }
  _adoptType(value: $.Orphan<$.List<SerializedType>>): void {
    $.utils.adopt(value, $.utils.getPointer(1, this));
  }
  _disownType(): $.Orphan<$.List<SerializedType>> {
    return $.utils.disown(this.type);
  }
  get type(): $.List<SerializedType> {
    return $.utils.getList(1, CommandTree._Type, this);
  }
  _hasType(): boolean {
    return !$.utils.isNull($.utils.getPointer(1, this));
  }
  _initType(length: number): $.List<SerializedType> {
    return $.utils.initList(1, CommandTree._Type, length, this);
  }
  set type(value: $.List<SerializedType>) {
    $.utils.copyFrom(value, $.utils.getPointer(1, this));
  }
  _adoptEntry(value: $.Orphan<CommandEntry>): void {
    $.utils.adopt(value, $.utils.getPointer(2, this));
  }
  _disownEntry(): $.Orphan<CommandEntry> {
    return $.utils.disown(this.entry);
  }
  get entry(): CommandEntry {
    return $.utils.getStruct(2, CommandEntry, this);
  }
  _hasEntry(): boolean {
    return !$.utils.isNull($.utils.getPointer(2, this));
  }
  _initEntry(): CommandEntry {
    return $.utils.initStructAt(2, CommandEntry, this);
  }
  set entry(value: CommandEntry) {
    $.utils.copyFrom(value, $.utils.getPointer(2, this));
  }
  _adoptChildren(value: $.Orphan<$.List<CommandTree_ChildCommand>>): void {
    $.utils.adopt(value, $.utils.getPointer(3, this));
  }
  _disownChildren(): $.Orphan<$.List<CommandTree_ChildCommand>> {
    return $.utils.disown(this.children);
  }
  get children(): $.List<CommandTree_ChildCommand> {
    return $.utils.getList(3, CommandTree._Children, this);
  }
  _hasChildren(): boolean {
    return !$.utils.isNull($.utils.getPointer(3, this));
  }
  _initChildren(length: number): $.List<CommandTree_ChildCommand> {
    return $.utils.initList(3, CommandTree._Children, length, this);
  }
  set children(value: $.List<CommandTree_ChildCommand>) {
    $.utils.copyFrom(value, $.utils.getPointer(3, this));
  }
  public override toString(): string { return "CommandTree_" + super.toString(); }
}
export class CommandTreeBranch_ChildCommand extends $.Struct {
  public static override readonly _capnp = {
    displayName: "ChildCommand",
    id: "c6f6c709e33dc9f4",
    size: new $.ObjectSize(0, 2),
  };
  get name(): string {
    return $.utils.getText(0, this);
  }
  set name(value: string) {
    $.utils.setText(0, value, this);
  }
  _adoptValue(value: $.Orphan<CommandTreeBranch>): void {
    $.utils.adopt(value, $.utils.getPointer(1, this));
  }
  _disownValue(): $.Orphan<CommandTreeBranch> {
    return $.utils.disown(this.value);
  }
  get value(): CommandTreeBranch {
    return $.utils.getStruct(1, CommandTreeBranch, this);
  }
  _hasValue(): boolean {
    return !$.utils.isNull($.utils.getPointer(1, this));
  }
  _initValue(): CommandTreeBranch {
    return $.utils.initStructAt(1, CommandTreeBranch, this);
  }
  set value(value: CommandTreeBranch) {
    $.utils.copyFrom(value, $.utils.getPointer(1, this));
  }
  public override toString(): string { return "CommandTreeBranch_ChildCommand_" + super.toString(); }
}
export const CommandTreeBranch_Parent_Which = {
  ROOT: 0,
  BRANCH: 1
} as const;
export type CommandTreeBranch_Parent_Which = (typeof CommandTreeBranch_Parent_Which)[keyof typeof CommandTreeBranch_Parent_Which];
export class CommandTreeBranch_Parent extends $.Struct {
  static readonly ROOT = CommandTreeBranch_Parent_Which.ROOT;
  static readonly BRANCH = CommandTreeBranch_Parent_Which.BRANCH;
  public static override readonly _capnp = {
    displayName: "parent",
    id: "cd77c46ec7a27bd6",
    size: new $.ObjectSize(8, 6),
  };
  _adoptRoot(value: $.Orphan<CommandTree>): void {
    $.utils.setUint16(0, 0, this);
    $.utils.adopt(value, $.utils.getPointer(4, this));
  }
  _disownRoot(): $.Orphan<CommandTree> {
    return $.utils.disown(this.root);
  }
  get root(): CommandTree {
    $.utils.testWhich("root", $.utils.getUint16(0, this), 0, this);
    return $.utils.getStruct(4, CommandTree, this);
  }
  _hasRoot(): boolean {
    return !$.utils.isNull($.utils.getPointer(4, this));
  }
  _initRoot(): CommandTree {
    $.utils.setUint16(0, 0, this);
    return $.utils.initStructAt(4, CommandTree, this);
  }
  get _isRoot(): boolean {
    return $.utils.getUint16(0, this) === 0;
  }
  set root(value: CommandTree) {
    $.utils.setUint16(0, 0, this);
    $.utils.copyFrom(value, $.utils.getPointer(4, this));
  }
  _adoptBranch(value: $.Orphan<CommandTreeBranch>): void {
    $.utils.setUint16(0, 1, this);
    $.utils.adopt(value, $.utils.getPointer(4, this));
  }
  _disownBranch(): $.Orphan<CommandTreeBranch> {
    return $.utils.disown(this.branch);
  }
  get branch(): CommandTreeBranch {
    $.utils.testWhich("branch", $.utils.getUint16(0, this), 1, this);
    return $.utils.getStruct(4, CommandTreeBranch, this);
  }
  _hasBranch(): boolean {
    return !$.utils.isNull($.utils.getPointer(4, this));
  }
  _initBranch(): CommandTreeBranch {
    $.utils.setUint16(0, 1, this);
    return $.utils.initStructAt(4, CommandTreeBranch, this);
  }
  get _isBranch(): boolean {
    return $.utils.getUint16(0, this) === 1;
  }
  set branch(value: CommandTreeBranch) {
    $.utils.setUint16(0, 1, this);
    $.utils.copyFrom(value, $.utils.getPointer(4, this));
  }
  public override toString(): string { return "CommandTreeBranch_Parent_" + super.toString(); }
  which(): CommandTreeBranch_Parent_Which {
    return $.utils.getUint16(0, this) as CommandTreeBranch_Parent_Which;
  }
}
export class CommandTreeBranch extends $.Struct {
  static readonly ChildCommand = CommandTreeBranch_ChildCommand;
  public static override readonly _capnp = {
    displayName: "CommandTreeBranch",
    id: "817306c4e47d821a",
    size: new $.ObjectSize(8, 6),
  };
  static _Type: $.ListCtor<SerializedType>;
  static _Children: $.ListCtor<CommandTreeBranch_ChildCommand>;
  get commandId(): string {
    return $.utils.getText(0, this);
  }
  set commandId(value: string) {
    $.utils.setText(0, value, this);
  }
  _adoptType(value: $.Orphan<$.List<SerializedType>>): void {
    $.utils.adopt(value, $.utils.getPointer(1, this));
  }
  _disownType(): $.Orphan<$.List<SerializedType>> {
    return $.utils.disown(this.type);
  }
  get type(): $.List<SerializedType> {
    return $.utils.getList(1, CommandTreeBranch._Type, this);
  }
  _hasType(): boolean {
    return !$.utils.isNull($.utils.getPointer(1, this));
  }
  _initType(length: number): $.List<SerializedType> {
    return $.utils.initList(1, CommandTreeBranch._Type, length, this);
  }
  set type(value: $.List<SerializedType>) {
    $.utils.copyFrom(value, $.utils.getPointer(1, this));
  }
  _adoptEntry(value: $.Orphan<CommandEntry>): void {
    $.utils.adopt(value, $.utils.getPointer(2, this));
  }
  _disownEntry(): $.Orphan<CommandEntry> {
    return $.utils.disown(this.entry);
  }
  get entry(): CommandEntry {
    return $.utils.getStruct(2, CommandEntry, this);
  }
  _hasEntry(): boolean {
    return !$.utils.isNull($.utils.getPointer(2, this));
  }
  _initEntry(): CommandEntry {
    return $.utils.initStructAt(2, CommandEntry, this);
  }
  set entry(value: CommandEntry) {
    $.utils.copyFrom(value, $.utils.getPointer(2, this));
  }
  _adoptPayload(value: $.Orphan<CommandPayload>): void {
    $.utils.adopt(value, $.utils.getPointer(3, this));
  }
  _disownPayload(): $.Orphan<CommandPayload> {
    return $.utils.disown(this.payload);
  }
  get payload(): CommandPayload {
    return $.utils.getStruct(3, CommandPayload, this);
  }
  _hasPayload(): boolean {
    return !$.utils.isNull($.utils.getPointer(3, this));
  }
  _initPayload(): CommandPayload {
    return $.utils.initStructAt(3, CommandPayload, this);
  }
  set payload(value: CommandPayload) {
    $.utils.copyFrom(value, $.utils.getPointer(3, this));
  }
  get parent(): CommandTreeBranch_Parent {
    return $.utils.getAs(CommandTreeBranch_Parent, this);
  }
  _initParent(): CommandTreeBranch_Parent {
    return $.utils.getAs(CommandTreeBranch_Parent, this);
  }
  _adoptChildren(value: $.Orphan<$.List<CommandTreeBranch_ChildCommand>>): void {
    $.utils.adopt(value, $.utils.getPointer(5, this));
  }
  _disownChildren(): $.Orphan<$.List<CommandTreeBranch_ChildCommand>> {
    return $.utils.disown(this.children);
  }
  get children(): $.List<CommandTreeBranch_ChildCommand> {
    return $.utils.getList(5, CommandTreeBranch._Children, this);
  }
  _hasChildren(): boolean {
    return !$.utils.isNull($.utils.getPointer(5, this));
  }
  _initChildren(length: number): $.List<CommandTreeBranch_ChildCommand> {
    return $.utils.initList(5, CommandTreeBranch._Children, length, this);
  }
  set children(value: $.List<CommandTreeBranch_ChildCommand>) {
    $.utils.copyFrom(value, $.utils.getPointer(5, this));
  }
  public override toString(): string { return "CommandTreeBranch_" + super.toString(); }
}
CommandPayloadArg._Type = $.CompositeList(SerializedType);
CommandPayload._Args = $.CompositeList(CommandPayloadArg);
CommandTree._Type = $.CompositeList(SerializedType);
CommandTree._Children = $.CompositeList(CommandTree_ChildCommand);
CommandTreeBranch._Type = $.CompositeList(SerializedType);
CommandTreeBranch._Children = $.CompositeList(CommandTreeBranch_ChildCommand);
