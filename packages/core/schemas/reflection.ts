/* eslint-disable */
// biome-ignore lint: disable
// Generated by storm-capnpc
// Note: Do not edit this file manually - it will be overwritten automatically
import * as $ from "@stryke/capnp";
export const _capnpFileId = BigInt("0xae3c363dcecf2729");
export const ReflectionKind = {
  NEVER: 0,
  ANY: 1,
  UNKNOWN: 2,
  VOID: 3,
  OBJECT: 4,
  STRING: 5,
  NUMBER: 6,
  BOOLEAN: 7,
  SYMBOL: 8,
  BIGINT: 9,
  NULL: 10,
  UNDEFINED: 11,
  REGEXP: 12,
  LITERAL: 13,
  TEMPLATE_LITERAL: 14,
  PROPERTY: 15,
  METHOD: 16,
  FUNCTION: 17,
  PARAMETER: 18,
  PROMISE: 19,
  CLASS: 20,
  TYPE_PARAMETER: 21,
  ENUM: 22,
  UNION: 23,
  INTERSECTION: 24,
  ARRAY: 25,
  TUPLE: 26,
  TUPLE_MEMBER: 27,
  ENUM_MEMBER: 28,
  REST: 29,
  OBJECT_LITERAL: 30,
  INDEX_SIGNATURE: 31,
  PROPERTY_SIGNATURE: 32,
  METHOD_SIGNATURE: 33,
  INFER: 34,
  CALL_SIGNATURE: 35
} as const;
export type ReflectionKind = (typeof ReflectionKind)[keyof typeof ReflectionKind];
export const ReflectionVisibility = {
  PUBLIC: 0,
  PROTECTED: 1,
  PRIVATE: 2
} as const;
export type ReflectionVisibility = (typeof ReflectionVisibility)[keyof typeof ReflectionVisibility];
export class TagsReflection extends $.Struct {
  public static override readonly _capnp = {
    displayName: "TagsReflection",
    id: "ab7e31d6b834bbf8",
    size: new $.ObjectSize(8, 4),
  };
  _adoptAlias(value: $.Orphan<$.List<string>>): void {
    $.utils.adopt(value, $.utils.getPointer(0, this));
  }
  _disownAlias(): $.Orphan<$.List<string>> {
    return $.utils.disown(this.alias);
  }
  get alias(): $.List<string> {
    return $.utils.getList(0, $.TextList, this);
  }
  _hasAlias(): boolean {
    return !$.utils.isNull($.utils.getPointer(0, this));
  }
  _initAlias(length: number): $.List<string> {
    return $.utils.initList(0, $.TextList, length, this);
  }
  set alias(value: $.List<string>) {
    $.utils.copyFrom(value, $.utils.getPointer(0, this));
  }
  get title(): string {
    return $.utils.getText(1, this);
  }
  set title(value: string) {
    $.utils.setText(1, value, this);
  }
  get hidden(): boolean {
    return $.utils.getBit(0, this);
  }
  set hidden(value: boolean) {
    $.utils.setBit(0, value, this);
  }
  get readonly(): boolean {
    return $.utils.getBit(1, this);
  }
  set readonly(value: boolean) {
    $.utils.setBit(1, value, this);
  }
  get ignore(): boolean {
    return $.utils.getBit(2, this);
  }
  set ignore(value: boolean) {
    $.utils.setBit(2, value, this);
  }
  get internal(): boolean {
    return $.utils.getBit(3, this);
  }
  set internal(value: boolean) {
    $.utils.setBit(3, value, this);
  }
  _adoptPermission(value: $.Orphan<$.List<string>>): void {
    $.utils.adopt(value, $.utils.getPointer(2, this));
  }
  _disownPermission(): $.Orphan<$.List<string>> {
    return $.utils.disown(this.permission);
  }
  get permission(): $.List<string> {
    return $.utils.getList(2, $.TextList, this);
  }
  _hasPermission(): boolean {
    return !$.utils.isNull($.utils.getPointer(2, this));
  }
  _initPermission(length: number): $.List<string> {
    return $.utils.initList(2, $.TextList, length, this);
  }
  set permission(value: $.List<string>) {
    $.utils.copyFrom(value, $.utils.getPointer(2, this));
  }
  get domain(): string {
    return $.utils.getText(3, this);
  }
  set domain(value: string) {
    $.utils.setText(3, value, this);
  }
  public override toString(): string { return "TagsReflection_" + super.toString(); }
}
export const DefaultValueReflection_Value_Which = {
  UNDEFINED: 0,
  BOOLEAN: 1,
  INTEGER: 2,
  FLOAT: 3,
  STRING: 4
} as const;
export type DefaultValueReflection_Value_Which = (typeof DefaultValueReflection_Value_Which)[keyof typeof DefaultValueReflection_Value_Which];
export class DefaultValueReflection_Value extends $.Struct {
  static readonly UNDEFINED = DefaultValueReflection_Value_Which.UNDEFINED;
  static readonly BOOLEAN = DefaultValueReflection_Value_Which.BOOLEAN;
  static readonly INTEGER = DefaultValueReflection_Value_Which.INTEGER;
  static readonly FLOAT = DefaultValueReflection_Value_Which.FLOAT;
  static readonly STRING = DefaultValueReflection_Value_Which.STRING;
  public static override readonly _capnp = {
    displayName: "value",
    id: "8748135e0497fe81",
    size: new $.ObjectSize(16, 1),
  };
  get _isUndefined(): boolean {
    return $.utils.getUint16(0, this) === 0;
  }
  set undefined(_: true) {
    $.utils.setUint16(0, 0, this);
  }
  get boolean(): boolean {
    $.utils.testWhich("boolean", $.utils.getUint16(0, this), 1, this);
    return $.utils.getBit(16, this);
  }
  get _isBoolean(): boolean {
    return $.utils.getUint16(0, this) === 1;
  }
  set boolean(value: boolean) {
    $.utils.setUint16(0, 1, this);
    $.utils.setBit(16, value, this);
  }
  get integer(): number {
    $.utils.testWhich("integer", $.utils.getUint16(0, this), 2, this);
    return $.utils.getInt32(4, this);
  }
  get _isInteger(): boolean {
    return $.utils.getUint16(0, this) === 2;
  }
  set integer(value: number) {
    $.utils.setUint16(0, 2, this);
    $.utils.setInt32(4, value, this);
  }
  get float(): number {
    $.utils.testWhich("float", $.utils.getUint16(0, this), 3, this);
    return $.utils.getFloat64(8, this);
  }
  get _isFloat(): boolean {
    return $.utils.getUint16(0, this) === 3;
  }
  set float(value: number) {
    $.utils.setUint16(0, 3, this);
    $.utils.setFloat64(8, value, this);
  }
  get string(): string {
    $.utils.testWhich("string", $.utils.getUint16(0, this), 4, this);
    return $.utils.getText(0, this);
  }
  get _isString(): boolean {
    return $.utils.getUint16(0, this) === 4;
  }
  set string(value: string) {
    $.utils.setUint16(0, 4, this);
    $.utils.setText(0, value, this);
  }
  public override toString(): string { return "DefaultValueReflection_Value_" + super.toString(); }
  which(): DefaultValueReflection_Value_Which {
    return $.utils.getUint16(0, this) as DefaultValueReflection_Value_Which;
  }
}
export class DefaultValueReflection extends $.Struct {
  public static override readonly _capnp = {
    displayName: "DefaultValueReflection",
    id: "96fe6f07954197c9",
    size: new $.ObjectSize(16, 1),
  };
  get value(): DefaultValueReflection_Value {
    return $.utils.getAs(DefaultValueReflection_Value, this);
  }
  _initValue(): DefaultValueReflection_Value {
    return $.utils.getAs(DefaultValueReflection_Value, this);
  }
  public override toString(): string { return "DefaultValueReflection_" + super.toString(); }
}
export class SerializedTypeReference extends $.Struct {
  public static override readonly _capnp = {
    displayName: "SerializedTypeReference",
    id: "a83d8a28b5e80f3a",
    size: new $.ObjectSize(8, 0),
  };
  get id(): number {
    return $.utils.getUint32(0, this);
  }
  set id(value: number) {
    $.utils.setUint32(0, value, this);
  }
  public override toString(): string { return "SerializedTypeReference_" + super.toString(); }
}
export class IndexAccessOrigin extends $.Struct {
  public static override readonly _capnp = {
    displayName: "IndexAccessOrigin",
    id: "ca50b18186c87afe",
    size: new $.ObjectSize(0, 2),
  };
  _adoptContainer(value: $.Orphan<SerializedTypeReference>): void {
    $.utils.adopt(value, $.utils.getPointer(0, this));
  }
  _disownContainer(): $.Orphan<SerializedTypeReference> {
    return $.utils.disown(this.container);
  }
  get container(): SerializedTypeReference {
    return $.utils.getStruct(0, SerializedTypeReference, this);
  }
  _hasContainer(): boolean {
    return !$.utils.isNull($.utils.getPointer(0, this));
  }
  _initContainer(): SerializedTypeReference {
    return $.utils.initStructAt(0, SerializedTypeReference, this);
  }
  set container(value: SerializedTypeReference) {
    $.utils.copyFrom(value, $.utils.getPointer(0, this));
  }
  _adoptIndex(value: $.Orphan<SerializedTypeReference>): void {
    $.utils.adopt(value, $.utils.getPointer(1, this));
  }
  _disownIndex(): $.Orphan<SerializedTypeReference> {
    return $.utils.disown(this.index);
  }
  get index(): SerializedTypeReference {
    return $.utils.getStruct(1, SerializedTypeReference, this);
  }
  _hasIndex(): boolean {
    return !$.utils.isNull($.utils.getPointer(1, this));
  }
  _initIndex(): SerializedTypeReference {
    return $.utils.initStructAt(1, SerializedTypeReference, this);
  }
  set index(value: SerializedTypeReference) {
    $.utils.copyFrom(value, $.utils.getPointer(1, this));
  }
  public override toString(): string { return "IndexAccessOrigin_" + super.toString(); }
}
export class EntityOptions_EntityIndexOptions extends $.Struct {
  public static override readonly _capnp = {
    displayName: "EntityIndexOptions",
    id: "de584ad10b7c5004",
    size: new $.ObjectSize(0, 2),
  };
  _adoptNames(value: $.Orphan<$.List<string>>): void {
    $.utils.adopt(value, $.utils.getPointer(0, this));
  }
  _disownNames(): $.Orphan<$.List<string>> {
    return $.utils.disown(this.names);
  }
  get names(): $.List<string> {
    return $.utils.getList(0, $.TextList, this);
  }
  _hasNames(): boolean {
    return !$.utils.isNull($.utils.getPointer(0, this));
  }
  _initNames(length: number): $.List<string> {
    return $.utils.initList(0, $.TextList, length, this);
  }
  set names(value: $.List<string>) {
    $.utils.copyFrom(value, $.utils.getPointer(0, this));
  }
  /**
* JSON stringified options
*
*/
  get options(): string {
    return $.utils.getText(1, this);
  }
  set options(value: string) {
    $.utils.setText(1, value, this);
  }
  public override toString(): string { return "EntityOptions_EntityIndexOptions_" + super.toString(); }
}
export class EntityOptions extends $.Struct {
  static readonly EntityIndexOptions = EntityOptions_EntityIndexOptions;
  public static override readonly _capnp = {
    displayName: "EntityOptions",
    id: "948d2d02cf676d60",
    size: new $.ObjectSize(8, 5),
  };
  static _Indexes: $.ListCtor<EntityOptions_EntityIndexOptions>;
  get name(): string {
    return $.utils.getText(0, this);
  }
  set name(value: string) {
    $.utils.setText(0, value, this);
  }
  get description(): string {
    return $.utils.getText(1, this);
  }
  set description(value: string) {
    $.utils.setText(1, value, this);
  }
  get collection(): string {
    return $.utils.getText(2, this);
  }
  set collection(value: string) {
    $.utils.setText(2, value, this);
  }
  get database(): string {
    return $.utils.getText(3, this);
  }
  set database(value: string) {
    $.utils.setText(3, value, this);
  }
  get singleTableInheritance(): boolean {
    return $.utils.getBit(0, this);
  }
  set singleTableInheritance(value: boolean) {
    $.utils.setBit(0, value, this);
  }
  _adoptIndexes(value: $.Orphan<$.List<EntityOptions_EntityIndexOptions>>): void {
    $.utils.adopt(value, $.utils.getPointer(4, this));
  }
  _disownIndexes(): $.Orphan<$.List<EntityOptions_EntityIndexOptions>> {
    return $.utils.disown(this.indexes);
  }
  get indexes(): $.List<EntityOptions_EntityIndexOptions> {
    return $.utils.getList(4, EntityOptions._Indexes, this);
  }
  _hasIndexes(): boolean {
    return !$.utils.isNull($.utils.getPointer(4, this));
  }
  _initIndexes(length: number): $.List<EntityOptions_EntityIndexOptions> {
    return $.utils.initList(4, EntityOptions._Indexes, length, this);
  }
  set indexes(value: $.List<EntityOptions_EntityIndexOptions>) {
    $.utils.copyFrom(value, $.utils.getPointer(4, this));
  }
  public override toString(): string { return "EntityOptions_" + super.toString(); }
}
export class SerializedTypeObjectLiteral extends $.Struct {
  public static override readonly _capnp = {
    displayName: "SerializedTypeObjectLiteral",
    id: "8b56235ad9bcb2b1",
    size: new $.ObjectSize(8, 6),
  };
  static _TypeArguments: $.ListCtor<SerializedTypeReference>;
  static _Decorators: $.ListCtor<SerializedTypeReference>;
  static _Types: $.ListCtor<SerializedTypeReference>;
  get typeName(): string {
    return $.utils.getText(0, this);
  }
  set typeName(value: string) {
    $.utils.setText(0, value, this);
  }
  _adoptTypeArguments(value: $.Orphan<$.List<SerializedTypeReference>>): void {
    $.utils.adopt(value, $.utils.getPointer(1, this));
  }
  _disownTypeArguments(): $.Orphan<$.List<SerializedTypeReference>> {
    return $.utils.disown(this.typeArguments);
  }
  get typeArguments(): $.List<SerializedTypeReference> {
    return $.utils.getList(1, SerializedTypeObjectLiteral._TypeArguments, this);
  }
  _hasTypeArguments(): boolean {
    return !$.utils.isNull($.utils.getPointer(1, this));
  }
  _initTypeArguments(length: number): $.List<SerializedTypeReference> {
    return $.utils.initList(1, SerializedTypeObjectLiteral._TypeArguments, length, this);
  }
  set typeArguments(value: $.List<SerializedTypeReference>) {
    $.utils.copyFrom(value, $.utils.getPointer(1, this));
  }
  _adoptIndexAccessOrigin(value: $.Orphan<IndexAccessOrigin>): void {
    $.utils.adopt(value, $.utils.getPointer(2, this));
  }
  _disownIndexAccessOrigin(): $.Orphan<IndexAccessOrigin> {
    return $.utils.disown(this.indexAccessOrigin);
  }
  get indexAccessOrigin(): IndexAccessOrigin {
    return $.utils.getStruct(2, IndexAccessOrigin, this);
  }
  _hasIndexAccessOrigin(): boolean {
    return !$.utils.isNull($.utils.getPointer(2, this));
  }
  _initIndexAccessOrigin(): IndexAccessOrigin {
    return $.utils.initStructAt(2, IndexAccessOrigin, this);
  }
  set indexAccessOrigin(value: IndexAccessOrigin) {
    $.utils.copyFrom(value, $.utils.getPointer(2, this));
  }
  _adoptDecorators(value: $.Orphan<$.List<SerializedTypeReference>>): void {
    $.utils.adopt(value, $.utils.getPointer(3, this));
  }
  _disownDecorators(): $.Orphan<$.List<SerializedTypeReference>> {
    return $.utils.disown(this.decorators);
  }
  get decorators(): $.List<SerializedTypeReference> {
    return $.utils.getList(3, SerializedTypeObjectLiteral._Decorators, this);
  }
  _hasDecorators(): boolean {
    return !$.utils.isNull($.utils.getPointer(3, this));
  }
  _initDecorators(length: number): $.List<SerializedTypeReference> {
    return $.utils.initList(3, SerializedTypeObjectLiteral._Decorators, length, this);
  }
  set decorators(value: $.List<SerializedTypeReference>) {
    $.utils.copyFrom(value, $.utils.getPointer(3, this));
  }
  get kind(): ReflectionKind {
    return $.utils.getUint16(0, this) as ReflectionKind;
  }
  set kind(value: ReflectionKind) {
    $.utils.setUint16(0, value, this);
  }
  _adoptTypes(value: $.Orphan<$.List<SerializedTypeReference>>): void {
    $.utils.adopt(value, $.utils.getPointer(4, this));
  }
  _disownTypes(): $.Orphan<$.List<SerializedTypeReference>> {
    return $.utils.disown(this.types);
  }
  get types(): $.List<SerializedTypeReference> {
    return $.utils.getList(4, SerializedTypeObjectLiteral._Types, this);
  }
  _hasTypes(): boolean {
    return !$.utils.isNull($.utils.getPointer(4, this));
  }
  _initTypes(length: number): $.List<SerializedTypeReference> {
    return $.utils.initList(4, SerializedTypeObjectLiteral._Types, length, this);
  }
  set types(value: $.List<SerializedTypeReference>) {
    $.utils.copyFrom(value, $.utils.getPointer(4, this));
  }
  _adoptTags(value: $.Orphan<TagsReflection>): void {
    $.utils.adopt(value, $.utils.getPointer(5, this));
  }
  _disownTags(): $.Orphan<TagsReflection> {
    return $.utils.disown(this.tags);
  }
  get tags(): TagsReflection {
    return $.utils.getStruct(5, TagsReflection, this);
  }
  _hasTags(): boolean {
    return !$.utils.isNull($.utils.getPointer(5, this));
  }
  _initTags(): TagsReflection {
    return $.utils.initStructAt(5, TagsReflection, this);
  }
  set tags(value: TagsReflection) {
    $.utils.copyFrom(value, $.utils.getPointer(5, this));
  }
  public override toString(): string { return "SerializedTypeObjectLiteral_" + super.toString(); }
}
export class SerializedTypeClassType extends $.Struct {
  public static override readonly _capnp = {
    displayName: "SerializedTypeClassType",
    id: "9855392bf9c48b25",
    size: new $.ObjectSize(8, 11),
  };
  static _TypeArguments: $.ListCtor<SerializedTypeReference>;
  static _Decorators: $.ListCtor<SerializedTypeReference>;
  static _ExtendsArguments: $.ListCtor<SerializedTypeReference>;
  static _Arguments: $.ListCtor<SerializedTypeReference>;
  static _Types: $.ListCtor<SerializedTypeReference>;
  get typeName(): string {
    return $.utils.getText(0, this);
  }
  set typeName(value: string) {
    $.utils.setText(0, value, this);
  }
  _adoptTypeArguments(value: $.Orphan<$.List<SerializedTypeReference>>): void {
    $.utils.adopt(value, $.utils.getPointer(1, this));
  }
  _disownTypeArguments(): $.Orphan<$.List<SerializedTypeReference>> {
    return $.utils.disown(this.typeArguments);
  }
  get typeArguments(): $.List<SerializedTypeReference> {
    return $.utils.getList(1, SerializedTypeClassType._TypeArguments, this);
  }
  _hasTypeArguments(): boolean {
    return !$.utils.isNull($.utils.getPointer(1, this));
  }
  _initTypeArguments(length: number): $.List<SerializedTypeReference> {
    return $.utils.initList(1, SerializedTypeClassType._TypeArguments, length, this);
  }
  set typeArguments(value: $.List<SerializedTypeReference>) {
    $.utils.copyFrom(value, $.utils.getPointer(1, this));
  }
  _adoptIndexAccessOrigin(value: $.Orphan<IndexAccessOrigin>): void {
    $.utils.adopt(value, $.utils.getPointer(2, this));
  }
  _disownIndexAccessOrigin(): $.Orphan<IndexAccessOrigin> {
    return $.utils.disown(this.indexAccessOrigin);
  }
  get indexAccessOrigin(): IndexAccessOrigin {
    return $.utils.getStruct(2, IndexAccessOrigin, this);
  }
  _hasIndexAccessOrigin(): boolean {
    return !$.utils.isNull($.utils.getPointer(2, this));
  }
  _initIndexAccessOrigin(): IndexAccessOrigin {
    return $.utils.initStructAt(2, IndexAccessOrigin, this);
  }
  set indexAccessOrigin(value: IndexAccessOrigin) {
    $.utils.copyFrom(value, $.utils.getPointer(2, this));
  }
  _adoptDecorators(value: $.Orphan<$.List<SerializedTypeReference>>): void {
    $.utils.adopt(value, $.utils.getPointer(3, this));
  }
  _disownDecorators(): $.Orphan<$.List<SerializedTypeReference>> {
    return $.utils.disown(this.decorators);
  }
  get decorators(): $.List<SerializedTypeReference> {
    return $.utils.getList(3, SerializedTypeClassType._Decorators, this);
  }
  _hasDecorators(): boolean {
    return !$.utils.isNull($.utils.getPointer(3, this));
  }
  _initDecorators(length: number): $.List<SerializedTypeReference> {
    return $.utils.initList(3, SerializedTypeClassType._Decorators, length, this);
  }
  set decorators(value: $.List<SerializedTypeReference>) {
    $.utils.copyFrom(value, $.utils.getPointer(3, this));
  }
  get kind(): ReflectionKind {
    return $.utils.getUint16(0, this) as ReflectionKind;
  }
  set kind(value: ReflectionKind) {
    $.utils.setUint16(0, value, this);
  }
  get name(): string {
    return $.utils.getText(4, this);
  }
  set name(value: string) {
    $.utils.setText(4, value, this);
  }
  get globalObject(): boolean {
    return $.utils.getBit(16, this);
  }
  set globalObject(value: boolean) {
    $.utils.setBit(16, value, this);
  }
  get classType(): string {
    return $.utils.getText(5, this);
  }
  set classType(value: string) {
    $.utils.setText(5, value, this);
  }
  _adoptExtendsArguments(value: $.Orphan<$.List<SerializedTypeReference>>): void {
    $.utils.adopt(value, $.utils.getPointer(6, this));
  }
  _disownExtendsArguments(): $.Orphan<$.List<SerializedTypeReference>> {
    return $.utils.disown(this.extendsArguments);
  }
  get extendsArguments(): $.List<SerializedTypeReference> {
    return $.utils.getList(6, SerializedTypeClassType._ExtendsArguments, this);
  }
  _hasExtendsArguments(): boolean {
    return !$.utils.isNull($.utils.getPointer(6, this));
  }
  _initExtendsArguments(length: number): $.List<SerializedTypeReference> {
    return $.utils.initList(6, SerializedTypeClassType._ExtendsArguments, length, this);
  }
  set extendsArguments(value: $.List<SerializedTypeReference>) {
    $.utils.copyFrom(value, $.utils.getPointer(6, this));
  }
  _adoptArguments(value: $.Orphan<$.List<SerializedTypeReference>>): void {
    $.utils.adopt(value, $.utils.getPointer(7, this));
  }
  _disownArguments(): $.Orphan<$.List<SerializedTypeReference>> {
    return $.utils.disown(this.arguments);
  }
  get arguments(): $.List<SerializedTypeReference> {
    return $.utils.getList(7, SerializedTypeClassType._Arguments, this);
  }
  _hasArguments(): boolean {
    return !$.utils.isNull($.utils.getPointer(7, this));
  }
  _initArguments(length: number): $.List<SerializedTypeReference> {
    return $.utils.initList(7, SerializedTypeClassType._Arguments, length, this);
  }
  set arguments(value: $.List<SerializedTypeReference>) {
    $.utils.copyFrom(value, $.utils.getPointer(7, this));
  }
  _adoptSuperClass(value: $.Orphan<SerializedTypeReference>): void {
    $.utils.adopt(value, $.utils.getPointer(8, this));
  }
  _disownSuperClass(): $.Orphan<SerializedTypeReference> {
    return $.utils.disown(this.superClass);
  }
  get superClass(): SerializedTypeReference {
    return $.utils.getStruct(8, SerializedTypeReference, this);
  }
  _hasSuperClass(): boolean {
    return !$.utils.isNull($.utils.getPointer(8, this));
  }
  _initSuperClass(): SerializedTypeReference {
    return $.utils.initStructAt(8, SerializedTypeReference, this);
  }
  set superClass(value: SerializedTypeReference) {
    $.utils.copyFrom(value, $.utils.getPointer(8, this));
  }
  _adoptTypes(value: $.Orphan<$.List<SerializedTypeReference>>): void {
    $.utils.adopt(value, $.utils.getPointer(9, this));
  }
  _disownTypes(): $.Orphan<$.List<SerializedTypeReference>> {
    return $.utils.disown(this.types);
  }
  get types(): $.List<SerializedTypeReference> {
    return $.utils.getList(9, SerializedTypeClassType._Types, this);
  }
  _hasTypes(): boolean {
    return !$.utils.isNull($.utils.getPointer(9, this));
  }
  _initTypes(length: number): $.List<SerializedTypeReference> {
    return $.utils.initList(9, SerializedTypeClassType._Types, length, this);
  }
  set types(value: $.List<SerializedTypeReference>) {
    $.utils.copyFrom(value, $.utils.getPointer(9, this));
  }
  _adoptTags(value: $.Orphan<TagsReflection>): void {
    $.utils.adopt(value, $.utils.getPointer(10, this));
  }
  _disownTags(): $.Orphan<TagsReflection> {
    return $.utils.disown(this.tags);
  }
  get tags(): TagsReflection {
    return $.utils.getStruct(10, TagsReflection, this);
  }
  _hasTags(): boolean {
    return !$.utils.isNull($.utils.getPointer(10, this));
  }
  _initTags(): TagsReflection {
    return $.utils.initStructAt(10, TagsReflection, this);
  }
  set tags(value: TagsReflection) {
    $.utils.copyFrom(value, $.utils.getPointer(10, this));
  }
  public override toString(): string { return "SerializedTypeClassType_" + super.toString(); }
}
export class SerializedTypeParameter extends $.Struct {
  public static override readonly _capnp = {
    displayName: "SerializedTypeParameter",
    id: "fcbaa08bb97b8b1a",
    size: new $.ObjectSize(8, 8),
  };
  static _TypeArguments: $.ListCtor<SerializedTypeReference>;
  static _Decorators: $.ListCtor<SerializedTypeReference>;
  get typeName(): string {
    return $.utils.getText(0, this);
  }
  set typeName(value: string) {
    $.utils.setText(0, value, this);
  }
  _adoptTypeArguments(value: $.Orphan<$.List<SerializedTypeReference>>): void {
    $.utils.adopt(value, $.utils.getPointer(1, this));
  }
  _disownTypeArguments(): $.Orphan<$.List<SerializedTypeReference>> {
    return $.utils.disown(this.typeArguments);
  }
  get typeArguments(): $.List<SerializedTypeReference> {
    return $.utils.getList(1, SerializedTypeParameter._TypeArguments, this);
  }
  _hasTypeArguments(): boolean {
    return !$.utils.isNull($.utils.getPointer(1, this));
  }
  _initTypeArguments(length: number): $.List<SerializedTypeReference> {
    return $.utils.initList(1, SerializedTypeParameter._TypeArguments, length, this);
  }
  set typeArguments(value: $.List<SerializedTypeReference>) {
    $.utils.copyFrom(value, $.utils.getPointer(1, this));
  }
  _adoptIndexAccessOrigin(value: $.Orphan<IndexAccessOrigin>): void {
    $.utils.adopt(value, $.utils.getPointer(2, this));
  }
  _disownIndexAccessOrigin(): $.Orphan<IndexAccessOrigin> {
    return $.utils.disown(this.indexAccessOrigin);
  }
  get indexAccessOrigin(): IndexAccessOrigin {
    return $.utils.getStruct(2, IndexAccessOrigin, this);
  }
  _hasIndexAccessOrigin(): boolean {
    return !$.utils.isNull($.utils.getPointer(2, this));
  }
  _initIndexAccessOrigin(): IndexAccessOrigin {
    return $.utils.initStructAt(2, IndexAccessOrigin, this);
  }
  set indexAccessOrigin(value: IndexAccessOrigin) {
    $.utils.copyFrom(value, $.utils.getPointer(2, this));
  }
  _adoptDecorators(value: $.Orphan<$.List<SerializedTypeReference>>): void {
    $.utils.adopt(value, $.utils.getPointer(3, this));
  }
  _disownDecorators(): $.Orphan<$.List<SerializedTypeReference>> {
    return $.utils.disown(this.decorators);
  }
  get decorators(): $.List<SerializedTypeReference> {
    return $.utils.getList(3, SerializedTypeParameter._Decorators, this);
  }
  _hasDecorators(): boolean {
    return !$.utils.isNull($.utils.getPointer(3, this));
  }
  _initDecorators(length: number): $.List<SerializedTypeReference> {
    return $.utils.initList(3, SerializedTypeParameter._Decorators, length, this);
  }
  set decorators(value: $.List<SerializedTypeReference>) {
    $.utils.copyFrom(value, $.utils.getPointer(3, this));
  }
  get kind(): ReflectionKind {
    return $.utils.getUint16(0, this) as ReflectionKind;
  }
  set kind(value: ReflectionKind) {
    $.utils.setUint16(0, value, this);
  }
  get name(): string {
    return $.utils.getText(4, this);
  }
  set name(value: string) {
    $.utils.setText(4, value, this);
  }
  _adoptType(value: $.Orphan<SerializedTypeReference>): void {
    $.utils.adopt(value, $.utils.getPointer(5, this));
  }
  _disownType(): $.Orphan<SerializedTypeReference> {
    return $.utils.disown(this.type);
  }
  get type(): SerializedTypeReference {
    return $.utils.getStruct(5, SerializedTypeReference, this);
  }
  _hasType(): boolean {
    return !$.utils.isNull($.utils.getPointer(5, this));
  }
  _initType(): SerializedTypeReference {
    return $.utils.initStructAt(5, SerializedTypeReference, this);
  }
  set type(value: SerializedTypeReference) {
    $.utils.copyFrom(value, $.utils.getPointer(5, this));
  }
  get visibility(): ReflectionVisibility {
    return $.utils.getUint16(2, this) as ReflectionVisibility;
  }
  set visibility(value: ReflectionVisibility) {
    $.utils.setUint16(2, value, this);
  }
  get readonly(): boolean {
    return $.utils.getBit(32, this);
  }
  set readonly(value: boolean) {
    $.utils.setBit(32, value, this);
  }
  get optional(): boolean {
    return $.utils.getBit(33, this);
  }
  set optional(value: boolean) {
    $.utils.setBit(33, value, this);
  }
  _adoptDefault(value: $.Orphan<DefaultValueReflection>): void {
    $.utils.adopt(value, $.utils.getPointer(6, this));
  }
  _disownDefault(): $.Orphan<DefaultValueReflection> {
    return $.utils.disown(this.default);
  }
  get default(): DefaultValueReflection {
    return $.utils.getStruct(6, DefaultValueReflection, this);
  }
  _hasDefault(): boolean {
    return !$.utils.isNull($.utils.getPointer(6, this));
  }
  _initDefault(): DefaultValueReflection {
    return $.utils.initStructAt(6, DefaultValueReflection, this);
  }
  set default(value: DefaultValueReflection) {
    $.utils.copyFrom(value, $.utils.getPointer(6, this));
  }
  _adoptTags(value: $.Orphan<TagsReflection>): void {
    $.utils.adopt(value, $.utils.getPointer(7, this));
  }
  _disownTags(): $.Orphan<TagsReflection> {
    return $.utils.disown(this.tags);
  }
  get tags(): TagsReflection {
    return $.utils.getStruct(7, TagsReflection, this);
  }
  _hasTags(): boolean {
    return !$.utils.isNull($.utils.getPointer(7, this));
  }
  _initTags(): TagsReflection {
    return $.utils.initStructAt(7, TagsReflection, this);
  }
  set tags(value: TagsReflection) {
    $.utils.copyFrom(value, $.utils.getPointer(7, this));
  }
  public override toString(): string { return "SerializedTypeParameter_" + super.toString(); }
}
export class SerializedTypeMethod extends $.Struct {
  public static override readonly _capnp = {
    displayName: "SerializedTypeMethod",
    id: "8b5eff6d9ec2fb06",
    size: new $.ObjectSize(8, 8),
  };
  static _TypeArguments: $.ListCtor<SerializedTypeReference>;
  static _Decorators: $.ListCtor<SerializedTypeReference>;
  static _Parameters: $.ListCtor<SerializedTypeParameter>;
  get typeName(): string {
    return $.utils.getText(0, this);
  }
  set typeName(value: string) {
    $.utils.setText(0, value, this);
  }
  _adoptTypeArguments(value: $.Orphan<$.List<SerializedTypeReference>>): void {
    $.utils.adopt(value, $.utils.getPointer(1, this));
  }
  _disownTypeArguments(): $.Orphan<$.List<SerializedTypeReference>> {
    return $.utils.disown(this.typeArguments);
  }
  get typeArguments(): $.List<SerializedTypeReference> {
    return $.utils.getList(1, SerializedTypeMethod._TypeArguments, this);
  }
  _hasTypeArguments(): boolean {
    return !$.utils.isNull($.utils.getPointer(1, this));
  }
  _initTypeArguments(length: number): $.List<SerializedTypeReference> {
    return $.utils.initList(1, SerializedTypeMethod._TypeArguments, length, this);
  }
  set typeArguments(value: $.List<SerializedTypeReference>) {
    $.utils.copyFrom(value, $.utils.getPointer(1, this));
  }
  _adoptIndexAccessOrigin(value: $.Orphan<IndexAccessOrigin>): void {
    $.utils.adopt(value, $.utils.getPointer(2, this));
  }
  _disownIndexAccessOrigin(): $.Orphan<IndexAccessOrigin> {
    return $.utils.disown(this.indexAccessOrigin);
  }
  get indexAccessOrigin(): IndexAccessOrigin {
    return $.utils.getStruct(2, IndexAccessOrigin, this);
  }
  _hasIndexAccessOrigin(): boolean {
    return !$.utils.isNull($.utils.getPointer(2, this));
  }
  _initIndexAccessOrigin(): IndexAccessOrigin {
    return $.utils.initStructAt(2, IndexAccessOrigin, this);
  }
  set indexAccessOrigin(value: IndexAccessOrigin) {
    $.utils.copyFrom(value, $.utils.getPointer(2, this));
  }
  _adoptDecorators(value: $.Orphan<$.List<SerializedTypeReference>>): void {
    $.utils.adopt(value, $.utils.getPointer(3, this));
  }
  _disownDecorators(): $.Orphan<$.List<SerializedTypeReference>> {
    return $.utils.disown(this.decorators);
  }
  get decorators(): $.List<SerializedTypeReference> {
    return $.utils.getList(3, SerializedTypeMethod._Decorators, this);
  }
  _hasDecorators(): boolean {
    return !$.utils.isNull($.utils.getPointer(3, this));
  }
  _initDecorators(length: number): $.List<SerializedTypeReference> {
    return $.utils.initList(3, SerializedTypeMethod._Decorators, length, this);
  }
  set decorators(value: $.List<SerializedTypeReference>) {
    $.utils.copyFrom(value, $.utils.getPointer(3, this));
  }
  get visibility(): ReflectionVisibility {
    return $.utils.getUint16(0, this) as ReflectionVisibility;
  }
  set visibility(value: ReflectionVisibility) {
    $.utils.setUint16(0, value, this);
  }
  get abstract(): boolean {
    return $.utils.getBit(16, this);
  }
  set abstract(value: boolean) {
    $.utils.setBit(16, value, this);
  }
  get optional(): boolean {
    return $.utils.getBit(17, this);
  }
  set optional(value: boolean) {
    $.utils.setBit(17, value, this);
  }
  get readonly(): boolean {
    return $.utils.getBit(18, this);
  }
  set readonly(value: boolean) {
    $.utils.setBit(18, value, this);
  }
  _adoptTags(value: $.Orphan<TagsReflection>): void {
    $.utils.adopt(value, $.utils.getPointer(4, this));
  }
  _disownTags(): $.Orphan<TagsReflection> {
    return $.utils.disown(this.tags);
  }
  get tags(): TagsReflection {
    return $.utils.getStruct(4, TagsReflection, this);
  }
  _hasTags(): boolean {
    return !$.utils.isNull($.utils.getPointer(4, this));
  }
  _initTags(): TagsReflection {
    return $.utils.initStructAt(4, TagsReflection, this);
  }
  set tags(value: TagsReflection) {
    $.utils.copyFrom(value, $.utils.getPointer(4, this));
  }
  get kind(): ReflectionKind {
    return $.utils.getUint16(4, this) as ReflectionKind;
  }
  set kind(value: ReflectionKind) {
    $.utils.setUint16(4, value, this);
  }
  get name(): string {
    return $.utils.getText(5, this);
  }
  set name(value: string) {
    $.utils.setText(5, value, this);
  }
  _adoptParameters(value: $.Orphan<$.List<SerializedTypeParameter>>): void {
    $.utils.adopt(value, $.utils.getPointer(6, this));
  }
  _disownParameters(): $.Orphan<$.List<SerializedTypeParameter>> {
    return $.utils.disown(this.parameters);
  }
  get parameters(): $.List<SerializedTypeParameter> {
    return $.utils.getList(6, SerializedTypeMethod._Parameters, this);
  }
  _hasParameters(): boolean {
    return !$.utils.isNull($.utils.getPointer(6, this));
  }
  _initParameters(length: number): $.List<SerializedTypeParameter> {
    return $.utils.initList(6, SerializedTypeMethod._Parameters, length, this);
  }
  set parameters(value: $.List<SerializedTypeParameter>) {
    $.utils.copyFrom(value, $.utils.getPointer(6, this));
  }
  _adoptReturn(value: $.Orphan<SerializedTypeReference>): void {
    $.utils.adopt(value, $.utils.getPointer(7, this));
  }
  _disownReturn(): $.Orphan<SerializedTypeReference> {
    return $.utils.disown(this.return);
  }
  get return(): SerializedTypeReference {
    return $.utils.getStruct(7, SerializedTypeReference, this);
  }
  _hasReturn(): boolean {
    return !$.utils.isNull($.utils.getPointer(7, this));
  }
  _initReturn(): SerializedTypeReference {
    return $.utils.initStructAt(7, SerializedTypeReference, this);
  }
  set return(value: SerializedTypeReference) {
    $.utils.copyFrom(value, $.utils.getPointer(7, this));
  }
  public override toString(): string { return "SerializedTypeMethod_" + super.toString(); }
}
export class SerializedTypeProperty extends $.Struct {
  public static override readonly _capnp = {
    displayName: "SerializedTypeProperty",
    id: "91d9dbea2037f78b",
    size: new $.ObjectSize(8, 9),
  };
  static _TypeArguments: $.ListCtor<SerializedTypeReference>;
  static _Decorators: $.ListCtor<SerializedTypeReference>;
  get typeName(): string {
    return $.utils.getText(0, this);
  }
  set typeName(value: string) {
    $.utils.setText(0, value, this);
  }
  _adoptTypeArguments(value: $.Orphan<$.List<SerializedTypeReference>>): void {
    $.utils.adopt(value, $.utils.getPointer(1, this));
  }
  _disownTypeArguments(): $.Orphan<$.List<SerializedTypeReference>> {
    return $.utils.disown(this.typeArguments);
  }
  get typeArguments(): $.List<SerializedTypeReference> {
    return $.utils.getList(1, SerializedTypeProperty._TypeArguments, this);
  }
  _hasTypeArguments(): boolean {
    return !$.utils.isNull($.utils.getPointer(1, this));
  }
  _initTypeArguments(length: number): $.List<SerializedTypeReference> {
    return $.utils.initList(1, SerializedTypeProperty._TypeArguments, length, this);
  }
  set typeArguments(value: $.List<SerializedTypeReference>) {
    $.utils.copyFrom(value, $.utils.getPointer(1, this));
  }
  _adoptIndexAccessOrigin(value: $.Orphan<IndexAccessOrigin>): void {
    $.utils.adopt(value, $.utils.getPointer(2, this));
  }
  _disownIndexAccessOrigin(): $.Orphan<IndexAccessOrigin> {
    return $.utils.disown(this.indexAccessOrigin);
  }
  get indexAccessOrigin(): IndexAccessOrigin {
    return $.utils.getStruct(2, IndexAccessOrigin, this);
  }
  _hasIndexAccessOrigin(): boolean {
    return !$.utils.isNull($.utils.getPointer(2, this));
  }
  _initIndexAccessOrigin(): IndexAccessOrigin {
    return $.utils.initStructAt(2, IndexAccessOrigin, this);
  }
  set indexAccessOrigin(value: IndexAccessOrigin) {
    $.utils.copyFrom(value, $.utils.getPointer(2, this));
  }
  _adoptDecorators(value: $.Orphan<$.List<SerializedTypeReference>>): void {
    $.utils.adopt(value, $.utils.getPointer(3, this));
  }
  _disownDecorators(): $.Orphan<$.List<SerializedTypeReference>> {
    return $.utils.disown(this.decorators);
  }
  get decorators(): $.List<SerializedTypeReference> {
    return $.utils.getList(3, SerializedTypeProperty._Decorators, this);
  }
  _hasDecorators(): boolean {
    return !$.utils.isNull($.utils.getPointer(3, this));
  }
  _initDecorators(length: number): $.List<SerializedTypeReference> {
    return $.utils.initList(3, SerializedTypeProperty._Decorators, length, this);
  }
  set decorators(value: $.List<SerializedTypeReference>) {
    $.utils.copyFrom(value, $.utils.getPointer(3, this));
  }
  get visibility(): ReflectionVisibility {
    return $.utils.getUint16(0, this) as ReflectionVisibility;
  }
  set visibility(value: ReflectionVisibility) {
    $.utils.setUint16(0, value, this);
  }
  get abstract(): boolean {
    return $.utils.getBit(16, this);
  }
  set abstract(value: boolean) {
    $.utils.setBit(16, value, this);
  }
  get optional(): boolean {
    return $.utils.getBit(17, this);
  }
  set optional(value: boolean) {
    $.utils.setBit(17, value, this);
  }
  get readonly(): boolean {
    return $.utils.getBit(18, this);
  }
  set readonly(value: boolean) {
    $.utils.setBit(18, value, this);
  }
  _adoptTags(value: $.Orphan<TagsReflection>): void {
    $.utils.adopt(value, $.utils.getPointer(4, this));
  }
  _disownTags(): $.Orphan<TagsReflection> {
    return $.utils.disown(this.tags);
  }
  get tags(): TagsReflection {
    return $.utils.getStruct(4, TagsReflection, this);
  }
  _hasTags(): boolean {
    return !$.utils.isNull($.utils.getPointer(4, this));
  }
  _initTags(): TagsReflection {
    return $.utils.initStructAt(4, TagsReflection, this);
  }
  set tags(value: TagsReflection) {
    $.utils.copyFrom(value, $.utils.getPointer(4, this));
  }
  get kind(): ReflectionKind {
    return $.utils.getUint16(4, this) as ReflectionKind;
  }
  set kind(value: ReflectionKind) {
    $.utils.setUint16(4, value, this);
  }
  get name(): string {
    return $.utils.getText(5, this);
  }
  set name(value: string) {
    $.utils.setText(5, value, this);
  }
  get description(): string {
    return $.utils.getText(6, this);
  }
  set description(value: string) {
    $.utils.setText(6, value, this);
  }
  _adoptType(value: $.Orphan<SerializedTypeReference>): void {
    $.utils.adopt(value, $.utils.getPointer(7, this));
  }
  _disownType(): $.Orphan<SerializedTypeReference> {
    return $.utils.disown(this.type);
  }
  get type(): SerializedTypeReference {
    return $.utils.getStruct(7, SerializedTypeReference, this);
  }
  _hasType(): boolean {
    return !$.utils.isNull($.utils.getPointer(7, this));
  }
  _initType(): SerializedTypeReference {
    return $.utils.initStructAt(7, SerializedTypeReference, this);
  }
  set type(value: SerializedTypeReference) {
    $.utils.copyFrom(value, $.utils.getPointer(7, this));
  }
  _adoptDefault(value: $.Orphan<DefaultValueReflection>): void {
    $.utils.adopt(value, $.utils.getPointer(8, this));
  }
  _disownDefault(): $.Orphan<DefaultValueReflection> {
    return $.utils.disown(this.default);
  }
  get default(): DefaultValueReflection {
    return $.utils.getStruct(8, DefaultValueReflection, this);
  }
  _hasDefault(): boolean {
    return !$.utils.isNull($.utils.getPointer(8, this));
  }
  _initDefault(): DefaultValueReflection {
    return $.utils.initStructAt(8, DefaultValueReflection, this);
  }
  set default(value: DefaultValueReflection) {
    $.utils.copyFrom(value, $.utils.getPointer(8, this));
  }
  public override toString(): string { return "SerializedTypeProperty_" + super.toString(); }
}
export class SerializedTypeFunction extends $.Struct {
  public static override readonly _capnp = {
    displayName: "SerializedTypeFunction",
    id: "9130bccd82dfcfd4",
    size: new $.ObjectSize(8, 8),
  };
  static _TypeArguments: $.ListCtor<SerializedTypeReference>;
  static _Decorators: $.ListCtor<SerializedTypeReference>;
  static _Parameters: $.ListCtor<SerializedTypeParameter>;
  get typeName(): string {
    return $.utils.getText(0, this);
  }
  set typeName(value: string) {
    $.utils.setText(0, value, this);
  }
  _adoptTypeArguments(value: $.Orphan<$.List<SerializedTypeReference>>): void {
    $.utils.adopt(value, $.utils.getPointer(1, this));
  }
  _disownTypeArguments(): $.Orphan<$.List<SerializedTypeReference>> {
    return $.utils.disown(this.typeArguments);
  }
  get typeArguments(): $.List<SerializedTypeReference> {
    return $.utils.getList(1, SerializedTypeFunction._TypeArguments, this);
  }
  _hasTypeArguments(): boolean {
    return !$.utils.isNull($.utils.getPointer(1, this));
  }
  _initTypeArguments(length: number): $.List<SerializedTypeReference> {
    return $.utils.initList(1, SerializedTypeFunction._TypeArguments, length, this);
  }
  set typeArguments(value: $.List<SerializedTypeReference>) {
    $.utils.copyFrom(value, $.utils.getPointer(1, this));
  }
  _adoptIndexAccessOrigin(value: $.Orphan<IndexAccessOrigin>): void {
    $.utils.adopt(value, $.utils.getPointer(2, this));
  }
  _disownIndexAccessOrigin(): $.Orphan<IndexAccessOrigin> {
    return $.utils.disown(this.indexAccessOrigin);
  }
  get indexAccessOrigin(): IndexAccessOrigin {
    return $.utils.getStruct(2, IndexAccessOrigin, this);
  }
  _hasIndexAccessOrigin(): boolean {
    return !$.utils.isNull($.utils.getPointer(2, this));
  }
  _initIndexAccessOrigin(): IndexAccessOrigin {
    return $.utils.initStructAt(2, IndexAccessOrigin, this);
  }
  set indexAccessOrigin(value: IndexAccessOrigin) {
    $.utils.copyFrom(value, $.utils.getPointer(2, this));
  }
  _adoptDecorators(value: $.Orphan<$.List<SerializedTypeReference>>): void {
    $.utils.adopt(value, $.utils.getPointer(3, this));
  }
  _disownDecorators(): $.Orphan<$.List<SerializedTypeReference>> {
    return $.utils.disown(this.decorators);
  }
  get decorators(): $.List<SerializedTypeReference> {
    return $.utils.getList(3, SerializedTypeFunction._Decorators, this);
  }
  _hasDecorators(): boolean {
    return !$.utils.isNull($.utils.getPointer(3, this));
  }
  _initDecorators(length: number): $.List<SerializedTypeReference> {
    return $.utils.initList(3, SerializedTypeFunction._Decorators, length, this);
  }
  set decorators(value: $.List<SerializedTypeReference>) {
    $.utils.copyFrom(value, $.utils.getPointer(3, this));
  }
  get visibility(): ReflectionVisibility {
    return $.utils.getUint16(0, this) as ReflectionVisibility;
  }
  set visibility(value: ReflectionVisibility) {
    $.utils.setUint16(0, value, this);
  }
  get abstract(): boolean {
    return $.utils.getBit(16, this);
  }
  set abstract(value: boolean) {
    $.utils.setBit(16, value, this);
  }
  get optional(): boolean {
    return $.utils.getBit(17, this);
  }
  set optional(value: boolean) {
    $.utils.setBit(17, value, this);
  }
  get readonly(): boolean {
    return $.utils.getBit(18, this);
  }
  set readonly(value: boolean) {
    $.utils.setBit(18, value, this);
  }
  _adoptTags(value: $.Orphan<TagsReflection>): void {
    $.utils.adopt(value, $.utils.getPointer(4, this));
  }
  _disownTags(): $.Orphan<TagsReflection> {
    return $.utils.disown(this.tags);
  }
  get tags(): TagsReflection {
    return $.utils.getStruct(4, TagsReflection, this);
  }
  _hasTags(): boolean {
    return !$.utils.isNull($.utils.getPointer(4, this));
  }
  _initTags(): TagsReflection {
    return $.utils.initStructAt(4, TagsReflection, this);
  }
  set tags(value: TagsReflection) {
    $.utils.copyFrom(value, $.utils.getPointer(4, this));
  }
  get kind(): ReflectionKind {
    return $.utils.getUint16(4, this) as ReflectionKind;
  }
  set kind(value: ReflectionKind) {
    $.utils.setUint16(4, value, this);
  }
  get name(): string {
    return $.utils.getText(5, this);
  }
  set name(value: string) {
    $.utils.setText(5, value, this);
  }
  _adoptParameters(value: $.Orphan<$.List<SerializedTypeParameter>>): void {
    $.utils.adopt(value, $.utils.getPointer(6, this));
  }
  _disownParameters(): $.Orphan<$.List<SerializedTypeParameter>> {
    return $.utils.disown(this.parameters);
  }
  get parameters(): $.List<SerializedTypeParameter> {
    return $.utils.getList(6, SerializedTypeFunction._Parameters, this);
  }
  _hasParameters(): boolean {
    return !$.utils.isNull($.utils.getPointer(6, this));
  }
  _initParameters(length: number): $.List<SerializedTypeParameter> {
    return $.utils.initList(6, SerializedTypeFunction._Parameters, length, this);
  }
  set parameters(value: $.List<SerializedTypeParameter>) {
    $.utils.copyFrom(value, $.utils.getPointer(6, this));
  }
  _adoptReturn(value: $.Orphan<SerializedTypeReference>): void {
    $.utils.adopt(value, $.utils.getPointer(7, this));
  }
  _disownReturn(): $.Orphan<SerializedTypeReference> {
    return $.utils.disown(this.return);
  }
  get return(): SerializedTypeReference {
    return $.utils.getStruct(7, SerializedTypeReference, this);
  }
  _hasReturn(): boolean {
    return !$.utils.isNull($.utils.getPointer(7, this));
  }
  _initReturn(): SerializedTypeReference {
    return $.utils.initStructAt(7, SerializedTypeReference, this);
  }
  set return(value: SerializedTypeReference) {
    $.utils.copyFrom(value, $.utils.getPointer(7, this));
  }
  public override toString(): string { return "SerializedTypeFunction_" + super.toString(); }
}
export class SerializedTypePromise extends $.Struct {
  public static override readonly _capnp = {
    displayName: "SerializedTypePromise",
    id: "e9b0cbe936a42398",
    size: new $.ObjectSize(8, 4),
  };
  static _TypeArguments: $.ListCtor<SerializedTypeReference>;
  static _Decorators: $.ListCtor<SerializedTypeReference>;
  get typeName(): string {
    return $.utils.getText(0, this);
  }
  set typeName(value: string) {
    $.utils.setText(0, value, this);
  }
  _adoptTypeArguments(value: $.Orphan<$.List<SerializedTypeReference>>): void {
    $.utils.adopt(value, $.utils.getPointer(1, this));
  }
  _disownTypeArguments(): $.Orphan<$.List<SerializedTypeReference>> {
    return $.utils.disown(this.typeArguments);
  }
  get typeArguments(): $.List<SerializedTypeReference> {
    return $.utils.getList(1, SerializedTypePromise._TypeArguments, this);
  }
  _hasTypeArguments(): boolean {
    return !$.utils.isNull($.utils.getPointer(1, this));
  }
  _initTypeArguments(length: number): $.List<SerializedTypeReference> {
    return $.utils.initList(1, SerializedTypePromise._TypeArguments, length, this);
  }
  set typeArguments(value: $.List<SerializedTypeReference>) {
    $.utils.copyFrom(value, $.utils.getPointer(1, this));
  }
  _adoptIndexAccessOrigin(value: $.Orphan<IndexAccessOrigin>): void {
    $.utils.adopt(value, $.utils.getPointer(2, this));
  }
  _disownIndexAccessOrigin(): $.Orphan<IndexAccessOrigin> {
    return $.utils.disown(this.indexAccessOrigin);
  }
  get indexAccessOrigin(): IndexAccessOrigin {
    return $.utils.getStruct(2, IndexAccessOrigin, this);
  }
  _hasIndexAccessOrigin(): boolean {
    return !$.utils.isNull($.utils.getPointer(2, this));
  }
  _initIndexAccessOrigin(): IndexAccessOrigin {
    return $.utils.initStructAt(2, IndexAccessOrigin, this);
  }
  set indexAccessOrigin(value: IndexAccessOrigin) {
    $.utils.copyFrom(value, $.utils.getPointer(2, this));
  }
  _adoptDecorators(value: $.Orphan<$.List<SerializedTypeReference>>): void {
    $.utils.adopt(value, $.utils.getPointer(3, this));
  }
  _disownDecorators(): $.Orphan<$.List<SerializedTypeReference>> {
    return $.utils.disown(this.decorators);
  }
  get decorators(): $.List<SerializedTypeReference> {
    return $.utils.getList(3, SerializedTypePromise._Decorators, this);
  }
  _hasDecorators(): boolean {
    return !$.utils.isNull($.utils.getPointer(3, this));
  }
  _initDecorators(length: number): $.List<SerializedTypeReference> {
    return $.utils.initList(3, SerializedTypePromise._Decorators, length, this);
  }
  set decorators(value: $.List<SerializedTypeReference>) {
    $.utils.copyFrom(value, $.utils.getPointer(3, this));
  }
  get visibility(): ReflectionVisibility {
    return $.utils.getUint16(0, this) as ReflectionVisibility;
  }
  set visibility(value: ReflectionVisibility) {
    $.utils.setUint16(0, value, this);
  }
  get abstract(): boolean {
    return $.utils.getBit(16, this);
  }
  set abstract(value: boolean) {
    $.utils.setBit(16, value, this);
  }
  public override toString(): string { return "SerializedTypePromise_" + super.toString(); }
}
export class SerializedTypeEnumEntry extends $.Struct {
  public static override readonly _capnp = {
    displayName: "SerializedTypeEnumEntry",
    id: "d5bcb8b7c49ba556",
    size: new $.ObjectSize(0, 2),
  };
  get name(): string {
    return $.utils.getText(0, this);
  }
  set name(value: string) {
    $.utils.setText(0, value, this);
  }
  get value(): string {
    return $.utils.getText(1, this);
  }
  set value(value: string) {
    $.utils.setText(1, value, this);
  }
  public override toString(): string { return "SerializedTypeEnumEntry_" + super.toString(); }
}
export class SerializedTypeEnum extends $.Struct {
  public static override readonly _capnp = {
    displayName: "SerializedTypeEnum",
    id: "d7d36f0ae79e3841",
    size: new $.ObjectSize(8, 8),
  };
  static _TypeArguments: $.ListCtor<SerializedTypeReference>;
  static _Decorators: $.ListCtor<SerializedTypeReference>;
  static _EnumEntries: $.ListCtor<SerializedTypeEnumEntry>;
  get typeName(): string {
    return $.utils.getText(0, this);
  }
  set typeName(value: string) {
    $.utils.setText(0, value, this);
  }
  _adoptTypeArguments(value: $.Orphan<$.List<SerializedTypeReference>>): void {
    $.utils.adopt(value, $.utils.getPointer(1, this));
  }
  _disownTypeArguments(): $.Orphan<$.List<SerializedTypeReference>> {
    return $.utils.disown(this.typeArguments);
  }
  get typeArguments(): $.List<SerializedTypeReference> {
    return $.utils.getList(1, SerializedTypeEnum._TypeArguments, this);
  }
  _hasTypeArguments(): boolean {
    return !$.utils.isNull($.utils.getPointer(1, this));
  }
  _initTypeArguments(length: number): $.List<SerializedTypeReference> {
    return $.utils.initList(1, SerializedTypeEnum._TypeArguments, length, this);
  }
  set typeArguments(value: $.List<SerializedTypeReference>) {
    $.utils.copyFrom(value, $.utils.getPointer(1, this));
  }
  _adoptIndexAccessOrigin(value: $.Orphan<IndexAccessOrigin>): void {
    $.utils.adopt(value, $.utils.getPointer(2, this));
  }
  _disownIndexAccessOrigin(): $.Orphan<IndexAccessOrigin> {
    return $.utils.disown(this.indexAccessOrigin);
  }
  get indexAccessOrigin(): IndexAccessOrigin {
    return $.utils.getStruct(2, IndexAccessOrigin, this);
  }
  _hasIndexAccessOrigin(): boolean {
    return !$.utils.isNull($.utils.getPointer(2, this));
  }
  _initIndexAccessOrigin(): IndexAccessOrigin {
    return $.utils.initStructAt(2, IndexAccessOrigin, this);
  }
  set indexAccessOrigin(value: IndexAccessOrigin) {
    $.utils.copyFrom(value, $.utils.getPointer(2, this));
  }
  _adoptDecorators(value: $.Orphan<$.List<SerializedTypeReference>>): void {
    $.utils.adopt(value, $.utils.getPointer(3, this));
  }
  _disownDecorators(): $.Orphan<$.List<SerializedTypeReference>> {
    return $.utils.disown(this.decorators);
  }
  get decorators(): $.List<SerializedTypeReference> {
    return $.utils.getList(3, SerializedTypeEnum._Decorators, this);
  }
  _hasDecorators(): boolean {
    return !$.utils.isNull($.utils.getPointer(3, this));
  }
  _initDecorators(length: number): $.List<SerializedTypeReference> {
    return $.utils.initList(3, SerializedTypeEnum._Decorators, length, this);
  }
  set decorators(value: $.List<SerializedTypeReference>) {
    $.utils.copyFrom(value, $.utils.getPointer(3, this));
  }
  get kind(): ReflectionKind {
    return $.utils.getUint16(0, this) as ReflectionKind;
  }
  set kind(value: ReflectionKind) {
    $.utils.setUint16(0, value, this);
  }
  _adoptEnumEntries(value: $.Orphan<$.List<SerializedTypeEnumEntry>>): void {
    $.utils.adopt(value, $.utils.getPointer(4, this));
  }
  _disownEnumEntries(): $.Orphan<$.List<SerializedTypeEnumEntry>> {
    return $.utils.disown(this.enumEntries);
  }
  get enumEntries(): $.List<SerializedTypeEnumEntry> {
    return $.utils.getList(4, SerializedTypeEnum._EnumEntries, this);
  }
  _hasEnumEntries(): boolean {
    return !$.utils.isNull($.utils.getPointer(4, this));
  }
  _initEnumEntries(length: number): $.List<SerializedTypeEnumEntry> {
    return $.utils.initList(4, SerializedTypeEnum._EnumEntries, length, this);
  }
  set enumEntries(value: $.List<SerializedTypeEnumEntry>) {
    $.utils.copyFrom(value, $.utils.getPointer(4, this));
  }
  _adoptValues(value: $.Orphan<$.List<string>>): void {
    $.utils.adopt(value, $.utils.getPointer(5, this));
  }
  _disownValues(): $.Orphan<$.List<string>> {
    return $.utils.disown(this.values);
  }
  get values(): $.List<string> {
    return $.utils.getList(5, $.TextList, this);
  }
  _hasValues(): boolean {
    return !$.utils.isNull($.utils.getPointer(5, this));
  }
  _initValues(length: number): $.List<string> {
    return $.utils.initList(5, $.TextList, length, this);
  }
  set values(value: $.List<string>) {
    $.utils.copyFrom(value, $.utils.getPointer(5, this));
  }
  _adoptIndexType(value: $.Orphan<SerializedTypeReference>): void {
    $.utils.adopt(value, $.utils.getPointer(6, this));
  }
  _disownIndexType(): $.Orphan<SerializedTypeReference> {
    return $.utils.disown(this.indexType);
  }
  get indexType(): SerializedTypeReference {
    return $.utils.getStruct(6, SerializedTypeReference, this);
  }
  _hasIndexType(): boolean {
    return !$.utils.isNull($.utils.getPointer(6, this));
  }
  _initIndexType(): SerializedTypeReference {
    return $.utils.initStructAt(6, SerializedTypeReference, this);
  }
  set indexType(value: SerializedTypeReference) {
    $.utils.copyFrom(value, $.utils.getPointer(6, this));
  }
  _adoptTags(value: $.Orphan<TagsReflection>): void {
    $.utils.adopt(value, $.utils.getPointer(7, this));
  }
  _disownTags(): $.Orphan<TagsReflection> {
    return $.utils.disown(this.tags);
  }
  get tags(): TagsReflection {
    return $.utils.getStruct(7, TagsReflection, this);
  }
  _hasTags(): boolean {
    return !$.utils.isNull($.utils.getPointer(7, this));
  }
  _initTags(): TagsReflection {
    return $.utils.initStructAt(7, TagsReflection, this);
  }
  set tags(value: TagsReflection) {
    $.utils.copyFrom(value, $.utils.getPointer(7, this));
  }
  public override toString(): string { return "SerializedTypeEnum_" + super.toString(); }
}
export class SerializedTypeUnion extends $.Struct {
  public static override readonly _capnp = {
    displayName: "SerializedTypeUnion",
    id: "a9ae4c95e41ff4ab",
    size: new $.ObjectSize(8, 5),
  };
  static _TypeArguments: $.ListCtor<SerializedTypeReference>;
  static _Decorators: $.ListCtor<SerializedTypeReference>;
  static _Types: $.ListCtor<SerializedTypeReference>;
  get typeName(): string {
    return $.utils.getText(0, this);
  }
  set typeName(value: string) {
    $.utils.setText(0, value, this);
  }
  _adoptTypeArguments(value: $.Orphan<$.List<SerializedTypeReference>>): void {
    $.utils.adopt(value, $.utils.getPointer(1, this));
  }
  _disownTypeArguments(): $.Orphan<$.List<SerializedTypeReference>> {
    return $.utils.disown(this.typeArguments);
  }
  get typeArguments(): $.List<SerializedTypeReference> {
    return $.utils.getList(1, SerializedTypeUnion._TypeArguments, this);
  }
  _hasTypeArguments(): boolean {
    return !$.utils.isNull($.utils.getPointer(1, this));
  }
  _initTypeArguments(length: number): $.List<SerializedTypeReference> {
    return $.utils.initList(1, SerializedTypeUnion._TypeArguments, length, this);
  }
  set typeArguments(value: $.List<SerializedTypeReference>) {
    $.utils.copyFrom(value, $.utils.getPointer(1, this));
  }
  _adoptIndexAccessOrigin(value: $.Orphan<IndexAccessOrigin>): void {
    $.utils.adopt(value, $.utils.getPointer(2, this));
  }
  _disownIndexAccessOrigin(): $.Orphan<IndexAccessOrigin> {
    return $.utils.disown(this.indexAccessOrigin);
  }
  get indexAccessOrigin(): IndexAccessOrigin {
    return $.utils.getStruct(2, IndexAccessOrigin, this);
  }
  _hasIndexAccessOrigin(): boolean {
    return !$.utils.isNull($.utils.getPointer(2, this));
  }
  _initIndexAccessOrigin(): IndexAccessOrigin {
    return $.utils.initStructAt(2, IndexAccessOrigin, this);
  }
  set indexAccessOrigin(value: IndexAccessOrigin) {
    $.utils.copyFrom(value, $.utils.getPointer(2, this));
  }
  _adoptDecorators(value: $.Orphan<$.List<SerializedTypeReference>>): void {
    $.utils.adopt(value, $.utils.getPointer(3, this));
  }
  _disownDecorators(): $.Orphan<$.List<SerializedTypeReference>> {
    return $.utils.disown(this.decorators);
  }
  get decorators(): $.List<SerializedTypeReference> {
    return $.utils.getList(3, SerializedTypeUnion._Decorators, this);
  }
  _hasDecorators(): boolean {
    return !$.utils.isNull($.utils.getPointer(3, this));
  }
  _initDecorators(length: number): $.List<SerializedTypeReference> {
    return $.utils.initList(3, SerializedTypeUnion._Decorators, length, this);
  }
  set decorators(value: $.List<SerializedTypeReference>) {
    $.utils.copyFrom(value, $.utils.getPointer(3, this));
  }
  get kind(): ReflectionKind {
    return $.utils.getUint16(0, this) as ReflectionKind;
  }
  set kind(value: ReflectionKind) {
    $.utils.setUint16(0, value, this);
  }
  _adoptTypes(value: $.Orphan<$.List<SerializedTypeReference>>): void {
    $.utils.adopt(value, $.utils.getPointer(4, this));
  }
  _disownTypes(): $.Orphan<$.List<SerializedTypeReference>> {
    return $.utils.disown(this.types);
  }
  get types(): $.List<SerializedTypeReference> {
    return $.utils.getList(4, SerializedTypeUnion._Types, this);
  }
  _hasTypes(): boolean {
    return !$.utils.isNull($.utils.getPointer(4, this));
  }
  _initTypes(length: number): $.List<SerializedTypeReference> {
    return $.utils.initList(4, SerializedTypeUnion._Types, length, this);
  }
  set types(value: $.List<SerializedTypeReference>) {
    $.utils.copyFrom(value, $.utils.getPointer(4, this));
  }
  public override toString(): string { return "SerializedTypeUnion_" + super.toString(); }
}
export class SerializedTypeIntersection extends $.Struct {
  public static override readonly _capnp = {
    displayName: "SerializedTypeIntersection",
    id: "9ae42bd17511c09b",
    size: new $.ObjectSize(8, 5),
  };
  static _TypeArguments: $.ListCtor<SerializedTypeReference>;
  static _Decorators: $.ListCtor<SerializedTypeReference>;
  static _Types: $.ListCtor<SerializedTypeReference>;
  get typeName(): string {
    return $.utils.getText(0, this);
  }
  set typeName(value: string) {
    $.utils.setText(0, value, this);
  }
  _adoptTypeArguments(value: $.Orphan<$.List<SerializedTypeReference>>): void {
    $.utils.adopt(value, $.utils.getPointer(1, this));
  }
  _disownTypeArguments(): $.Orphan<$.List<SerializedTypeReference>> {
    return $.utils.disown(this.typeArguments);
  }
  get typeArguments(): $.List<SerializedTypeReference> {
    return $.utils.getList(1, SerializedTypeIntersection._TypeArguments, this);
  }
  _hasTypeArguments(): boolean {
    return !$.utils.isNull($.utils.getPointer(1, this));
  }
  _initTypeArguments(length: number): $.List<SerializedTypeReference> {
    return $.utils.initList(1, SerializedTypeIntersection._TypeArguments, length, this);
  }
  set typeArguments(value: $.List<SerializedTypeReference>) {
    $.utils.copyFrom(value, $.utils.getPointer(1, this));
  }
  _adoptIndexAccessOrigin(value: $.Orphan<IndexAccessOrigin>): void {
    $.utils.adopt(value, $.utils.getPointer(2, this));
  }
  _disownIndexAccessOrigin(): $.Orphan<IndexAccessOrigin> {
    return $.utils.disown(this.indexAccessOrigin);
  }
  get indexAccessOrigin(): IndexAccessOrigin {
    return $.utils.getStruct(2, IndexAccessOrigin, this);
  }
  _hasIndexAccessOrigin(): boolean {
    return !$.utils.isNull($.utils.getPointer(2, this));
  }
  _initIndexAccessOrigin(): IndexAccessOrigin {
    return $.utils.initStructAt(2, IndexAccessOrigin, this);
  }
  set indexAccessOrigin(value: IndexAccessOrigin) {
    $.utils.copyFrom(value, $.utils.getPointer(2, this));
  }
  _adoptDecorators(value: $.Orphan<$.List<SerializedTypeReference>>): void {
    $.utils.adopt(value, $.utils.getPointer(3, this));
  }
  _disownDecorators(): $.Orphan<$.List<SerializedTypeReference>> {
    return $.utils.disown(this.decorators);
  }
  get decorators(): $.List<SerializedTypeReference> {
    return $.utils.getList(3, SerializedTypeIntersection._Decorators, this);
  }
  _hasDecorators(): boolean {
    return !$.utils.isNull($.utils.getPointer(3, this));
  }
  _initDecorators(length: number): $.List<SerializedTypeReference> {
    return $.utils.initList(3, SerializedTypeIntersection._Decorators, length, this);
  }
  set decorators(value: $.List<SerializedTypeReference>) {
    $.utils.copyFrom(value, $.utils.getPointer(3, this));
  }
  get kind(): ReflectionKind {
    return $.utils.getUint16(0, this) as ReflectionKind;
  }
  set kind(value: ReflectionKind) {
    $.utils.setUint16(0, value, this);
  }
  _adoptTypes(value: $.Orphan<$.List<SerializedTypeReference>>): void {
    $.utils.adopt(value, $.utils.getPointer(4, this));
  }
  _disownTypes(): $.Orphan<$.List<SerializedTypeReference>> {
    return $.utils.disown(this.types);
  }
  get types(): $.List<SerializedTypeReference> {
    return $.utils.getList(4, SerializedTypeIntersection._Types, this);
  }
  _hasTypes(): boolean {
    return !$.utils.isNull($.utils.getPointer(4, this));
  }
  _initTypes(length: number): $.List<SerializedTypeReference> {
    return $.utils.initList(4, SerializedTypeIntersection._Types, length, this);
  }
  set types(value: $.List<SerializedTypeReference>) {
    $.utils.copyFrom(value, $.utils.getPointer(4, this));
  }
  public override toString(): string { return "SerializedTypeIntersection_" + super.toString(); }
}
export class SerializedTypeArray extends $.Struct {
  public static override readonly _capnp = {
    displayName: "SerializedTypeArray",
    id: "97d1d75240151501",
    size: new $.ObjectSize(8, 6),
  };
  static _TypeArguments: $.ListCtor<SerializedTypeReference>;
  static _Decorators: $.ListCtor<SerializedTypeReference>;
  get typeName(): string {
    return $.utils.getText(0, this);
  }
  set typeName(value: string) {
    $.utils.setText(0, value, this);
  }
  _adoptTypeArguments(value: $.Orphan<$.List<SerializedTypeReference>>): void {
    $.utils.adopt(value, $.utils.getPointer(1, this));
  }
  _disownTypeArguments(): $.Orphan<$.List<SerializedTypeReference>> {
    return $.utils.disown(this.typeArguments);
  }
  get typeArguments(): $.List<SerializedTypeReference> {
    return $.utils.getList(1, SerializedTypeArray._TypeArguments, this);
  }
  _hasTypeArguments(): boolean {
    return !$.utils.isNull($.utils.getPointer(1, this));
  }
  _initTypeArguments(length: number): $.List<SerializedTypeReference> {
    return $.utils.initList(1, SerializedTypeArray._TypeArguments, length, this);
  }
  set typeArguments(value: $.List<SerializedTypeReference>) {
    $.utils.copyFrom(value, $.utils.getPointer(1, this));
  }
  _adoptIndexAccessOrigin(value: $.Orphan<IndexAccessOrigin>): void {
    $.utils.adopt(value, $.utils.getPointer(2, this));
  }
  _disownIndexAccessOrigin(): $.Orphan<IndexAccessOrigin> {
    return $.utils.disown(this.indexAccessOrigin);
  }
  get indexAccessOrigin(): IndexAccessOrigin {
    return $.utils.getStruct(2, IndexAccessOrigin, this);
  }
  _hasIndexAccessOrigin(): boolean {
    return !$.utils.isNull($.utils.getPointer(2, this));
  }
  _initIndexAccessOrigin(): IndexAccessOrigin {
    return $.utils.initStructAt(2, IndexAccessOrigin, this);
  }
  set indexAccessOrigin(value: IndexAccessOrigin) {
    $.utils.copyFrom(value, $.utils.getPointer(2, this));
  }
  _adoptDecorators(value: $.Orphan<$.List<SerializedTypeReference>>): void {
    $.utils.adopt(value, $.utils.getPointer(3, this));
  }
  _disownDecorators(): $.Orphan<$.List<SerializedTypeReference>> {
    return $.utils.disown(this.decorators);
  }
  get decorators(): $.List<SerializedTypeReference> {
    return $.utils.getList(3, SerializedTypeArray._Decorators, this);
  }
  _hasDecorators(): boolean {
    return !$.utils.isNull($.utils.getPointer(3, this));
  }
  _initDecorators(length: number): $.List<SerializedTypeReference> {
    return $.utils.initList(3, SerializedTypeArray._Decorators, length, this);
  }
  set decorators(value: $.List<SerializedTypeReference>) {
    $.utils.copyFrom(value, $.utils.getPointer(3, this));
  }
  get kind(): ReflectionKind {
    return $.utils.getUint16(0, this) as ReflectionKind;
  }
  set kind(value: ReflectionKind) {
    $.utils.setUint16(0, value, this);
  }
  _adoptType(value: $.Orphan<SerializedTypeReference>): void {
    $.utils.adopt(value, $.utils.getPointer(4, this));
  }
  _disownType(): $.Orphan<SerializedTypeReference> {
    return $.utils.disown(this.type);
  }
  get type(): SerializedTypeReference {
    return $.utils.getStruct(4, SerializedTypeReference, this);
  }
  _hasType(): boolean {
    return !$.utils.isNull($.utils.getPointer(4, this));
  }
  _initType(): SerializedTypeReference {
    return $.utils.initStructAt(4, SerializedTypeReference, this);
  }
  set type(value: SerializedTypeReference) {
    $.utils.copyFrom(value, $.utils.getPointer(4, this));
  }
  _adoptTags(value: $.Orphan<TagsReflection>): void {
    $.utils.adopt(value, $.utils.getPointer(5, this));
  }
  _disownTags(): $.Orphan<TagsReflection> {
    return $.utils.disown(this.tags);
  }
  get tags(): TagsReflection {
    return $.utils.getStruct(5, TagsReflection, this);
  }
  _hasTags(): boolean {
    return !$.utils.isNull($.utils.getPointer(5, this));
  }
  _initTags(): TagsReflection {
    return $.utils.initStructAt(5, TagsReflection, this);
  }
  set tags(value: TagsReflection) {
    $.utils.copyFrom(value, $.utils.getPointer(5, this));
  }
  public override toString(): string { return "SerializedTypeArray_" + super.toString(); }
}
export class SerializedTypeIndexSignature extends $.Struct {
  public static override readonly _capnp = {
    displayName: "SerializedTypeIndexSignature",
    id: "93e335e2756821d8",
    size: new $.ObjectSize(8, 6),
  };
  static _TypeArguments: $.ListCtor<SerializedTypeReference>;
  static _Decorators: $.ListCtor<SerializedTypeReference>;
  get typeName(): string {
    return $.utils.getText(0, this);
  }
  set typeName(value: string) {
    $.utils.setText(0, value, this);
  }
  _adoptTypeArguments(value: $.Orphan<$.List<SerializedTypeReference>>): void {
    $.utils.adopt(value, $.utils.getPointer(1, this));
  }
  _disownTypeArguments(): $.Orphan<$.List<SerializedTypeReference>> {
    return $.utils.disown(this.typeArguments);
  }
  get typeArguments(): $.List<SerializedTypeReference> {
    return $.utils.getList(1, SerializedTypeIndexSignature._TypeArguments, this);
  }
  _hasTypeArguments(): boolean {
    return !$.utils.isNull($.utils.getPointer(1, this));
  }
  _initTypeArguments(length: number): $.List<SerializedTypeReference> {
    return $.utils.initList(1, SerializedTypeIndexSignature._TypeArguments, length, this);
  }
  set typeArguments(value: $.List<SerializedTypeReference>) {
    $.utils.copyFrom(value, $.utils.getPointer(1, this));
  }
  _adoptIndexAccessOrigin(value: $.Orphan<IndexAccessOrigin>): void {
    $.utils.adopt(value, $.utils.getPointer(2, this));
  }
  _disownIndexAccessOrigin(): $.Orphan<IndexAccessOrigin> {
    return $.utils.disown(this.indexAccessOrigin);
  }
  get indexAccessOrigin(): IndexAccessOrigin {
    return $.utils.getStruct(2, IndexAccessOrigin, this);
  }
  _hasIndexAccessOrigin(): boolean {
    return !$.utils.isNull($.utils.getPointer(2, this));
  }
  _initIndexAccessOrigin(): IndexAccessOrigin {
    return $.utils.initStructAt(2, IndexAccessOrigin, this);
  }
  set indexAccessOrigin(value: IndexAccessOrigin) {
    $.utils.copyFrom(value, $.utils.getPointer(2, this));
  }
  _adoptDecorators(value: $.Orphan<$.List<SerializedTypeReference>>): void {
    $.utils.adopt(value, $.utils.getPointer(3, this));
  }
  _disownDecorators(): $.Orphan<$.List<SerializedTypeReference>> {
    return $.utils.disown(this.decorators);
  }
  get decorators(): $.List<SerializedTypeReference> {
    return $.utils.getList(3, SerializedTypeIndexSignature._Decorators, this);
  }
  _hasDecorators(): boolean {
    return !$.utils.isNull($.utils.getPointer(3, this));
  }
  _initDecorators(length: number): $.List<SerializedTypeReference> {
    return $.utils.initList(3, SerializedTypeIndexSignature._Decorators, length, this);
  }
  set decorators(value: $.List<SerializedTypeReference>) {
    $.utils.copyFrom(value, $.utils.getPointer(3, this));
  }
  get kind(): ReflectionKind {
    return $.utils.getUint16(0, this) as ReflectionKind;
  }
  set kind(value: ReflectionKind) {
    $.utils.setUint16(0, value, this);
  }
  _adoptIndex(value: $.Orphan<SerializedTypeReference>): void {
    $.utils.adopt(value, $.utils.getPointer(4, this));
  }
  _disownIndex(): $.Orphan<SerializedTypeReference> {
    return $.utils.disown(this.index);
  }
  get index(): SerializedTypeReference {
    return $.utils.getStruct(4, SerializedTypeReference, this);
  }
  _hasIndex(): boolean {
    return !$.utils.isNull($.utils.getPointer(4, this));
  }
  _initIndex(): SerializedTypeReference {
    return $.utils.initStructAt(4, SerializedTypeReference, this);
  }
  set index(value: SerializedTypeReference) {
    $.utils.copyFrom(value, $.utils.getPointer(4, this));
  }
  _adoptType(value: $.Orphan<SerializedTypeReference>): void {
    $.utils.adopt(value, $.utils.getPointer(5, this));
  }
  _disownType(): $.Orphan<SerializedTypeReference> {
    return $.utils.disown(this.type);
  }
  get type(): SerializedTypeReference {
    return $.utils.getStruct(5, SerializedTypeReference, this);
  }
  _hasType(): boolean {
    return !$.utils.isNull($.utils.getPointer(5, this));
  }
  _initType(): SerializedTypeReference {
    return $.utils.initStructAt(5, SerializedTypeReference, this);
  }
  set type(value: SerializedTypeReference) {
    $.utils.copyFrom(value, $.utils.getPointer(5, this));
  }
  public override toString(): string { return "SerializedTypeIndexSignature_" + super.toString(); }
}
export class SerializedTypePropertySignature extends $.Struct {
  public static override readonly _capnp = {
    displayName: "SerializedTypePropertySignature",
    id: "9bc1cebd2ca1569a",
    size: new $.ObjectSize(8, 9),
  };
  static _TypeArguments: $.ListCtor<SerializedTypeReference>;
  static _Decorators: $.ListCtor<SerializedTypeReference>;
  get typeName(): string {
    return $.utils.getText(0, this);
  }
  set typeName(value: string) {
    $.utils.setText(0, value, this);
  }
  _adoptTypeArguments(value: $.Orphan<$.List<SerializedTypeReference>>): void {
    $.utils.adopt(value, $.utils.getPointer(1, this));
  }
  _disownTypeArguments(): $.Orphan<$.List<SerializedTypeReference>> {
    return $.utils.disown(this.typeArguments);
  }
  get typeArguments(): $.List<SerializedTypeReference> {
    return $.utils.getList(1, SerializedTypePropertySignature._TypeArguments, this);
  }
  _hasTypeArguments(): boolean {
    return !$.utils.isNull($.utils.getPointer(1, this));
  }
  _initTypeArguments(length: number): $.List<SerializedTypeReference> {
    return $.utils.initList(1, SerializedTypePropertySignature._TypeArguments, length, this);
  }
  set typeArguments(value: $.List<SerializedTypeReference>) {
    $.utils.copyFrom(value, $.utils.getPointer(1, this));
  }
  _adoptIndexAccessOrigin(value: $.Orphan<IndexAccessOrigin>): void {
    $.utils.adopt(value, $.utils.getPointer(2, this));
  }
  _disownIndexAccessOrigin(): $.Orphan<IndexAccessOrigin> {
    return $.utils.disown(this.indexAccessOrigin);
  }
  get indexAccessOrigin(): IndexAccessOrigin {
    return $.utils.getStruct(2, IndexAccessOrigin, this);
  }
  _hasIndexAccessOrigin(): boolean {
    return !$.utils.isNull($.utils.getPointer(2, this));
  }
  _initIndexAccessOrigin(): IndexAccessOrigin {
    return $.utils.initStructAt(2, IndexAccessOrigin, this);
  }
  set indexAccessOrigin(value: IndexAccessOrigin) {
    $.utils.copyFrom(value, $.utils.getPointer(2, this));
  }
  _adoptDecorators(value: $.Orphan<$.List<SerializedTypeReference>>): void {
    $.utils.adopt(value, $.utils.getPointer(3, this));
  }
  _disownDecorators(): $.Orphan<$.List<SerializedTypeReference>> {
    return $.utils.disown(this.decorators);
  }
  get decorators(): $.List<SerializedTypeReference> {
    return $.utils.getList(3, SerializedTypePropertySignature._Decorators, this);
  }
  _hasDecorators(): boolean {
    return !$.utils.isNull($.utils.getPointer(3, this));
  }
  _initDecorators(length: number): $.List<SerializedTypeReference> {
    return $.utils.initList(3, SerializedTypePropertySignature._Decorators, length, this);
  }
  set decorators(value: $.List<SerializedTypeReference>) {
    $.utils.copyFrom(value, $.utils.getPointer(3, this));
  }
  get kind(): ReflectionKind {
    return $.utils.getUint16(0, this) as ReflectionKind;
  }
  set kind(value: ReflectionKind) {
    $.utils.setUint16(0, value, this);
  }
  get name(): string {
    return $.utils.getText(4, this);
  }
  set name(value: string) {
    $.utils.setText(4, value, this);
  }
  get optional(): boolean {
    return $.utils.getBit(16, this);
  }
  set optional(value: boolean) {
    $.utils.setBit(16, value, this);
  }
  get readonly(): boolean {
    return $.utils.getBit(17, this);
  }
  set readonly(value: boolean) {
    $.utils.setBit(17, value, this);
  }
  get description(): string {
    return $.utils.getText(5, this);
  }
  set description(value: string) {
    $.utils.setText(5, value, this);
  }
  _adoptDefault(value: $.Orphan<DefaultValueReflection>): void {
    $.utils.adopt(value, $.utils.getPointer(6, this));
  }
  _disownDefault(): $.Orphan<DefaultValueReflection> {
    return $.utils.disown(this.default);
  }
  get default(): DefaultValueReflection {
    return $.utils.getStruct(6, DefaultValueReflection, this);
  }
  _hasDefault(): boolean {
    return !$.utils.isNull($.utils.getPointer(6, this));
  }
  _initDefault(): DefaultValueReflection {
    return $.utils.initStructAt(6, DefaultValueReflection, this);
  }
  set default(value: DefaultValueReflection) {
    $.utils.copyFrom(value, $.utils.getPointer(6, this));
  }
  _adoptType(value: $.Orphan<SerializedTypeReference>): void {
    $.utils.adopt(value, $.utils.getPointer(7, this));
  }
  _disownType(): $.Orphan<SerializedTypeReference> {
    return $.utils.disown(this.type);
  }
  get type(): SerializedTypeReference {
    return $.utils.getStruct(7, SerializedTypeReference, this);
  }
  _hasType(): boolean {
    return !$.utils.isNull($.utils.getPointer(7, this));
  }
  _initType(): SerializedTypeReference {
    return $.utils.initStructAt(7, SerializedTypeReference, this);
  }
  set type(value: SerializedTypeReference) {
    $.utils.copyFrom(value, $.utils.getPointer(7, this));
  }
  _adoptTags(value: $.Orphan<TagsReflection>): void {
    $.utils.adopt(value, $.utils.getPointer(8, this));
  }
  _disownTags(): $.Orphan<TagsReflection> {
    return $.utils.disown(this.tags);
  }
  get tags(): TagsReflection {
    return $.utils.getStruct(8, TagsReflection, this);
  }
  _hasTags(): boolean {
    return !$.utils.isNull($.utils.getPointer(8, this));
  }
  _initTags(): TagsReflection {
    return $.utils.initStructAt(8, TagsReflection, this);
  }
  set tags(value: TagsReflection) {
    $.utils.copyFrom(value, $.utils.getPointer(8, this));
  }
  public override toString(): string { return "SerializedTypePropertySignature_" + super.toString(); }
}
export class SerializedTypeMethodSignature extends $.Struct {
  public static override readonly _capnp = {
    displayName: "SerializedTypeMethodSignature",
    id: "e25a2cc39d5930c8",
    size: new $.ObjectSize(8, 8),
  };
  static _TypeArguments: $.ListCtor<SerializedTypeReference>;
  static _Decorators: $.ListCtor<SerializedTypeReference>;
  static _Parameters: $.ListCtor<SerializedTypeParameter>;
  get typeName(): string {
    return $.utils.getText(0, this);
  }
  set typeName(value: string) {
    $.utils.setText(0, value, this);
  }
  _adoptTypeArguments(value: $.Orphan<$.List<SerializedTypeReference>>): void {
    $.utils.adopt(value, $.utils.getPointer(1, this));
  }
  _disownTypeArguments(): $.Orphan<$.List<SerializedTypeReference>> {
    return $.utils.disown(this.typeArguments);
  }
  get typeArguments(): $.List<SerializedTypeReference> {
    return $.utils.getList(1, SerializedTypeMethodSignature._TypeArguments, this);
  }
  _hasTypeArguments(): boolean {
    return !$.utils.isNull($.utils.getPointer(1, this));
  }
  _initTypeArguments(length: number): $.List<SerializedTypeReference> {
    return $.utils.initList(1, SerializedTypeMethodSignature._TypeArguments, length, this);
  }
  set typeArguments(value: $.List<SerializedTypeReference>) {
    $.utils.copyFrom(value, $.utils.getPointer(1, this));
  }
  _adoptIndexAccessOrigin(value: $.Orphan<IndexAccessOrigin>): void {
    $.utils.adopt(value, $.utils.getPointer(2, this));
  }
  _disownIndexAccessOrigin(): $.Orphan<IndexAccessOrigin> {
    return $.utils.disown(this.indexAccessOrigin);
  }
  get indexAccessOrigin(): IndexAccessOrigin {
    return $.utils.getStruct(2, IndexAccessOrigin, this);
  }
  _hasIndexAccessOrigin(): boolean {
    return !$.utils.isNull($.utils.getPointer(2, this));
  }
  _initIndexAccessOrigin(): IndexAccessOrigin {
    return $.utils.initStructAt(2, IndexAccessOrigin, this);
  }
  set indexAccessOrigin(value: IndexAccessOrigin) {
    $.utils.copyFrom(value, $.utils.getPointer(2, this));
  }
  _adoptDecorators(value: $.Orphan<$.List<SerializedTypeReference>>): void {
    $.utils.adopt(value, $.utils.getPointer(3, this));
  }
  _disownDecorators(): $.Orphan<$.List<SerializedTypeReference>> {
    return $.utils.disown(this.decorators);
  }
  get decorators(): $.List<SerializedTypeReference> {
    return $.utils.getList(3, SerializedTypeMethodSignature._Decorators, this);
  }
  _hasDecorators(): boolean {
    return !$.utils.isNull($.utils.getPointer(3, this));
  }
  _initDecorators(length: number): $.List<SerializedTypeReference> {
    return $.utils.initList(3, SerializedTypeMethodSignature._Decorators, length, this);
  }
  set decorators(value: $.List<SerializedTypeReference>) {
    $.utils.copyFrom(value, $.utils.getPointer(3, this));
  }
  get kind(): ReflectionKind {
    return $.utils.getUint16(0, this) as ReflectionKind;
  }
  set kind(value: ReflectionKind) {
    $.utils.setUint16(0, value, this);
  }
  get name(): string {
    return $.utils.getText(4, this);
  }
  set name(value: string) {
    $.utils.setText(4, value, this);
  }
  get optional(): boolean {
    return $.utils.getBit(16, this);
  }
  set optional(value: boolean) {
    $.utils.setBit(16, value, this);
  }
  _adoptParameters(value: $.Orphan<$.List<SerializedTypeParameter>>): void {
    $.utils.adopt(value, $.utils.getPointer(5, this));
  }
  _disownParameters(): $.Orphan<$.List<SerializedTypeParameter>> {
    return $.utils.disown(this.parameters);
  }
  get parameters(): $.List<SerializedTypeParameter> {
    return $.utils.getList(5, SerializedTypeMethodSignature._Parameters, this);
  }
  _hasParameters(): boolean {
    return !$.utils.isNull($.utils.getPointer(5, this));
  }
  _initParameters(length: number): $.List<SerializedTypeParameter> {
    return $.utils.initList(5, SerializedTypeMethodSignature._Parameters, length, this);
  }
  set parameters(value: $.List<SerializedTypeParameter>) {
    $.utils.copyFrom(value, $.utils.getPointer(5, this));
  }
  _adoptReturn(value: $.Orphan<SerializedTypeReference>): void {
    $.utils.adopt(value, $.utils.getPointer(6, this));
  }
  _disownReturn(): $.Orphan<SerializedTypeReference> {
    return $.utils.disown(this.return);
  }
  get return(): SerializedTypeReference {
    return $.utils.getStruct(6, SerializedTypeReference, this);
  }
  _hasReturn(): boolean {
    return !$.utils.isNull($.utils.getPointer(6, this));
  }
  _initReturn(): SerializedTypeReference {
    return $.utils.initStructAt(6, SerializedTypeReference, this);
  }
  set return(value: SerializedTypeReference) {
    $.utils.copyFrom(value, $.utils.getPointer(6, this));
  }
  _adoptTags(value: $.Orphan<TagsReflection>): void {
    $.utils.adopt(value, $.utils.getPointer(7, this));
  }
  _disownTags(): $.Orphan<TagsReflection> {
    return $.utils.disown(this.tags);
  }
  get tags(): TagsReflection {
    return $.utils.getStruct(7, TagsReflection, this);
  }
  _hasTags(): boolean {
    return !$.utils.isNull($.utils.getPointer(7, this));
  }
  _initTags(): TagsReflection {
    return $.utils.initStructAt(7, TagsReflection, this);
  }
  set tags(value: TagsReflection) {
    $.utils.copyFrom(value, $.utils.getPointer(7, this));
  }
  public override toString(): string { return "SerializedTypeMethodSignature_" + super.toString(); }
}
export class SerializedTypeTypeParameter extends $.Struct {
  public static override readonly _capnp = {
    displayName: "SerializedTypeTypeParameter",
    id: "81210361a54d5d71",
    size: new $.ObjectSize(8, 5),
  };
  static _TypeArguments: $.ListCtor<SerializedTypeReference>;
  static _Decorators: $.ListCtor<SerializedTypeReference>;
  get typeName(): string {
    return $.utils.getText(0, this);
  }
  set typeName(value: string) {
    $.utils.setText(0, value, this);
  }
  _adoptTypeArguments(value: $.Orphan<$.List<SerializedTypeReference>>): void {
    $.utils.adopt(value, $.utils.getPointer(1, this));
  }
  _disownTypeArguments(): $.Orphan<$.List<SerializedTypeReference>> {
    return $.utils.disown(this.typeArguments);
  }
  get typeArguments(): $.List<SerializedTypeReference> {
    return $.utils.getList(1, SerializedTypeTypeParameter._TypeArguments, this);
  }
  _hasTypeArguments(): boolean {
    return !$.utils.isNull($.utils.getPointer(1, this));
  }
  _initTypeArguments(length: number): $.List<SerializedTypeReference> {
    return $.utils.initList(1, SerializedTypeTypeParameter._TypeArguments, length, this);
  }
  set typeArguments(value: $.List<SerializedTypeReference>) {
    $.utils.copyFrom(value, $.utils.getPointer(1, this));
  }
  _adoptIndexAccessOrigin(value: $.Orphan<IndexAccessOrigin>): void {
    $.utils.adopt(value, $.utils.getPointer(2, this));
  }
  _disownIndexAccessOrigin(): $.Orphan<IndexAccessOrigin> {
    return $.utils.disown(this.indexAccessOrigin);
  }
  get indexAccessOrigin(): IndexAccessOrigin {
    return $.utils.getStruct(2, IndexAccessOrigin, this);
  }
  _hasIndexAccessOrigin(): boolean {
    return !$.utils.isNull($.utils.getPointer(2, this));
  }
  _initIndexAccessOrigin(): IndexAccessOrigin {
    return $.utils.initStructAt(2, IndexAccessOrigin, this);
  }
  set indexAccessOrigin(value: IndexAccessOrigin) {
    $.utils.copyFrom(value, $.utils.getPointer(2, this));
  }
  _adoptDecorators(value: $.Orphan<$.List<SerializedTypeReference>>): void {
    $.utils.adopt(value, $.utils.getPointer(3, this));
  }
  _disownDecorators(): $.Orphan<$.List<SerializedTypeReference>> {
    return $.utils.disown(this.decorators);
  }
  get decorators(): $.List<SerializedTypeReference> {
    return $.utils.getList(3, SerializedTypeTypeParameter._Decorators, this);
  }
  _hasDecorators(): boolean {
    return !$.utils.isNull($.utils.getPointer(3, this));
  }
  _initDecorators(length: number): $.List<SerializedTypeReference> {
    return $.utils.initList(3, SerializedTypeTypeParameter._Decorators, length, this);
  }
  set decorators(value: $.List<SerializedTypeReference>) {
    $.utils.copyFrom(value, $.utils.getPointer(3, this));
  }
  get kind(): ReflectionKind {
    return $.utils.getUint16(0, this) as ReflectionKind;
  }
  set kind(value: ReflectionKind) {
    $.utils.setUint16(0, value, this);
  }
  get name(): string {
    return $.utils.getText(4, this);
  }
  set name(value: string) {
    $.utils.setText(4, value, this);
  }
  public override toString(): string { return "SerializedTypeTypeParameter_" + super.toString(); }
}
export class SerializedTypeInfer extends $.Struct {
  public static override readonly _capnp = {
    displayName: "SerializedTypeInfer",
    id: "91c6dd1e13f2b14d",
    size: new $.ObjectSize(8, 4),
  };
  static _TypeArguments: $.ListCtor<SerializedTypeReference>;
  static _Decorators: $.ListCtor<SerializedTypeReference>;
  get typeName(): string {
    return $.utils.getText(0, this);
  }
  set typeName(value: string) {
    $.utils.setText(0, value, this);
  }
  _adoptTypeArguments(value: $.Orphan<$.List<SerializedTypeReference>>): void {
    $.utils.adopt(value, $.utils.getPointer(1, this));
  }
  _disownTypeArguments(): $.Orphan<$.List<SerializedTypeReference>> {
    return $.utils.disown(this.typeArguments);
  }
  get typeArguments(): $.List<SerializedTypeReference> {
    return $.utils.getList(1, SerializedTypeInfer._TypeArguments, this);
  }
  _hasTypeArguments(): boolean {
    return !$.utils.isNull($.utils.getPointer(1, this));
  }
  _initTypeArguments(length: number): $.List<SerializedTypeReference> {
    return $.utils.initList(1, SerializedTypeInfer._TypeArguments, length, this);
  }
  set typeArguments(value: $.List<SerializedTypeReference>) {
    $.utils.copyFrom(value, $.utils.getPointer(1, this));
  }
  _adoptIndexAccessOrigin(value: $.Orphan<IndexAccessOrigin>): void {
    $.utils.adopt(value, $.utils.getPointer(2, this));
  }
  _disownIndexAccessOrigin(): $.Orphan<IndexAccessOrigin> {
    return $.utils.disown(this.indexAccessOrigin);
  }
  get indexAccessOrigin(): IndexAccessOrigin {
    return $.utils.getStruct(2, IndexAccessOrigin, this);
  }
  _hasIndexAccessOrigin(): boolean {
    return !$.utils.isNull($.utils.getPointer(2, this));
  }
  _initIndexAccessOrigin(): IndexAccessOrigin {
    return $.utils.initStructAt(2, IndexAccessOrigin, this);
  }
  set indexAccessOrigin(value: IndexAccessOrigin) {
    $.utils.copyFrom(value, $.utils.getPointer(2, this));
  }
  _adoptDecorators(value: $.Orphan<$.List<SerializedTypeReference>>): void {
    $.utils.adopt(value, $.utils.getPointer(3, this));
  }
  _disownDecorators(): $.Orphan<$.List<SerializedTypeReference>> {
    return $.utils.disown(this.decorators);
  }
  get decorators(): $.List<SerializedTypeReference> {
    return $.utils.getList(3, SerializedTypeInfer._Decorators, this);
  }
  _hasDecorators(): boolean {
    return !$.utils.isNull($.utils.getPointer(3, this));
  }
  _initDecorators(length: number): $.List<SerializedTypeReference> {
    return $.utils.initList(3, SerializedTypeInfer._Decorators, length, this);
  }
  set decorators(value: $.List<SerializedTypeReference>) {
    $.utils.copyFrom(value, $.utils.getPointer(3, this));
  }
  get kind(): ReflectionKind {
    return $.utils.getUint16(0, this) as ReflectionKind;
  }
  set kind(value: ReflectionKind) {
    $.utils.setUint16(0, value, this);
  }
  public override toString(): string { return "SerializedTypeInfer_" + super.toString(); }
}
export class SerializedTypeTupleMember extends $.Struct {
  public static override readonly _capnp = {
    displayName: "SerializedTypeTupleMember",
    id: "e21c2a18d0d56fdf",
    size: new $.ObjectSize(8, 6),
  };
  static _TypeArguments: $.ListCtor<SerializedTypeReference>;
  static _Decorators: $.ListCtor<SerializedTypeReference>;
  get typeName(): string {
    return $.utils.getText(0, this);
  }
  set typeName(value: string) {
    $.utils.setText(0, value, this);
  }
  _adoptTypeArguments(value: $.Orphan<$.List<SerializedTypeReference>>): void {
    $.utils.adopt(value, $.utils.getPointer(1, this));
  }
  _disownTypeArguments(): $.Orphan<$.List<SerializedTypeReference>> {
    return $.utils.disown(this.typeArguments);
  }
  get typeArguments(): $.List<SerializedTypeReference> {
    return $.utils.getList(1, SerializedTypeTupleMember._TypeArguments, this);
  }
  _hasTypeArguments(): boolean {
    return !$.utils.isNull($.utils.getPointer(1, this));
  }
  _initTypeArguments(length: number): $.List<SerializedTypeReference> {
    return $.utils.initList(1, SerializedTypeTupleMember._TypeArguments, length, this);
  }
  set typeArguments(value: $.List<SerializedTypeReference>) {
    $.utils.copyFrom(value, $.utils.getPointer(1, this));
  }
  _adoptIndexAccessOrigin(value: $.Orphan<IndexAccessOrigin>): void {
    $.utils.adopt(value, $.utils.getPointer(2, this));
  }
  _disownIndexAccessOrigin(): $.Orphan<IndexAccessOrigin> {
    return $.utils.disown(this.indexAccessOrigin);
  }
  get indexAccessOrigin(): IndexAccessOrigin {
    return $.utils.getStruct(2, IndexAccessOrigin, this);
  }
  _hasIndexAccessOrigin(): boolean {
    return !$.utils.isNull($.utils.getPointer(2, this));
  }
  _initIndexAccessOrigin(): IndexAccessOrigin {
    return $.utils.initStructAt(2, IndexAccessOrigin, this);
  }
  set indexAccessOrigin(value: IndexAccessOrigin) {
    $.utils.copyFrom(value, $.utils.getPointer(2, this));
  }
  _adoptDecorators(value: $.Orphan<$.List<SerializedTypeReference>>): void {
    $.utils.adopt(value, $.utils.getPointer(3, this));
  }
  _disownDecorators(): $.Orphan<$.List<SerializedTypeReference>> {
    return $.utils.disown(this.decorators);
  }
  get decorators(): $.List<SerializedTypeReference> {
    return $.utils.getList(3, SerializedTypeTupleMember._Decorators, this);
  }
  _hasDecorators(): boolean {
    return !$.utils.isNull($.utils.getPointer(3, this));
  }
  _initDecorators(length: number): $.List<SerializedTypeReference> {
    return $.utils.initList(3, SerializedTypeTupleMember._Decorators, length, this);
  }
  set decorators(value: $.List<SerializedTypeReference>) {
    $.utils.copyFrom(value, $.utils.getPointer(3, this));
  }
  get kind(): ReflectionKind {
    return $.utils.getUint16(0, this) as ReflectionKind;
  }
  set kind(value: ReflectionKind) {
    $.utils.setUint16(0, value, this);
  }
  _adoptType(value: $.Orphan<SerializedTypeReference>): void {
    $.utils.adopt(value, $.utils.getPointer(4, this));
  }
  _disownType(): $.Orphan<SerializedTypeReference> {
    return $.utils.disown(this.type);
  }
  get type(): SerializedTypeReference {
    return $.utils.getStruct(4, SerializedTypeReference, this);
  }
  _hasType(): boolean {
    return !$.utils.isNull($.utils.getPointer(4, this));
  }
  _initType(): SerializedTypeReference {
    return $.utils.initStructAt(4, SerializedTypeReference, this);
  }
  set type(value: SerializedTypeReference) {
    $.utils.copyFrom(value, $.utils.getPointer(4, this));
  }
  get optional(): boolean {
    return $.utils.getBit(16, this);
  }
  set optional(value: boolean) {
    $.utils.setBit(16, value, this);
  }
  get name(): string {
    return $.utils.getText(5, this);
  }
  set name(value: string) {
    $.utils.setText(5, value, this);
  }
  public override toString(): string { return "SerializedTypeTupleMember_" + super.toString(); }
}
export class SerializedTypeTuple extends $.Struct {
  public static override readonly _capnp = {
    displayName: "SerializedTypeTuple",
    id: "eb7501eb1ee4fb6d",
    size: new $.ObjectSize(8, 5),
  };
  static _TypeArguments: $.ListCtor<SerializedTypeReference>;
  static _Decorators: $.ListCtor<SerializedTypeReference>;
  static _Types: $.ListCtor<SerializedTypeTupleMember>;
  get typeName(): string {
    return $.utils.getText(0, this);
  }
  set typeName(value: string) {
    $.utils.setText(0, value, this);
  }
  _adoptTypeArguments(value: $.Orphan<$.List<SerializedTypeReference>>): void {
    $.utils.adopt(value, $.utils.getPointer(1, this));
  }
  _disownTypeArguments(): $.Orphan<$.List<SerializedTypeReference>> {
    return $.utils.disown(this.typeArguments);
  }
  get typeArguments(): $.List<SerializedTypeReference> {
    return $.utils.getList(1, SerializedTypeTuple._TypeArguments, this);
  }
  _hasTypeArguments(): boolean {
    return !$.utils.isNull($.utils.getPointer(1, this));
  }
  _initTypeArguments(length: number): $.List<SerializedTypeReference> {
    return $.utils.initList(1, SerializedTypeTuple._TypeArguments, length, this);
  }
  set typeArguments(value: $.List<SerializedTypeReference>) {
    $.utils.copyFrom(value, $.utils.getPointer(1, this));
  }
  _adoptIndexAccessOrigin(value: $.Orphan<IndexAccessOrigin>): void {
    $.utils.adopt(value, $.utils.getPointer(2, this));
  }
  _disownIndexAccessOrigin(): $.Orphan<IndexAccessOrigin> {
    return $.utils.disown(this.indexAccessOrigin);
  }
  get indexAccessOrigin(): IndexAccessOrigin {
    return $.utils.getStruct(2, IndexAccessOrigin, this);
  }
  _hasIndexAccessOrigin(): boolean {
    return !$.utils.isNull($.utils.getPointer(2, this));
  }
  _initIndexAccessOrigin(): IndexAccessOrigin {
    return $.utils.initStructAt(2, IndexAccessOrigin, this);
  }
  set indexAccessOrigin(value: IndexAccessOrigin) {
    $.utils.copyFrom(value, $.utils.getPointer(2, this));
  }
  _adoptDecorators(value: $.Orphan<$.List<SerializedTypeReference>>): void {
    $.utils.adopt(value, $.utils.getPointer(3, this));
  }
  _disownDecorators(): $.Orphan<$.List<SerializedTypeReference>> {
    return $.utils.disown(this.decorators);
  }
  get decorators(): $.List<SerializedTypeReference> {
    return $.utils.getList(3, SerializedTypeTuple._Decorators, this);
  }
  _hasDecorators(): boolean {
    return !$.utils.isNull($.utils.getPointer(3, this));
  }
  _initDecorators(length: number): $.List<SerializedTypeReference> {
    return $.utils.initList(3, SerializedTypeTuple._Decorators, length, this);
  }
  set decorators(value: $.List<SerializedTypeReference>) {
    $.utils.copyFrom(value, $.utils.getPointer(3, this));
  }
  get kind(): ReflectionKind {
    return $.utils.getUint16(0, this) as ReflectionKind;
  }
  set kind(value: ReflectionKind) {
    $.utils.setUint16(0, value, this);
  }
  _adoptTypes(value: $.Orphan<$.List<SerializedTypeTupleMember>>): void {
    $.utils.adopt(value, $.utils.getPointer(4, this));
  }
  _disownTypes(): $.Orphan<$.List<SerializedTypeTupleMember>> {
    return $.utils.disown(this.types);
  }
  get types(): $.List<SerializedTypeTupleMember> {
    return $.utils.getList(4, SerializedTypeTuple._Types, this);
  }
  _hasTypes(): boolean {
    return !$.utils.isNull($.utils.getPointer(4, this));
  }
  _initTypes(length: number): $.List<SerializedTypeTupleMember> {
    return $.utils.initList(4, SerializedTypeTuple._Types, length, this);
  }
  set types(value: $.List<SerializedTypeTupleMember>) {
    $.utils.copyFrom(value, $.utils.getPointer(4, this));
  }
  public override toString(): string { return "SerializedTypeTuple_" + super.toString(); }
}
export class SerializedTypeRest extends $.Struct {
  public static override readonly _capnp = {
    displayName: "SerializedTypeRest",
    id: "f9e684a435cce5d1",
    size: new $.ObjectSize(8, 5),
  };
  static _TypeArguments: $.ListCtor<SerializedTypeReference>;
  static _Decorators: $.ListCtor<SerializedTypeReference>;
  get typeName(): string {
    return $.utils.getText(0, this);
  }
  set typeName(value: string) {
    $.utils.setText(0, value, this);
  }
  _adoptTypeArguments(value: $.Orphan<$.List<SerializedTypeReference>>): void {
    $.utils.adopt(value, $.utils.getPointer(1, this));
  }
  _disownTypeArguments(): $.Orphan<$.List<SerializedTypeReference>> {
    return $.utils.disown(this.typeArguments);
  }
  get typeArguments(): $.List<SerializedTypeReference> {
    return $.utils.getList(1, SerializedTypeRest._TypeArguments, this);
  }
  _hasTypeArguments(): boolean {
    return !$.utils.isNull($.utils.getPointer(1, this));
  }
  _initTypeArguments(length: number): $.List<SerializedTypeReference> {
    return $.utils.initList(1, SerializedTypeRest._TypeArguments, length, this);
  }
  set typeArguments(value: $.List<SerializedTypeReference>) {
    $.utils.copyFrom(value, $.utils.getPointer(1, this));
  }
  _adoptIndexAccessOrigin(value: $.Orphan<IndexAccessOrigin>): void {
    $.utils.adopt(value, $.utils.getPointer(2, this));
  }
  _disownIndexAccessOrigin(): $.Orphan<IndexAccessOrigin> {
    return $.utils.disown(this.indexAccessOrigin);
  }
  get indexAccessOrigin(): IndexAccessOrigin {
    return $.utils.getStruct(2, IndexAccessOrigin, this);
  }
  _hasIndexAccessOrigin(): boolean {
    return !$.utils.isNull($.utils.getPointer(2, this));
  }
  _initIndexAccessOrigin(): IndexAccessOrigin {
    return $.utils.initStructAt(2, IndexAccessOrigin, this);
  }
  set indexAccessOrigin(value: IndexAccessOrigin) {
    $.utils.copyFrom(value, $.utils.getPointer(2, this));
  }
  _adoptDecorators(value: $.Orphan<$.List<SerializedTypeReference>>): void {
    $.utils.adopt(value, $.utils.getPointer(3, this));
  }
  _disownDecorators(): $.Orphan<$.List<SerializedTypeReference>> {
    return $.utils.disown(this.decorators);
  }
  get decorators(): $.List<SerializedTypeReference> {
    return $.utils.getList(3, SerializedTypeRest._Decorators, this);
  }
  _hasDecorators(): boolean {
    return !$.utils.isNull($.utils.getPointer(3, this));
  }
  _initDecorators(length: number): $.List<SerializedTypeReference> {
    return $.utils.initList(3, SerializedTypeRest._Decorators, length, this);
  }
  set decorators(value: $.List<SerializedTypeReference>) {
    $.utils.copyFrom(value, $.utils.getPointer(3, this));
  }
  get kind(): ReflectionKind {
    return $.utils.getUint16(0, this) as ReflectionKind;
  }
  set kind(value: ReflectionKind) {
    $.utils.setUint16(0, value, this);
  }
  _adoptType(value: $.Orphan<SerializedTypeReference>): void {
    $.utils.adopt(value, $.utils.getPointer(4, this));
  }
  _disownType(): $.Orphan<SerializedTypeReference> {
    return $.utils.disown(this.type);
  }
  get type(): SerializedTypeReference {
    return $.utils.getStruct(4, SerializedTypeReference, this);
  }
  _hasType(): boolean {
    return !$.utils.isNull($.utils.getPointer(4, this));
  }
  _initType(): SerializedTypeReference {
    return $.utils.initStructAt(4, SerializedTypeReference, this);
  }
  set type(value: SerializedTypeReference) {
    $.utils.copyFrom(value, $.utils.getPointer(4, this));
  }
  public override toString(): string { return "SerializedTypeRest_" + super.toString(); }
}
export class SimpleSerializedType extends $.Struct {
  public static override readonly _capnp = {
    displayName: "SimpleSerializedType",
    id: "80f983e4b811c3ca",
    size: new $.ObjectSize(8, 5),
  };
  static _TypeArguments: $.ListCtor<SerializedTypeReference>;
  static _Decorators: $.ListCtor<SerializedTypeReference>;
  get typeName(): string {
    return $.utils.getText(0, this);
  }
  set typeName(value: string) {
    $.utils.setText(0, value, this);
  }
  _adoptTypeArguments(value: $.Orphan<$.List<SerializedTypeReference>>): void {
    $.utils.adopt(value, $.utils.getPointer(1, this));
  }
  _disownTypeArguments(): $.Orphan<$.List<SerializedTypeReference>> {
    return $.utils.disown(this.typeArguments);
  }
  get typeArguments(): $.List<SerializedTypeReference> {
    return $.utils.getList(1, SimpleSerializedType._TypeArguments, this);
  }
  _hasTypeArguments(): boolean {
    return !$.utils.isNull($.utils.getPointer(1, this));
  }
  _initTypeArguments(length: number): $.List<SerializedTypeReference> {
    return $.utils.initList(1, SimpleSerializedType._TypeArguments, length, this);
  }
  set typeArguments(value: $.List<SerializedTypeReference>) {
    $.utils.copyFrom(value, $.utils.getPointer(1, this));
  }
  _adoptIndexAccessOrigin(value: $.Orphan<IndexAccessOrigin>): void {
    $.utils.adopt(value, $.utils.getPointer(2, this));
  }
  _disownIndexAccessOrigin(): $.Orphan<IndexAccessOrigin> {
    return $.utils.disown(this.indexAccessOrigin);
  }
  get indexAccessOrigin(): IndexAccessOrigin {
    return $.utils.getStruct(2, IndexAccessOrigin, this);
  }
  _hasIndexAccessOrigin(): boolean {
    return !$.utils.isNull($.utils.getPointer(2, this));
  }
  _initIndexAccessOrigin(): IndexAccessOrigin {
    return $.utils.initStructAt(2, IndexAccessOrigin, this);
  }
  set indexAccessOrigin(value: IndexAccessOrigin) {
    $.utils.copyFrom(value, $.utils.getPointer(2, this));
  }
  _adoptDecorators(value: $.Orphan<$.List<SerializedTypeReference>>): void {
    $.utils.adopt(value, $.utils.getPointer(3, this));
  }
  _disownDecorators(): $.Orphan<$.List<SerializedTypeReference>> {
    return $.utils.disown(this.decorators);
  }
  get decorators(): $.List<SerializedTypeReference> {
    return $.utils.getList(3, SimpleSerializedType._Decorators, this);
  }
  _hasDecorators(): boolean {
    return !$.utils.isNull($.utils.getPointer(3, this));
  }
  _initDecorators(length: number): $.List<SerializedTypeReference> {
    return $.utils.initList(3, SimpleSerializedType._Decorators, length, this);
  }
  set decorators(value: $.List<SerializedTypeReference>) {
    $.utils.copyFrom(value, $.utils.getPointer(3, this));
  }
  get kind(): ReflectionKind {
    return $.utils.getUint16(0, this) as ReflectionKind;
  }
  set kind(value: ReflectionKind) {
    $.utils.setUint16(0, value, this);
  }
  _adoptOrigin(value: $.Orphan<SerializedTypeReference>): void {
    $.utils.adopt(value, $.utils.getPointer(4, this));
  }
  _disownOrigin(): $.Orphan<SerializedTypeReference> {
    return $.utils.disown(this.origin);
  }
  get origin(): SerializedTypeReference {
    return $.utils.getStruct(4, SerializedTypeReference, this);
  }
  _hasOrigin(): boolean {
    return !$.utils.isNull($.utils.getPointer(4, this));
  }
  _initOrigin(): SerializedTypeReference {
    return $.utils.initStructAt(4, SerializedTypeReference, this);
  }
  set origin(value: SerializedTypeReference) {
    $.utils.copyFrom(value, $.utils.getPointer(4, this));
  }
  public override toString(): string { return "SimpleSerializedType_" + super.toString(); }
}
export class SerializedTypeLiteralSymbol extends $.Struct {
  public static override readonly _capnp = {
    displayName: "SerializedTypeLiteralSymbol",
    id: "f3dd6a3c6054bd55",
    size: new $.ObjectSize(0, 2),
  };
  /**
* "symbol"
*
*/
  get type(): string {
    return $.utils.getText(0, this);
  }
  set type(value: string) {
    $.utils.setText(0, value, this);
  }
  get name(): string {
    return $.utils.getText(1, this);
  }
  set name(value: string) {
    $.utils.setText(1, value, this);
  }
  public override toString(): string { return "SerializedTypeLiteralSymbol_" + super.toString(); }
}
export class SerializedTypeLiteralBigInt extends $.Struct {
  public static override readonly _capnp = {
    displayName: "SerializedTypeLiteralBigInt",
    id: "821a872d8be30bb2",
    size: new $.ObjectSize(0, 2),
  };
  /**
* "bigint"
*
*/
  get type(): string {
    return $.utils.getText(0, this);
  }
  set type(value: string) {
    $.utils.setText(0, value, this);
  }
  get value(): string {
    return $.utils.getText(1, this);
  }
  set value(value: string) {
    $.utils.setText(1, value, this);
  }
  public override toString(): string { return "SerializedTypeLiteralBigInt_" + super.toString(); }
}
export class SerializedTypeLiteralRegex extends $.Struct {
  public static override readonly _capnp = {
    displayName: "SerializedTypeLiteralRegex",
    id: "cc89f97b47927d99",
    size: new $.ObjectSize(0, 2),
  };
  /**
* "regex"
*
*/
  get type(): string {
    return $.utils.getText(0, this);
  }
  set type(value: string) {
    $.utils.setText(0, value, this);
  }
  get regex(): string {
    return $.utils.getText(1, this);
  }
  set regex(value: string) {
    $.utils.setText(1, value, this);
  }
  public override toString(): string { return "SerializedTypeLiteralRegex_" + super.toString(); }
}
export const SerializedTypeLiteral_Literal_Which = {
  SYMBOL: 0,
  STRING: 1,
  NUMBER: 2,
  BOOLEAN: 3,
  BIGINT: 4,
  REGEX: 5
} as const;
export type SerializedTypeLiteral_Literal_Which = (typeof SerializedTypeLiteral_Literal_Which)[keyof typeof SerializedTypeLiteral_Literal_Which];
export class SerializedTypeLiteral_Literal extends $.Struct {
  static readonly SYMBOL = SerializedTypeLiteral_Literal_Which.SYMBOL;
  static readonly STRING = SerializedTypeLiteral_Literal_Which.STRING;
  static readonly NUMBER = SerializedTypeLiteral_Literal_Which.NUMBER;
  static readonly BOOLEAN = SerializedTypeLiteral_Literal_Which.BOOLEAN;
  static readonly BIGINT = SerializedTypeLiteral_Literal_Which.BIGINT;
  static readonly REGEX = SerializedTypeLiteral_Literal_Which.REGEX;
  public static override readonly _capnp = {
    displayName: "literal",
    id: "e4f0538973f3909f",
    size: new $.ObjectSize(16, 5),
  };
  _adoptSymbol(value: $.Orphan<SerializedTypeLiteralSymbol>): void {
    $.utils.setUint16(2, 0, this);
    $.utils.adopt(value, $.utils.getPointer(4, this));
  }
  _disownSymbol(): $.Orphan<SerializedTypeLiteralSymbol> {
    return $.utils.disown(this.symbol);
  }
  get symbol(): SerializedTypeLiteralSymbol {
    $.utils.testWhich("symbol", $.utils.getUint16(2, this), 0, this);
    return $.utils.getStruct(4, SerializedTypeLiteralSymbol, this);
  }
  _hasSymbol(): boolean {
    return !$.utils.isNull($.utils.getPointer(4, this));
  }
  _initSymbol(): SerializedTypeLiteralSymbol {
    $.utils.setUint16(2, 0, this);
    return $.utils.initStructAt(4, SerializedTypeLiteralSymbol, this);
  }
  get _isSymbol(): boolean {
    return $.utils.getUint16(2, this) === 0;
  }
  set symbol(value: SerializedTypeLiteralSymbol) {
    $.utils.setUint16(2, 0, this);
    $.utils.copyFrom(value, $.utils.getPointer(4, this));
  }
  get string(): string {
    $.utils.testWhich("string", $.utils.getUint16(2, this), 1, this);
    return $.utils.getText(4, this);
  }
  get _isString(): boolean {
    return $.utils.getUint16(2, this) === 1;
  }
  set string(value: string) {
    $.utils.setUint16(2, 1, this);
    $.utils.setText(4, value, this);
  }
  get number(): number {
    $.utils.testWhich("number", $.utils.getUint16(2, this), 2, this);
    return $.utils.getFloat64(8, this);
  }
  get _isNumber(): boolean {
    return $.utils.getUint16(2, this) === 2;
  }
  set number(value: number) {
    $.utils.setUint16(2, 2, this);
    $.utils.setFloat64(8, value, this);
  }
  get boolean(): boolean {
    $.utils.testWhich("boolean", $.utils.getUint16(2, this), 3, this);
    return $.utils.getBit(64, this);
  }
  get _isBoolean(): boolean {
    return $.utils.getUint16(2, this) === 3;
  }
  set boolean(value: boolean) {
    $.utils.setUint16(2, 3, this);
    $.utils.setBit(64, value, this);
  }
  _adoptBigint(value: $.Orphan<SerializedTypeLiteralBigInt>): void {
    $.utils.setUint16(2, 4, this);
    $.utils.adopt(value, $.utils.getPointer(4, this));
  }
  _disownBigint(): $.Orphan<SerializedTypeLiteralBigInt> {
    return $.utils.disown(this.bigint);
  }
  get bigint(): SerializedTypeLiteralBigInt {
    $.utils.testWhich("bigint", $.utils.getUint16(2, this), 4, this);
    return $.utils.getStruct(4, SerializedTypeLiteralBigInt, this);
  }
  _hasBigint(): boolean {
    return !$.utils.isNull($.utils.getPointer(4, this));
  }
  _initBigint(): SerializedTypeLiteralBigInt {
    $.utils.setUint16(2, 4, this);
    return $.utils.initStructAt(4, SerializedTypeLiteralBigInt, this);
  }
  get _isBigint(): boolean {
    return $.utils.getUint16(2, this) === 4;
  }
  set bigint(value: SerializedTypeLiteralBigInt) {
    $.utils.setUint16(2, 4, this);
    $.utils.copyFrom(value, $.utils.getPointer(4, this));
  }
  _adoptRegex(value: $.Orphan<SerializedTypeLiteralRegex>): void {
    $.utils.setUint16(2, 5, this);
    $.utils.adopt(value, $.utils.getPointer(4, this));
  }
  _disownRegex(): $.Orphan<SerializedTypeLiteralRegex> {
    return $.utils.disown(this.regex);
  }
  get regex(): SerializedTypeLiteralRegex {
    $.utils.testWhich("regex", $.utils.getUint16(2, this), 5, this);
    return $.utils.getStruct(4, SerializedTypeLiteralRegex, this);
  }
  _hasRegex(): boolean {
    return !$.utils.isNull($.utils.getPointer(4, this));
  }
  _initRegex(): SerializedTypeLiteralRegex {
    $.utils.setUint16(2, 5, this);
    return $.utils.initStructAt(4, SerializedTypeLiteralRegex, this);
  }
  get _isRegex(): boolean {
    return $.utils.getUint16(2, this) === 5;
  }
  set regex(value: SerializedTypeLiteralRegex) {
    $.utils.setUint16(2, 5, this);
    $.utils.copyFrom(value, $.utils.getPointer(4, this));
  }
  public override toString(): string { return "SerializedTypeLiteral_Literal_" + super.toString(); }
  which(): SerializedTypeLiteral_Literal_Which {
    return $.utils.getUint16(2, this) as SerializedTypeLiteral_Literal_Which;
  }
}
export class SerializedTypeLiteral extends $.Struct {
  public static override readonly _capnp = {
    displayName: "SerializedTypeLiteral",
    id: "b876ba24d27d88c8",
    size: new $.ObjectSize(16, 5),
  };
  static _TypeArguments: $.ListCtor<SerializedTypeReference>;
  static _Decorators: $.ListCtor<SerializedTypeReference>;
  get typeName(): string {
    return $.utils.getText(0, this);
  }
  set typeName(value: string) {
    $.utils.setText(0, value, this);
  }
  _adoptTypeArguments(value: $.Orphan<$.List<SerializedTypeReference>>): void {
    $.utils.adopt(value, $.utils.getPointer(1, this));
  }
  _disownTypeArguments(): $.Orphan<$.List<SerializedTypeReference>> {
    return $.utils.disown(this.typeArguments);
  }
  get typeArguments(): $.List<SerializedTypeReference> {
    return $.utils.getList(1, SerializedTypeLiteral._TypeArguments, this);
  }
  _hasTypeArguments(): boolean {
    return !$.utils.isNull($.utils.getPointer(1, this));
  }
  _initTypeArguments(length: number): $.List<SerializedTypeReference> {
    return $.utils.initList(1, SerializedTypeLiteral._TypeArguments, length, this);
  }
  set typeArguments(value: $.List<SerializedTypeReference>) {
    $.utils.copyFrom(value, $.utils.getPointer(1, this));
  }
  _adoptIndexAccessOrigin(value: $.Orphan<IndexAccessOrigin>): void {
    $.utils.adopt(value, $.utils.getPointer(2, this));
  }
  _disownIndexAccessOrigin(): $.Orphan<IndexAccessOrigin> {
    return $.utils.disown(this.indexAccessOrigin);
  }
  get indexAccessOrigin(): IndexAccessOrigin {
    return $.utils.getStruct(2, IndexAccessOrigin, this);
  }
  _hasIndexAccessOrigin(): boolean {
    return !$.utils.isNull($.utils.getPointer(2, this));
  }
  _initIndexAccessOrigin(): IndexAccessOrigin {
    return $.utils.initStructAt(2, IndexAccessOrigin, this);
  }
  set indexAccessOrigin(value: IndexAccessOrigin) {
    $.utils.copyFrom(value, $.utils.getPointer(2, this));
  }
  _adoptDecorators(value: $.Orphan<$.List<SerializedTypeReference>>): void {
    $.utils.adopt(value, $.utils.getPointer(3, this));
  }
  _disownDecorators(): $.Orphan<$.List<SerializedTypeReference>> {
    return $.utils.disown(this.decorators);
  }
  get decorators(): $.List<SerializedTypeReference> {
    return $.utils.getList(3, SerializedTypeLiteral._Decorators, this);
  }
  _hasDecorators(): boolean {
    return !$.utils.isNull($.utils.getPointer(3, this));
  }
  _initDecorators(length: number): $.List<SerializedTypeReference> {
    return $.utils.initList(3, SerializedTypeLiteral._Decorators, length, this);
  }
  set decorators(value: $.List<SerializedTypeReference>) {
    $.utils.copyFrom(value, $.utils.getPointer(3, this));
  }
  get kind(): ReflectionKind {
    return $.utils.getUint16(0, this) as ReflectionKind;
  }
  set kind(value: ReflectionKind) {
    $.utils.setUint16(0, value, this);
  }
  get literal(): SerializedTypeLiteral_Literal {
    return $.utils.getAs(SerializedTypeLiteral_Literal, this);
  }
  _initLiteral(): SerializedTypeLiteral_Literal {
    return $.utils.getAs(SerializedTypeLiteral_Literal, this);
  }
  public override toString(): string { return "SerializedTypeLiteral_" + super.toString(); }
}
export class SerializedTypeTemplateLiteral extends $.Struct {
  public static override readonly _capnp = {
    displayName: "SerializedTypeTemplateLiteral",
    id: "8dd6c284d46cc265",
    size: new $.ObjectSize(8, 5),
  };
  static _TypeArguments: $.ListCtor<SerializedTypeReference>;
  static _Decorators: $.ListCtor<SerializedTypeReference>;
  static _Types: $.ListCtor<SerializedTypeReference>;
  get typeName(): string {
    return $.utils.getText(0, this);
  }
  set typeName(value: string) {
    $.utils.setText(0, value, this);
  }
  _adoptTypeArguments(value: $.Orphan<$.List<SerializedTypeReference>>): void {
    $.utils.adopt(value, $.utils.getPointer(1, this));
  }
  _disownTypeArguments(): $.Orphan<$.List<SerializedTypeReference>> {
    return $.utils.disown(this.typeArguments);
  }
  get typeArguments(): $.List<SerializedTypeReference> {
    return $.utils.getList(1, SerializedTypeTemplateLiteral._TypeArguments, this);
  }
  _hasTypeArguments(): boolean {
    return !$.utils.isNull($.utils.getPointer(1, this));
  }
  _initTypeArguments(length: number): $.List<SerializedTypeReference> {
    return $.utils.initList(1, SerializedTypeTemplateLiteral._TypeArguments, length, this);
  }
  set typeArguments(value: $.List<SerializedTypeReference>) {
    $.utils.copyFrom(value, $.utils.getPointer(1, this));
  }
  _adoptIndexAccessOrigin(value: $.Orphan<IndexAccessOrigin>): void {
    $.utils.adopt(value, $.utils.getPointer(2, this));
  }
  _disownIndexAccessOrigin(): $.Orphan<IndexAccessOrigin> {
    return $.utils.disown(this.indexAccessOrigin);
  }
  get indexAccessOrigin(): IndexAccessOrigin {
    return $.utils.getStruct(2, IndexAccessOrigin, this);
  }
  _hasIndexAccessOrigin(): boolean {
    return !$.utils.isNull($.utils.getPointer(2, this));
  }
  _initIndexAccessOrigin(): IndexAccessOrigin {
    return $.utils.initStructAt(2, IndexAccessOrigin, this);
  }
  set indexAccessOrigin(value: IndexAccessOrigin) {
    $.utils.copyFrom(value, $.utils.getPointer(2, this));
  }
  _adoptDecorators(value: $.Orphan<$.List<SerializedTypeReference>>): void {
    $.utils.adopt(value, $.utils.getPointer(3, this));
  }
  _disownDecorators(): $.Orphan<$.List<SerializedTypeReference>> {
    return $.utils.disown(this.decorators);
  }
  get decorators(): $.List<SerializedTypeReference> {
    return $.utils.getList(3, SerializedTypeTemplateLiteral._Decorators, this);
  }
  _hasDecorators(): boolean {
    return !$.utils.isNull($.utils.getPointer(3, this));
  }
  _initDecorators(length: number): $.List<SerializedTypeReference> {
    return $.utils.initList(3, SerializedTypeTemplateLiteral._Decorators, length, this);
  }
  set decorators(value: $.List<SerializedTypeReference>) {
    $.utils.copyFrom(value, $.utils.getPointer(3, this));
  }
  get kind(): ReflectionKind {
    return $.utils.getUint16(0, this) as ReflectionKind;
  }
  set kind(value: ReflectionKind) {
    $.utils.setUint16(0, value, this);
  }
  _adoptTypes(value: $.Orphan<$.List<SerializedTypeReference>>): void {
    $.utils.adopt(value, $.utils.getPointer(4, this));
  }
  _disownTypes(): $.Orphan<$.List<SerializedTypeReference>> {
    return $.utils.disown(this.types);
  }
  get types(): $.List<SerializedTypeReference> {
    return $.utils.getList(4, SerializedTypeTemplateLiteral._Types, this);
  }
  _hasTypes(): boolean {
    return !$.utils.isNull($.utils.getPointer(4, this));
  }
  _initTypes(length: number): $.List<SerializedTypeReference> {
    return $.utils.initList(4, SerializedTypeTemplateLiteral._Types, length, this);
  }
  set types(value: $.List<SerializedTypeReference>) {
    $.utils.copyFrom(value, $.utils.getPointer(4, this));
  }
  public override toString(): string { return "SerializedTypeTemplateLiteral_" + super.toString(); }
}
export class SerializedTypeOther extends $.Struct {
  public static override readonly _capnp = {
    displayName: "SerializedTypeOther",
    id: "9e1048a692ff49ce",
    size: new $.ObjectSize(8, 1),
  };
  get typeName(): string {
    return $.utils.getText(0, this);
  }
  set typeName(value: string) {
    $.utils.setText(0, value, this);
  }
  get kind(): ReflectionKind {
    return $.utils.getUint16(0, this) as ReflectionKind;
  }
  set kind(value: ReflectionKind) {
    $.utils.setUint16(0, value, this);
  }
  public override toString(): string { return "SerializedTypeOther_" + super.toString(); }
}
export const SerializedType_Type_Which = {
  SIMPLE: 0,
  LITERAL: 1,
  TEMPLATE_LITERAL: 2,
  PARAMETER: 3,
  FUNCTION: 4,
  METHOD: 5,
  PROPERTY: 6,
  PROMISE: 7,
  CLASS_TYPE: 8,
  ENUM: 9,
  UNION: 10,
  INTERSECTION: 11,
  ARRAY: 12,
  OBJECT_LITERAL: 13,
  INDEX_SIGNATURE: 14,
  PROPERTY_SIGNATURE: 15,
  METHOD_SIGNATURE: 16,
  TYPE_PARAMETER: 17,
  INFER: 18,
  TUPLE: 19,
  TUPLE_MEMBER: 20,
  REST: 21,
  /**
* For any other type that is not explicitly defined
*
*/
  OTHER: 22
} as const;
export type SerializedType_Type_Which = (typeof SerializedType_Type_Which)[keyof typeof SerializedType_Type_Which];
export class SerializedType_Type extends $.Struct {
  static readonly SIMPLE = SerializedType_Type_Which.SIMPLE;
  static readonly LITERAL = SerializedType_Type_Which.LITERAL;
  static readonly TEMPLATE_LITERAL = SerializedType_Type_Which.TEMPLATE_LITERAL;
  static readonly PARAMETER = SerializedType_Type_Which.PARAMETER;
  static readonly FUNCTION = SerializedType_Type_Which.FUNCTION;
  static readonly METHOD = SerializedType_Type_Which.METHOD;
  static readonly PROPERTY = SerializedType_Type_Which.PROPERTY;
  static readonly PROMISE = SerializedType_Type_Which.PROMISE;
  static readonly CLASS_TYPE = SerializedType_Type_Which.CLASS_TYPE;
  static readonly ENUM = SerializedType_Type_Which.ENUM;
  static readonly UNION = SerializedType_Type_Which.UNION;
  static readonly INTERSECTION = SerializedType_Type_Which.INTERSECTION;
  static readonly ARRAY = SerializedType_Type_Which.ARRAY;
  static readonly OBJECT_LITERAL = SerializedType_Type_Which.OBJECT_LITERAL;
  static readonly INDEX_SIGNATURE = SerializedType_Type_Which.INDEX_SIGNATURE;
  static readonly PROPERTY_SIGNATURE = SerializedType_Type_Which.PROPERTY_SIGNATURE;
  static readonly METHOD_SIGNATURE = SerializedType_Type_Which.METHOD_SIGNATURE;
  static readonly TYPE_PARAMETER = SerializedType_Type_Which.TYPE_PARAMETER;
  static readonly INFER = SerializedType_Type_Which.INFER;
  static readonly TUPLE = SerializedType_Type_Which.TUPLE;
  static readonly TUPLE_MEMBER = SerializedType_Type_Which.TUPLE_MEMBER;
  static readonly REST = SerializedType_Type_Which.REST;
  static readonly OTHER = SerializedType_Type_Which.OTHER;
  public static override readonly _capnp = {
    displayName: "type",
    id: "c677d7ed4a496eab",
    size: new $.ObjectSize(8, 1),
  };
  _adoptSimple(value: $.Orphan<SimpleSerializedType>): void {
    $.utils.setUint16(0, 0, this);
    $.utils.adopt(value, $.utils.getPointer(0, this));
  }
  _disownSimple(): $.Orphan<SimpleSerializedType> {
    return $.utils.disown(this.simple);
  }
  get simple(): SimpleSerializedType {
    $.utils.testWhich("simple", $.utils.getUint16(0, this), 0, this);
    return $.utils.getStruct(0, SimpleSerializedType, this);
  }
  _hasSimple(): boolean {
    return !$.utils.isNull($.utils.getPointer(0, this));
  }
  _initSimple(): SimpleSerializedType {
    $.utils.setUint16(0, 0, this);
    return $.utils.initStructAt(0, SimpleSerializedType, this);
  }
  get _isSimple(): boolean {
    return $.utils.getUint16(0, this) === 0;
  }
  set simple(value: SimpleSerializedType) {
    $.utils.setUint16(0, 0, this);
    $.utils.copyFrom(value, $.utils.getPointer(0, this));
  }
  _adoptLiteral(value: $.Orphan<SerializedTypeLiteral>): void {
    $.utils.setUint16(0, 1, this);
    $.utils.adopt(value, $.utils.getPointer(0, this));
  }
  _disownLiteral(): $.Orphan<SerializedTypeLiteral> {
    return $.utils.disown(this.literal);
  }
  get literal(): SerializedTypeLiteral {
    $.utils.testWhich("literal", $.utils.getUint16(0, this), 1, this);
    return $.utils.getStruct(0, SerializedTypeLiteral, this);
  }
  _hasLiteral(): boolean {
    return !$.utils.isNull($.utils.getPointer(0, this));
  }
  _initLiteral(): SerializedTypeLiteral {
    $.utils.setUint16(0, 1, this);
    return $.utils.initStructAt(0, SerializedTypeLiteral, this);
  }
  get _isLiteral(): boolean {
    return $.utils.getUint16(0, this) === 1;
  }
  set literal(value: SerializedTypeLiteral) {
    $.utils.setUint16(0, 1, this);
    $.utils.copyFrom(value, $.utils.getPointer(0, this));
  }
  _adoptTemplateLiteral(value: $.Orphan<SerializedTypeTemplateLiteral>): void {
    $.utils.setUint16(0, 2, this);
    $.utils.adopt(value, $.utils.getPointer(0, this));
  }
  _disownTemplateLiteral(): $.Orphan<SerializedTypeTemplateLiteral> {
    return $.utils.disown(this.templateLiteral);
  }
  get templateLiteral(): SerializedTypeTemplateLiteral {
    $.utils.testWhich("templateLiteral", $.utils.getUint16(0, this), 2, this);
    return $.utils.getStruct(0, SerializedTypeTemplateLiteral, this);
  }
  _hasTemplateLiteral(): boolean {
    return !$.utils.isNull($.utils.getPointer(0, this));
  }
  _initTemplateLiteral(): SerializedTypeTemplateLiteral {
    $.utils.setUint16(0, 2, this);
    return $.utils.initStructAt(0, SerializedTypeTemplateLiteral, this);
  }
  get _isTemplateLiteral(): boolean {
    return $.utils.getUint16(0, this) === 2;
  }
  set templateLiteral(value: SerializedTypeTemplateLiteral) {
    $.utils.setUint16(0, 2, this);
    $.utils.copyFrom(value, $.utils.getPointer(0, this));
  }
  _adoptParameter(value: $.Orphan<SerializedTypeParameter>): void {
    $.utils.setUint16(0, 3, this);
    $.utils.adopt(value, $.utils.getPointer(0, this));
  }
  _disownParameter(): $.Orphan<SerializedTypeParameter> {
    return $.utils.disown(this.parameter);
  }
  get parameter(): SerializedTypeParameter {
    $.utils.testWhich("parameter", $.utils.getUint16(0, this), 3, this);
    return $.utils.getStruct(0, SerializedTypeParameter, this);
  }
  _hasParameter(): boolean {
    return !$.utils.isNull($.utils.getPointer(0, this));
  }
  _initParameter(): SerializedTypeParameter {
    $.utils.setUint16(0, 3, this);
    return $.utils.initStructAt(0, SerializedTypeParameter, this);
  }
  get _isParameter(): boolean {
    return $.utils.getUint16(0, this) === 3;
  }
  set parameter(value: SerializedTypeParameter) {
    $.utils.setUint16(0, 3, this);
    $.utils.copyFrom(value, $.utils.getPointer(0, this));
  }
  _adoptFunction(value: $.Orphan<SerializedTypeFunction>): void {
    $.utils.setUint16(0, 4, this);
    $.utils.adopt(value, $.utils.getPointer(0, this));
  }
  _disownFunction(): $.Orphan<SerializedTypeFunction> {
    return $.utils.disown(this.function);
  }
  get function(): SerializedTypeFunction {
    $.utils.testWhich("function", $.utils.getUint16(0, this), 4, this);
    return $.utils.getStruct(0, SerializedTypeFunction, this);
  }
  _hasFunction(): boolean {
    return !$.utils.isNull($.utils.getPointer(0, this));
  }
  _initFunction(): SerializedTypeFunction {
    $.utils.setUint16(0, 4, this);
    return $.utils.initStructAt(0, SerializedTypeFunction, this);
  }
  get _isFunction(): boolean {
    return $.utils.getUint16(0, this) === 4;
  }
  set function(value: SerializedTypeFunction) {
    $.utils.setUint16(0, 4, this);
    $.utils.copyFrom(value, $.utils.getPointer(0, this));
  }
  _adoptMethod(value: $.Orphan<SerializedTypeMethod>): void {
    $.utils.setUint16(0, 5, this);
    $.utils.adopt(value, $.utils.getPointer(0, this));
  }
  _disownMethod(): $.Orphan<SerializedTypeMethod> {
    return $.utils.disown(this.method);
  }
  get method(): SerializedTypeMethod {
    $.utils.testWhich("method", $.utils.getUint16(0, this), 5, this);
    return $.utils.getStruct(0, SerializedTypeMethod, this);
  }
  _hasMethod(): boolean {
    return !$.utils.isNull($.utils.getPointer(0, this));
  }
  _initMethod(): SerializedTypeMethod {
    $.utils.setUint16(0, 5, this);
    return $.utils.initStructAt(0, SerializedTypeMethod, this);
  }
  get _isMethod(): boolean {
    return $.utils.getUint16(0, this) === 5;
  }
  set method(value: SerializedTypeMethod) {
    $.utils.setUint16(0, 5, this);
    $.utils.copyFrom(value, $.utils.getPointer(0, this));
  }
  _adoptProperty(value: $.Orphan<SerializedTypeProperty>): void {
    $.utils.setUint16(0, 6, this);
    $.utils.adopt(value, $.utils.getPointer(0, this));
  }
  _disownProperty(): $.Orphan<SerializedTypeProperty> {
    return $.utils.disown(this.property);
  }
  get property(): SerializedTypeProperty {
    $.utils.testWhich("property", $.utils.getUint16(0, this), 6, this);
    return $.utils.getStruct(0, SerializedTypeProperty, this);
  }
  _hasProperty(): boolean {
    return !$.utils.isNull($.utils.getPointer(0, this));
  }
  _initProperty(): SerializedTypeProperty {
    $.utils.setUint16(0, 6, this);
    return $.utils.initStructAt(0, SerializedTypeProperty, this);
  }
  get _isProperty(): boolean {
    return $.utils.getUint16(0, this) === 6;
  }
  set property(value: SerializedTypeProperty) {
    $.utils.setUint16(0, 6, this);
    $.utils.copyFrom(value, $.utils.getPointer(0, this));
  }
  _adoptPromise(value: $.Orphan<SerializedTypePromise>): void {
    $.utils.setUint16(0, 7, this);
    $.utils.adopt(value, $.utils.getPointer(0, this));
  }
  _disownPromise(): $.Orphan<SerializedTypePromise> {
    return $.utils.disown(this.promise);
  }
  get promise(): SerializedTypePromise {
    $.utils.testWhich("promise", $.utils.getUint16(0, this), 7, this);
    return $.utils.getStruct(0, SerializedTypePromise, this);
  }
  _hasPromise(): boolean {
    return !$.utils.isNull($.utils.getPointer(0, this));
  }
  _initPromise(): SerializedTypePromise {
    $.utils.setUint16(0, 7, this);
    return $.utils.initStructAt(0, SerializedTypePromise, this);
  }
  get _isPromise(): boolean {
    return $.utils.getUint16(0, this) === 7;
  }
  set promise(value: SerializedTypePromise) {
    $.utils.setUint16(0, 7, this);
    $.utils.copyFrom(value, $.utils.getPointer(0, this));
  }
  _adoptClassType(value: $.Orphan<SerializedTypeClassType>): void {
    $.utils.setUint16(0, 8, this);
    $.utils.adopt(value, $.utils.getPointer(0, this));
  }
  _disownClassType(): $.Orphan<SerializedTypeClassType> {
    return $.utils.disown(this.classType);
  }
  get classType(): SerializedTypeClassType {
    $.utils.testWhich("classType", $.utils.getUint16(0, this), 8, this);
    return $.utils.getStruct(0, SerializedTypeClassType, this);
  }
  _hasClassType(): boolean {
    return !$.utils.isNull($.utils.getPointer(0, this));
  }
  _initClassType(): SerializedTypeClassType {
    $.utils.setUint16(0, 8, this);
    return $.utils.initStructAt(0, SerializedTypeClassType, this);
  }
  get _isClassType(): boolean {
    return $.utils.getUint16(0, this) === 8;
  }
  set classType(value: SerializedTypeClassType) {
    $.utils.setUint16(0, 8, this);
    $.utils.copyFrom(value, $.utils.getPointer(0, this));
  }
  _adoptEnum(value: $.Orphan<SerializedTypeEnum>): void {
    $.utils.setUint16(0, 9, this);
    $.utils.adopt(value, $.utils.getPointer(0, this));
  }
  _disownEnum(): $.Orphan<SerializedTypeEnum> {
    return $.utils.disown(this.enum);
  }
  get enum(): SerializedTypeEnum {
    $.utils.testWhich("enum", $.utils.getUint16(0, this), 9, this);
    return $.utils.getStruct(0, SerializedTypeEnum, this);
  }
  _hasEnum(): boolean {
    return !$.utils.isNull($.utils.getPointer(0, this));
  }
  _initEnum(): SerializedTypeEnum {
    $.utils.setUint16(0, 9, this);
    return $.utils.initStructAt(0, SerializedTypeEnum, this);
  }
  get _isEnum(): boolean {
    return $.utils.getUint16(0, this) === 9;
  }
  set enum(value: SerializedTypeEnum) {
    $.utils.setUint16(0, 9, this);
    $.utils.copyFrom(value, $.utils.getPointer(0, this));
  }
  _adoptUnion(value: $.Orphan<SerializedTypeUnion>): void {
    $.utils.setUint16(0, 10, this);
    $.utils.adopt(value, $.utils.getPointer(0, this));
  }
  _disownUnion(): $.Orphan<SerializedTypeUnion> {
    return $.utils.disown(this.union);
  }
  get union(): SerializedTypeUnion {
    $.utils.testWhich("union", $.utils.getUint16(0, this), 10, this);
    return $.utils.getStruct(0, SerializedTypeUnion, this);
  }
  _hasUnion(): boolean {
    return !$.utils.isNull($.utils.getPointer(0, this));
  }
  _initUnion(): SerializedTypeUnion {
    $.utils.setUint16(0, 10, this);
    return $.utils.initStructAt(0, SerializedTypeUnion, this);
  }
  get _isUnion(): boolean {
    return $.utils.getUint16(0, this) === 10;
  }
  set union(value: SerializedTypeUnion) {
    $.utils.setUint16(0, 10, this);
    $.utils.copyFrom(value, $.utils.getPointer(0, this));
  }
  _adoptIntersection(value: $.Orphan<SerializedTypeIntersection>): void {
    $.utils.setUint16(0, 11, this);
    $.utils.adopt(value, $.utils.getPointer(0, this));
  }
  _disownIntersection(): $.Orphan<SerializedTypeIntersection> {
    return $.utils.disown(this.intersection);
  }
  get intersection(): SerializedTypeIntersection {
    $.utils.testWhich("intersection", $.utils.getUint16(0, this), 11, this);
    return $.utils.getStruct(0, SerializedTypeIntersection, this);
  }
  _hasIntersection(): boolean {
    return !$.utils.isNull($.utils.getPointer(0, this));
  }
  _initIntersection(): SerializedTypeIntersection {
    $.utils.setUint16(0, 11, this);
    return $.utils.initStructAt(0, SerializedTypeIntersection, this);
  }
  get _isIntersection(): boolean {
    return $.utils.getUint16(0, this) === 11;
  }
  set intersection(value: SerializedTypeIntersection) {
    $.utils.setUint16(0, 11, this);
    $.utils.copyFrom(value, $.utils.getPointer(0, this));
  }
  _adoptArray(value: $.Orphan<SerializedTypeArray>): void {
    $.utils.setUint16(0, 12, this);
    $.utils.adopt(value, $.utils.getPointer(0, this));
  }
  _disownArray(): $.Orphan<SerializedTypeArray> {
    return $.utils.disown(this.array);
  }
  get array(): SerializedTypeArray {
    $.utils.testWhich("array", $.utils.getUint16(0, this), 12, this);
    return $.utils.getStruct(0, SerializedTypeArray, this);
  }
  _hasArray(): boolean {
    return !$.utils.isNull($.utils.getPointer(0, this));
  }
  _initArray(): SerializedTypeArray {
    $.utils.setUint16(0, 12, this);
    return $.utils.initStructAt(0, SerializedTypeArray, this);
  }
  get _isArray(): boolean {
    return $.utils.getUint16(0, this) === 12;
  }
  set array(value: SerializedTypeArray) {
    $.utils.setUint16(0, 12, this);
    $.utils.copyFrom(value, $.utils.getPointer(0, this));
  }
  _adoptObjectLiteral(value: $.Orphan<SerializedTypeObjectLiteral>): void {
    $.utils.setUint16(0, 13, this);
    $.utils.adopt(value, $.utils.getPointer(0, this));
  }
  _disownObjectLiteral(): $.Orphan<SerializedTypeObjectLiteral> {
    return $.utils.disown(this.objectLiteral);
  }
  get objectLiteral(): SerializedTypeObjectLiteral {
    $.utils.testWhich("objectLiteral", $.utils.getUint16(0, this), 13, this);
    return $.utils.getStruct(0, SerializedTypeObjectLiteral, this);
  }
  _hasObjectLiteral(): boolean {
    return !$.utils.isNull($.utils.getPointer(0, this));
  }
  _initObjectLiteral(): SerializedTypeObjectLiteral {
    $.utils.setUint16(0, 13, this);
    return $.utils.initStructAt(0, SerializedTypeObjectLiteral, this);
  }
  get _isObjectLiteral(): boolean {
    return $.utils.getUint16(0, this) === 13;
  }
  set objectLiteral(value: SerializedTypeObjectLiteral) {
    $.utils.setUint16(0, 13, this);
    $.utils.copyFrom(value, $.utils.getPointer(0, this));
  }
  _adoptIndexSignature(value: $.Orphan<SerializedTypeIndexSignature>): void {
    $.utils.setUint16(0, 14, this);
    $.utils.adopt(value, $.utils.getPointer(0, this));
  }
  _disownIndexSignature(): $.Orphan<SerializedTypeIndexSignature> {
    return $.utils.disown(this.indexSignature);
  }
  get indexSignature(): SerializedTypeIndexSignature {
    $.utils.testWhich("indexSignature", $.utils.getUint16(0, this), 14, this);
    return $.utils.getStruct(0, SerializedTypeIndexSignature, this);
  }
  _hasIndexSignature(): boolean {
    return !$.utils.isNull($.utils.getPointer(0, this));
  }
  _initIndexSignature(): SerializedTypeIndexSignature {
    $.utils.setUint16(0, 14, this);
    return $.utils.initStructAt(0, SerializedTypeIndexSignature, this);
  }
  get _isIndexSignature(): boolean {
    return $.utils.getUint16(0, this) === 14;
  }
  set indexSignature(value: SerializedTypeIndexSignature) {
    $.utils.setUint16(0, 14, this);
    $.utils.copyFrom(value, $.utils.getPointer(0, this));
  }
  _adoptPropertySignature(value: $.Orphan<SerializedTypePropertySignature>): void {
    $.utils.setUint16(0, 15, this);
    $.utils.adopt(value, $.utils.getPointer(0, this));
  }
  _disownPropertySignature(): $.Orphan<SerializedTypePropertySignature> {
    return $.utils.disown(this.propertySignature);
  }
  get propertySignature(): SerializedTypePropertySignature {
    $.utils.testWhich("propertySignature", $.utils.getUint16(0, this), 15, this);
    return $.utils.getStruct(0, SerializedTypePropertySignature, this);
  }
  _hasPropertySignature(): boolean {
    return !$.utils.isNull($.utils.getPointer(0, this));
  }
  _initPropertySignature(): SerializedTypePropertySignature {
    $.utils.setUint16(0, 15, this);
    return $.utils.initStructAt(0, SerializedTypePropertySignature, this);
  }
  get _isPropertySignature(): boolean {
    return $.utils.getUint16(0, this) === 15;
  }
  set propertySignature(value: SerializedTypePropertySignature) {
    $.utils.setUint16(0, 15, this);
    $.utils.copyFrom(value, $.utils.getPointer(0, this));
  }
  _adoptMethodSignature(value: $.Orphan<SerializedTypeMethodSignature>): void {
    $.utils.setUint16(0, 16, this);
    $.utils.adopt(value, $.utils.getPointer(0, this));
  }
  _disownMethodSignature(): $.Orphan<SerializedTypeMethodSignature> {
    return $.utils.disown(this.methodSignature);
  }
  get methodSignature(): SerializedTypeMethodSignature {
    $.utils.testWhich("methodSignature", $.utils.getUint16(0, this), 16, this);
    return $.utils.getStruct(0, SerializedTypeMethodSignature, this);
  }
  _hasMethodSignature(): boolean {
    return !$.utils.isNull($.utils.getPointer(0, this));
  }
  _initMethodSignature(): SerializedTypeMethodSignature {
    $.utils.setUint16(0, 16, this);
    return $.utils.initStructAt(0, SerializedTypeMethodSignature, this);
  }
  get _isMethodSignature(): boolean {
    return $.utils.getUint16(0, this) === 16;
  }
  set methodSignature(value: SerializedTypeMethodSignature) {
    $.utils.setUint16(0, 16, this);
    $.utils.copyFrom(value, $.utils.getPointer(0, this));
  }
  _adoptTypeParameter(value: $.Orphan<SerializedTypeTypeParameter>): void {
    $.utils.setUint16(0, 17, this);
    $.utils.adopt(value, $.utils.getPointer(0, this));
  }
  _disownTypeParameter(): $.Orphan<SerializedTypeTypeParameter> {
    return $.utils.disown(this.typeParameter);
  }
  get typeParameter(): SerializedTypeTypeParameter {
    $.utils.testWhich("typeParameter", $.utils.getUint16(0, this), 17, this);
    return $.utils.getStruct(0, SerializedTypeTypeParameter, this);
  }
  _hasTypeParameter(): boolean {
    return !$.utils.isNull($.utils.getPointer(0, this));
  }
  _initTypeParameter(): SerializedTypeTypeParameter {
    $.utils.setUint16(0, 17, this);
    return $.utils.initStructAt(0, SerializedTypeTypeParameter, this);
  }
  get _isTypeParameter(): boolean {
    return $.utils.getUint16(0, this) === 17;
  }
  set typeParameter(value: SerializedTypeTypeParameter) {
    $.utils.setUint16(0, 17, this);
    $.utils.copyFrom(value, $.utils.getPointer(0, this));
  }
  _adoptInfer(value: $.Orphan<SerializedTypeInfer>): void {
    $.utils.setUint16(0, 18, this);
    $.utils.adopt(value, $.utils.getPointer(0, this));
  }
  _disownInfer(): $.Orphan<SerializedTypeInfer> {
    return $.utils.disown(this.infer);
  }
  get infer(): SerializedTypeInfer {
    $.utils.testWhich("infer", $.utils.getUint16(0, this), 18, this);
    return $.utils.getStruct(0, SerializedTypeInfer, this);
  }
  _hasInfer(): boolean {
    return !$.utils.isNull($.utils.getPointer(0, this));
  }
  _initInfer(): SerializedTypeInfer {
    $.utils.setUint16(0, 18, this);
    return $.utils.initStructAt(0, SerializedTypeInfer, this);
  }
  get _isInfer(): boolean {
    return $.utils.getUint16(0, this) === 18;
  }
  set infer(value: SerializedTypeInfer) {
    $.utils.setUint16(0, 18, this);
    $.utils.copyFrom(value, $.utils.getPointer(0, this));
  }
  _adoptTuple(value: $.Orphan<SerializedTypeTuple>): void {
    $.utils.setUint16(0, 19, this);
    $.utils.adopt(value, $.utils.getPointer(0, this));
  }
  _disownTuple(): $.Orphan<SerializedTypeTuple> {
    return $.utils.disown(this.tuple);
  }
  get tuple(): SerializedTypeTuple {
    $.utils.testWhich("tuple", $.utils.getUint16(0, this), 19, this);
    return $.utils.getStruct(0, SerializedTypeTuple, this);
  }
  _hasTuple(): boolean {
    return !$.utils.isNull($.utils.getPointer(0, this));
  }
  _initTuple(): SerializedTypeTuple {
    $.utils.setUint16(0, 19, this);
    return $.utils.initStructAt(0, SerializedTypeTuple, this);
  }
  get _isTuple(): boolean {
    return $.utils.getUint16(0, this) === 19;
  }
  set tuple(value: SerializedTypeTuple) {
    $.utils.setUint16(0, 19, this);
    $.utils.copyFrom(value, $.utils.getPointer(0, this));
  }
  _adoptTupleMember(value: $.Orphan<SerializedTypeTupleMember>): void {
    $.utils.setUint16(0, 20, this);
    $.utils.adopt(value, $.utils.getPointer(0, this));
  }
  _disownTupleMember(): $.Orphan<SerializedTypeTupleMember> {
    return $.utils.disown(this.tupleMember);
  }
  get tupleMember(): SerializedTypeTupleMember {
    $.utils.testWhich("tupleMember", $.utils.getUint16(0, this), 20, this);
    return $.utils.getStruct(0, SerializedTypeTupleMember, this);
  }
  _hasTupleMember(): boolean {
    return !$.utils.isNull($.utils.getPointer(0, this));
  }
  _initTupleMember(): SerializedTypeTupleMember {
    $.utils.setUint16(0, 20, this);
    return $.utils.initStructAt(0, SerializedTypeTupleMember, this);
  }
  get _isTupleMember(): boolean {
    return $.utils.getUint16(0, this) === 20;
  }
  set tupleMember(value: SerializedTypeTupleMember) {
    $.utils.setUint16(0, 20, this);
    $.utils.copyFrom(value, $.utils.getPointer(0, this));
  }
  _adoptRest(value: $.Orphan<SerializedTypeRest>): void {
    $.utils.setUint16(0, 21, this);
    $.utils.adopt(value, $.utils.getPointer(0, this));
  }
  _disownRest(): $.Orphan<SerializedTypeRest> {
    return $.utils.disown(this.rest);
  }
  get rest(): SerializedTypeRest {
    $.utils.testWhich("rest", $.utils.getUint16(0, this), 21, this);
    return $.utils.getStruct(0, SerializedTypeRest, this);
  }
  _hasRest(): boolean {
    return !$.utils.isNull($.utils.getPointer(0, this));
  }
  _initRest(): SerializedTypeRest {
    $.utils.setUint16(0, 21, this);
    return $.utils.initStructAt(0, SerializedTypeRest, this);
  }
  get _isRest(): boolean {
    return $.utils.getUint16(0, this) === 21;
  }
  set rest(value: SerializedTypeRest) {
    $.utils.setUint16(0, 21, this);
    $.utils.copyFrom(value, $.utils.getPointer(0, this));
  }
  _adoptOther(value: $.Orphan<SerializedTypeOther>): void {
    $.utils.setUint16(0, 22, this);
    $.utils.adopt(value, $.utils.getPointer(0, this));
  }
  _disownOther(): $.Orphan<SerializedTypeOther> {
    return $.utils.disown(this.other);
  }
  /**
* For any other type that is not explicitly defined
*
*/
  get other(): SerializedTypeOther {
    $.utils.testWhich("other", $.utils.getUint16(0, this), 22, this);
    return $.utils.getStruct(0, SerializedTypeOther, this);
  }
  _hasOther(): boolean {
    return !$.utils.isNull($.utils.getPointer(0, this));
  }
  _initOther(): SerializedTypeOther {
    $.utils.setUint16(0, 22, this);
    return $.utils.initStructAt(0, SerializedTypeOther, this);
  }
  get _isOther(): boolean {
    return $.utils.getUint16(0, this) === 22;
  }
  set other(value: SerializedTypeOther) {
    $.utils.setUint16(0, 22, this);
    $.utils.copyFrom(value, $.utils.getPointer(0, this));
  }
  public override toString(): string { return "SerializedType_Type_" + super.toString(); }
  which(): SerializedType_Type_Which {
    return $.utils.getUint16(0, this) as SerializedType_Type_Which;
  }
}
export class SerializedType extends $.Struct {
  public static override readonly _capnp = {
    displayName: "SerializedType",
    id: "96856dcc2dd3d58f",
    size: new $.ObjectSize(8, 1),
  };
  get type(): SerializedType_Type {
    return $.utils.getAs(SerializedType_Type, this);
  }
  _initType(): SerializedType_Type {
    return $.utils.getAs(SerializedType_Type, this);
  }
  public override toString(): string { return "SerializedType_" + super.toString(); }
}
export class SerializedTypes extends $.Struct {
  public static override readonly _capnp = {
    displayName: "SerializedTypes",
    id: "ac55398ab0ef4958",
    size: new $.ObjectSize(0, 1),
  };
  static _Types: $.ListCtor<SerializedType>;
  _adoptTypes(value: $.Orphan<$.List<SerializedType>>): void {
    $.utils.adopt(value, $.utils.getPointer(0, this));
  }
  _disownTypes(): $.Orphan<$.List<SerializedType>> {
    return $.utils.disown(this.types);
  }
  get types(): $.List<SerializedType> {
    return $.utils.getList(0, SerializedTypes._Types, this);
  }
  _hasTypes(): boolean {
    return !$.utils.isNull($.utils.getPointer(0, this));
  }
  _initTypes(length: number): $.List<SerializedType> {
    return $.utils.initList(0, SerializedTypes._Types, length, this);
  }
  set types(value: $.List<SerializedType>) {
    $.utils.copyFrom(value, $.utils.getPointer(0, this));
  }
  public override toString(): string { return "SerializedTypes_" + super.toString(); }
}
EntityOptions._Indexes = $.CompositeList(EntityOptions_EntityIndexOptions);
SerializedTypeObjectLiteral._TypeArguments = $.CompositeList(SerializedTypeReference);
SerializedTypeObjectLiteral._Decorators = $.CompositeList(SerializedTypeReference);
SerializedTypeObjectLiteral._Types = $.CompositeList(SerializedTypeReference);
SerializedTypeClassType._TypeArguments = $.CompositeList(SerializedTypeReference);
SerializedTypeClassType._Decorators = $.CompositeList(SerializedTypeReference);
SerializedTypeClassType._ExtendsArguments = $.CompositeList(SerializedTypeReference);
SerializedTypeClassType._Arguments = $.CompositeList(SerializedTypeReference);
SerializedTypeClassType._Types = $.CompositeList(SerializedTypeReference);
SerializedTypeParameter._TypeArguments = $.CompositeList(SerializedTypeReference);
SerializedTypeParameter._Decorators = $.CompositeList(SerializedTypeReference);
SerializedTypeMethod._TypeArguments = $.CompositeList(SerializedTypeReference);
SerializedTypeMethod._Decorators = $.CompositeList(SerializedTypeReference);
SerializedTypeMethod._Parameters = $.CompositeList(SerializedTypeParameter);
SerializedTypeProperty._TypeArguments = $.CompositeList(SerializedTypeReference);
SerializedTypeProperty._Decorators = $.CompositeList(SerializedTypeReference);
SerializedTypeFunction._TypeArguments = $.CompositeList(SerializedTypeReference);
SerializedTypeFunction._Decorators = $.CompositeList(SerializedTypeReference);
SerializedTypeFunction._Parameters = $.CompositeList(SerializedTypeParameter);
SerializedTypePromise._TypeArguments = $.CompositeList(SerializedTypeReference);
SerializedTypePromise._Decorators = $.CompositeList(SerializedTypeReference);
SerializedTypeEnum._TypeArguments = $.CompositeList(SerializedTypeReference);
SerializedTypeEnum._Decorators = $.CompositeList(SerializedTypeReference);
SerializedTypeEnum._EnumEntries = $.CompositeList(SerializedTypeEnumEntry);
SerializedTypeUnion._TypeArguments = $.CompositeList(SerializedTypeReference);
SerializedTypeUnion._Decorators = $.CompositeList(SerializedTypeReference);
SerializedTypeUnion._Types = $.CompositeList(SerializedTypeReference);
SerializedTypeIntersection._TypeArguments = $.CompositeList(SerializedTypeReference);
SerializedTypeIntersection._Decorators = $.CompositeList(SerializedTypeReference);
SerializedTypeIntersection._Types = $.CompositeList(SerializedTypeReference);
SerializedTypeArray._TypeArguments = $.CompositeList(SerializedTypeReference);
SerializedTypeArray._Decorators = $.CompositeList(SerializedTypeReference);
SerializedTypeIndexSignature._TypeArguments = $.CompositeList(SerializedTypeReference);
SerializedTypeIndexSignature._Decorators = $.CompositeList(SerializedTypeReference);
SerializedTypePropertySignature._TypeArguments = $.CompositeList(SerializedTypeReference);
SerializedTypePropertySignature._Decorators = $.CompositeList(SerializedTypeReference);
SerializedTypeMethodSignature._TypeArguments = $.CompositeList(SerializedTypeReference);
SerializedTypeMethodSignature._Decorators = $.CompositeList(SerializedTypeReference);
SerializedTypeMethodSignature._Parameters = $.CompositeList(SerializedTypeParameter);
SerializedTypeTypeParameter._TypeArguments = $.CompositeList(SerializedTypeReference);
SerializedTypeTypeParameter._Decorators = $.CompositeList(SerializedTypeReference);
SerializedTypeInfer._TypeArguments = $.CompositeList(SerializedTypeReference);
SerializedTypeInfer._Decorators = $.CompositeList(SerializedTypeReference);
SerializedTypeTupleMember._TypeArguments = $.CompositeList(SerializedTypeReference);
SerializedTypeTupleMember._Decorators = $.CompositeList(SerializedTypeReference);
SerializedTypeTuple._TypeArguments = $.CompositeList(SerializedTypeReference);
SerializedTypeTuple._Decorators = $.CompositeList(SerializedTypeReference);
SerializedTypeTuple._Types = $.CompositeList(SerializedTypeTupleMember);
SerializedTypeRest._TypeArguments = $.CompositeList(SerializedTypeReference);
SerializedTypeRest._Decorators = $.CompositeList(SerializedTypeReference);
SimpleSerializedType._TypeArguments = $.CompositeList(SerializedTypeReference);
SimpleSerializedType._Decorators = $.CompositeList(SerializedTypeReference);
SerializedTypeLiteral._TypeArguments = $.CompositeList(SerializedTypeReference);
SerializedTypeLiteral._Decorators = $.CompositeList(SerializedTypeReference);
SerializedTypeTemplateLiteral._TypeArguments = $.CompositeList(SerializedTypeReference);
SerializedTypeTemplateLiteral._Decorators = $.CompositeList(SerializedTypeReference);
SerializedTypeTemplateLiteral._Types = $.CompositeList(SerializedTypeReference);
SerializedTypes._Types = $.CompositeList(SerializedType);
