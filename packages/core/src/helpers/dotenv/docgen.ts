/* -------------------------------------------------------------------

                  ⚡ Storm Software - Storm Stack

 This code was released as part of the Storm Stack project. Storm Stack
 is maintained by Storm Software under the Apache-2.0 License, and is
 free for commercial and private use. For more information, please visit
 our licensing page.

 Website:         https://stormsoftware.com
 Repository:      https://github.com/storm-software/storm-stack
 Documentation:   https://stormsoftware.com/projects/storm-stack/docs
 Contact:         https://stormsoftware.com/contact
 License:         https://stormsoftware.com/projects/storm-stack/license

 ------------------------------------------------------------------- */

import type { ReflectionProperty } from "@deepkit/type";
import { stringifyType } from "@deepkit/type";
import type { PackageJson } from "@stryke/types/package-json";

export function generateDotenvMarkdown(
  packageJson: PackageJson,
  properties: ReflectionProperty[]
) {
  return `<!-- Generated by Storm Stack -->

# Environment variables configuration

Below is a list of environment variables used by the [${
    packageJson.name
  }](https://www.npmjs.com/package/${packageJson.name}) package. These values can be updated in the \`.env\` file in the root of the project.

## Variables

The below list of environment variables are used as configuration parameters to drive the processing of the application. The data contained in these variables are **not** considered sensitive or confidential. Any values provided in these variables will be available in plain text to the public.

| Name | Description | Type | Default Value | Required |
| ---- | ----------- | ---- | ------------- | :------: |
${properties
  .filter(property => property.getNameAsString() !== "__STORM_INJECTED__")
  .sort((a, b) => a.getNameAsString().localeCompare(b.getNameAsString()))
  .map(reflectionProperty => {
    return `| ${reflectionProperty.getNameAsString().trim()} | ${(reflectionProperty.getDescription()?.replaceAll("\r", "")?.replaceAll("\n", "") ?? "").trim()} | ${stringifyType(reflectionProperty.getType()).trim().replaceAll(" | ", ", or ")} | ${reflectionProperty.hasDefault() ? (String(reflectionProperty.getDefaultValue())?.includes('"') ? reflectionProperty.getDefaultValue() : `\`${reflectionProperty.getDefaultValue()}\``) : ""} | ${
      reflectionProperty.isValueRequired() ? "" : "✔"
    } |`;
  })
  .join("\n")}
`;
}
