/* -------------------------------------------------------------------

                  ⚡ Storm Software - Storm Stack

 This code was released as part of the Storm Stack project. Storm Stack
 is maintained by Storm Software under the Apache-2.0 license, and is
 free for commercial and private use. For more information, please visit
 our licensing page at https://stormsoftware.com/license.

 Website:                  https://stormsoftware.com
 Repository:               https://github.com/storm-software/storm-stack
 Documentation:            https://docs.stormsoftware.com/projects/storm-stack
 Contact:                  https://stormsoftware.com/contact

 SPDX-License-Identifier:  Apache-2.0

 ------------------------------------------------------------------- */

import { stringifyType } from "@deepkit/type";
import { LogLevelLabel } from "@storm-software/config-tools/types";
import { createDirectory } from "@stryke/fs/helpers";
import { existsSync } from "@stryke/path/exists";
import { joinPaths } from "@stryke/path/join-paths";
import { readDotenvReflection } from "../../helpers/dotenv/persistence";
import { writeFile } from "../../helpers/utilities/write-file";
import type { Context, EngineHooks } from "../../types/build";
import type { LogFn } from "../../types/config";

export async function docsDotenv(
  log: LogFn,
  context: Context,
  hooks: EngineHooks
) {
  log(
    LogLevelLabel.TRACE,
    "Writing Dotenv documentation for the Storm Stack project artifacts."
  );

  // Clean and recreate the output directories
  const outputPath = joinPaths(
    context.options.projectRoot,
    "docs",
    "generated"
  );

  if (!existsSync(outputPath)) {
    await createDirectory(outputPath);
  }

  const reflection = await readDotenvReflection(context, "config");
  const dotenvDocFile = joinPaths(outputPath, "dotenv.md");

  log(
    LogLevelLabel.TRACE,
    `Documenting environment variables configuration in "${dotenvDocFile}"`
  );

  await writeFile(
    log,
    dotenvDocFile,
    `<!-- Generated by Storm Stack -->

# Environment variables configuration

Below is a list of environment variables used by the [${
      context.packageJson.name
    }](https://www.npmjs.com/package/${context.packageJson.name}) package. These values can be updated in the \`.env\` file in the root of the project.

## Configuration Parameters

The below list of environment variables are used as configuration parameters to drive the processing of the application. The data contained in these variables are **not** considered sensitive or confidential. Any values provided in these variables will be available in plain text to the public.

| Name | Description | Type | Default Value | Required |
| ---- | ----------- | ---- | ------------- | :------: |
${reflection
  .getProperties()
  .filter(property => property.getNameAsString() !== "__STORM_INJECTED__")
  .sort((a, b) => a.getNameAsString().localeCompare(b.getNameAsString()))
  .map(reflectionProperty => {
    return `| ${reflectionProperty.getNameAsString().trim()} | ${(reflectionProperty.getDescription()?.replaceAll("\r", "")?.replaceAll("\n", "") ?? "").trim()} | ${stringifyType(reflectionProperty.getType()).trim().replaceAll(" | ", ", or ")} | ${reflectionProperty.hasDefault() ? (String(reflectionProperty.getDefaultValue())?.includes('"') ? reflectionProperty.getDefaultValue() : `\`${reflectionProperty.getDefaultValue()}\``) : ""} | ${
      reflectionProperty.isValueRequired() ? "" : "✔"
    } |`;
  })
  .join("\n")}
`
  );

  await hooks.callHook("docs:dotenv", context).catch((error: Error) => {
    log(
      LogLevelLabel.ERROR,
      `An error occured while writing the Dotenv documentation for the Storm Stack project artifacts: ${error.message} \n${error.stack ?? ""}`
    );

    throw new Error(
      "An error occured while writing the Dotenv documentation for the Storm Stack project artifacts",
      {
        cause: error
      }
    );
  });
}
