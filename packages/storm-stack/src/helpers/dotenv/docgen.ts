/* -------------------------------------------------------------------

                  ⚡ Storm Software - Storm Stack

 This code was released as part of the Storm Stack project. Storm Stack
 is maintained by Storm Software under the Apache-2.0 License, and is
 free for commercial and private use. For more information, please visit
 our licensing page.

 Website:         https://stormsoftware.com
 Repository:      https://github.com/storm-software/storm-stack
 Documentation:   https://stormsoftware.com/projects/storm-stack/docs
 Contact:         https://stormsoftware.com/contact
 License:         https://stormsoftware.com/projects/storm-stack/license

 ------------------------------------------------------------------- */

import { isSet } from "@stryke/types/type-checks/is-set";
import { NEWLINE_STRING } from "@stryke/types/utility-types/base";
import type { PackageJson } from "@stryke/types/utility-types/package-json";
import type { ResolvedDotenvTypeDefinitionProperty } from "../../types/build";

export function generateDotenvMarkdown(
  packageJson: PackageJson,
  env: Record<string, ResolvedDotenvTypeDefinitionProperty>
) {
  return `<!-- Generated by Storm Stack -->

# Environment variables configuration

Below is a list of environment variables used by the [${
    packageJson.name
  }](https://www.npmjs.com/package/${packageJson.name}) package. These values can be updated in the \`.env\` file in the root of the project.

## Variables

The below list of environment variables are used as configuration parameters to drive the processing of the application. The data contained in these variables are **not** considered sensitive or confidential. Any values provided in these variables will be available in plain text to the public.

| Name | Description | Type | Default Value | Required |
| ---- | ----------- | ---- | ------------- | :--------: |
${Object.keys(env)
  .filter(key => key !== "__STORM_INJECTED__")
  .sort()
  .map(key => {
    return `| ${key} | ${env[key]?.description?.replaceAll("\r", "")?.replaceAll("\n", "") ?? ""} | ${env[key]?.type?.getText() ?? ""} | ${isSet(env[key]?.defaultValue) ? (env[key]?.text === "string" ? `"${String(env[key]?.defaultValue)}"` : `\`${String(env[key]?.defaultValue)}\``) : ""} | ${
      isSet(env[key]?.defaultValue) || env[key]?.isOptional ? "" : "✔"
    } |`;
  })
  .join(NEWLINE_STRING)}
`;
}
